{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/components/MapView/MapView.tsx","webpack:///./src/components/Covid19TrendLayer/Covid19TrendLayer.tsx","webpack:///./src/components/QueryTaskLayer/QueryTaskLayer.tsx","webpack:///./src/AppConfig.ts","webpack:///./src/components/ControlPanel/ControlPanel.tsx","webpack:///./src/components/ChartPanel/SvgContainer.tsx","webpack:///./src/components/ChartPanel/Axis.tsx","webpack:///./src/components/ChartPanel/Bars.tsx","webpack:///./src/components/ChartPanel/Line.tsx","webpack:///./src/components/ChartPanel/MouseEventsRect.tsx","webpack:///./src/components/ChartPanel/Tooltip.tsx","webpack:///./src/components/ChartPanel/ChartPanel.tsx","webpack:///./src/components/BottomPanel/BottomPanel.tsx","webpack:///./src/components/SummaryInfoPanel/SummaryInfoPanel.tsx","webpack:///./src/components/QueryTaskResultLayer/QueryTaskResultLayer.tsx","webpack:///./src/components/About/About.tsx","webpack:///./src/utils/queryCovid19Data.ts","webpack:///./src/hooks/useMapLocationFromUrl.tsx","webpack:///./src/components/App/App.tsx","webpack:///./src/index.tsx"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","0","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","MapView","webmapId","initialMapCenterLocation","onStationary","children","mapDivRef","React","useRef","useState","mapView","setMapView","initMapView","a","loadModules","WebMap","lat","lon","zoom","center","undefined","view","container","current","map","portalItem","id","when","addWatchEvent","whenTrue","centerLocation","latitude","toFixed","longitude","useEffect","loadCss","style","position","top","left","width","height","ref","Children","child","cloneElement","Covid19TrendLayer","activeTrend","features","visibleScale","size","trendLayer","setTrendLayer","isLayerInVisibleScale","setIsLayerInVisibleScale","init","GraphicsLayer","watchUtils","layer","minScale","min","maxScale","max","add","isInVisibleScale","scale","draw","CIMSymbol","Graphic","Point","graphics","feature","geometry","pathData","confirmed","deaths","newCases","frame","path","symbol","type","symbolLayers","enable","scaleSymbolsProportionally","respectFrame","markerGraphics","paths","color","y","x","addMany","removeAll","QueryTaskLayer","itemId","outFields","onStart","onSelect","setLayer","FeatureLayer","queryFeatures","event","where","toMap","returnGeometry","results","on","ThemeStyle","SwitchBtnData","label","ControlPanel","isMobile","activeTrendOnChange","infoBtnOnClick","className","onClick","viewBox","fill","margin","right","bottom","SvgContainer","xDomain","yDomain","windowSize","useWindowSize","containerRef","dimensionRef","svgContainerData","setSvgContainerData","scales","setScales","scalesOnUpdateEndHandler","lastUpdateTime","Date","offsetWidth","offsetHeight","select","append","attr","svgSelector","svg","node","g","xScale","scaleBand","paddingInner","range","domain","yScale","scaleLinear","nice","dimension","newWidth","resizeHandler","formatTime","timeFormat","Axis","mainGroup","startDateParts","startDate","endDateParts","endDate","xAxis","xAxisLabel","split","scaleTime","axisBottom","tickFormat","date","selectAll","yAxis","axisLeft","ticks","tickSizeInner","tickPadding","num","numberFns","abbreviateNumber","yAxisLabel","drawYAxis","BarRectGroupClassName","generate","BarRectClassName","Bar","fillColor","containerG","remove","existingBars","enter","bandwidth","LinePathClassName","Line","strokeColor","lines","exit","containerGroup","xOffset","valueline","line","MouseEventsRect","onHover","itemOnHover","setItemOnHover","item","updateVerticalRefLinePos","vRefLine","xPos","attributes","dt","opacity","getItemByMousePos","mousePosX","itemIndex","len","currItemPos","nextItemIndex","nextItemPos","Math","abs","mouse","this","Tooltip","Confirmed","Deaths","NewCases","tooltipRef","tooltipPos","setTooltipPos","tooltipDiv","tooltipDivWidth","xPosForItemOnHover","updateTooltipPosition","Population","numberWithCommas","FieldNameByActiveTrend","ChartPanel","values","fieldName","showNormalizedValues","getDataForLine","sum","startIndex","endIndex","featuresInPastWeek","forEach","round","BottomPanel","showLoadingIndicator","SummaryInfoPanel","locationName","closeBtnOnClick","feature7DaysAgo","latestFeature","cumulativeCases","cumulativeDeaths","newCasesThisWeek","deathsThisWeek","population","blockStyle","featureWithBiggestWeeklyIncrease","biggestWeeklyIncrease","Number","NEGATIVE_INFINITY","dateForFirstFeature","parse","dayForFirstFeature","getISODay","dayOfWeek","weeklyIncrease","dateWithBiggestWeeklyIncrease","format","getBiggestWeeklyIncrease","getSummaryInfo","QueryTaskResultLayer","queryResult","graphicLayer","setGraphicLayer","showQueryResult","SimpleFillSymbol","outline","About","isOpen","closeBtnOnClicked","modal","bus","emit","data-modal","role","aria-labelledby","xmlns","target","href","cachedQueryResults","fetchCovid19Data","countyFIPS","stateName","key4CachedResults","requestUrl","params","f","orderByFields","groupByFieldsForStatistics","outStatistics","JSON","stringify","axios","URLSearchParams","useMapCenterLocationFromUrl","searchParams","urlFns","parseQuery","getMapCenterLocationFromUrlSearchParams","locationFromURL","setMapCenterLocation","updateQueryParam","saveLocationInURL","miscFns","isMobileDevice","DefaultTrend","trend","App","setActiveTrend","covid19USCountiesData","setCovid19USCountiesData","covid19USStatesData","setCovid19USStatesData","covid19CasesByTimeQueryResults","setCovid19CasesByTimeQueryResults","covid19CasesByTimeQueryLocation","setcovid19CasesByTimeQueryLocation","isLoading","setIsLoading","isAboutModalOpen","setIsAboutModalOpen","fetchData","Url4CountiesJSON","HostUrl","AppConfig","Url4StatesJSON","queryResUSStates","queryResUSCounties","countyOnSelect","countyFeature","resetQueryResults","graphic","stateOnSelect","stateFeature","queryOnStartHandler","setDefaultOptions","url","ReactDOM","render","document","getElementById"],"mappings":"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","file":"main.203fd3f3ff79652943ba.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t0: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([144,1]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import React, {\r\n    useEffect\r\n} from 'react';\r\n\r\nimport { loadModules, loadCss } from 'esri-loader';\r\nimport IMapView from 'esri/views/MapView';\r\nimport IWebMap from \"esri/WebMap\";\r\nimport IwatchUtils from 'esri/core/watchUtils';\r\n\r\nimport {\r\n    MapCenterLocation\r\n} from '../../hooks/useMapLocationFromUrl'\r\n\r\ninterface Props {\r\n    webmapId: string;\r\n    initialMapCenterLocation?: MapCenterLocation;\r\n    onStationary: (data:MapCenterLocation)=>void;\r\n};\r\n\r\nconst MapView:React.FC<Props> = ({\r\n    webmapId,\r\n    initialMapCenterLocation,\r\n    onStationary,\r\n    children\r\n})=>{\r\n\r\n    const mapDivRef = React.useRef<HTMLDivElement>();\r\n\r\n    const [ mapView, setMapView] = React.useState<IMapView>(null);\r\n\r\n    const initMapView = async()=>{\r\n  \r\n        type Modules = [typeof IMapView, typeof IWebMap];\r\n\r\n        try {\r\n            const [ \r\n                MapView, \r\n                WebMap \r\n            ] = await (loadModules([\r\n                'esri/views/MapView',\r\n                'esri/WebMap',\r\n            ]) as Promise<Modules>);\r\n\r\n            const { lat, lon, zoom } = initialMapCenterLocation || {};\r\n\r\n            const center = lon && lat  ? [ lon, lat ] : undefined;\r\n\r\n            const view = new MapView({\r\n                container: mapDivRef.current,\r\n                center,\r\n                zoom,\r\n                map: new WebMap({\r\n                    portalItem: {\r\n                        id: webmapId\r\n                    }  \r\n                }),\r\n            });\r\n\r\n            view.when(()=>{\r\n                setMapView(view);\r\n            });\r\n\r\n        } catch(err){   \r\n            console.error(err);\r\n        }\r\n    };\r\n\r\n    const addWatchEvent = async()=>{\r\n        type Modules = [typeof IwatchUtils];\r\n\r\n        try {\r\n            const [ \r\n                watchUtils \r\n            ] = await (loadModules([\r\n                'esri/core/watchUtils'\r\n            ]) as Promise<Modules>);\r\n\r\n            watchUtils.whenTrue(mapView, 'stationary', ()=>{\r\n                // console.log('mapview is stationary', mapView.center, mapView.zoom);\r\n\r\n                if(mapView.zoom === -1){\r\n                    return;\r\n                }\r\n\r\n                const centerLocation = {\r\n                    lat: mapView.center && mapView.center.latitude \r\n                        ? +mapView.center.latitude.toFixed(3) \r\n                        : 0,\r\n                    lon: mapView.center && mapView.center.longitude \r\n                        ? +mapView.center.longitude.toFixed(3) \r\n                        : 0,\r\n                    zoom: mapView.zoom\r\n                }\r\n\r\n                onStationary(centerLocation);\r\n            });\r\n\r\n        } catch(err){   \r\n            console.error(err);\r\n        }\r\n    };\r\n\r\n    useEffect(()=>{\r\n        loadCss();\r\n        initMapView();\r\n    }, []);\r\n\r\n    React.useEffect(()=>{\r\n        if(mapView){\r\n            addWatchEvent();\r\n        }\r\n    }, [ mapView ]);\r\n\r\n    return (\r\n        <>\r\n            <div \r\n                style={{\r\n                    position: 'absolute',\r\n                    top: 0,\r\n                    left: 0,\r\n                    width: '100%',\r\n                    height: '100%',\r\n                }}\r\n                ref={mapDivRef}\r\n            ></div>\r\n            { \r\n                React.Children.map(children, (child)=>{\r\n                    return React.cloneElement(child as React.ReactElement<any>, {\r\n                        mapView,\r\n                    });\r\n                }) \r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MapView;","import React, {\r\n    useEffect,\r\n    useState\r\n} from 'react';\r\n\r\nimport { loadModules } from 'esri-loader';\r\nimport IMapView from 'esri/views/MapView';\r\nimport ICIMSymbol from 'esri/symbols/CIMSymbol';\r\nimport IGraphic from 'esri/Graphic';\r\nimport IPoint from 'esri/geometry/Point';\r\nimport IGraphicsLayer from 'esri/layers/GraphicsLayer';\r\nimport IwatchUtils from 'esri/core/watchUtils';\r\n\r\n// import IFeatureLayer from 'esri/layers/FeatureLayer';\r\n// import IUniqueValueRenderer from 'esri/renderers/UniqueValueRenderer';\r\n// // import IUniqueValueInfo from 'esri/renderers/support/UniqueValueInfo';\r\n\r\n// import ISimpleRenderer from 'esri/renderers/SimpleRenderer';\r\n// import ISimpleMarkerSymbol from 'esri/symbols/SimpleMarkerSymbol';\r\n\r\nimport {\r\n    PathData,\r\n    Covid19TrendName,\r\n    Covid19TrendData\r\n} from 'covid19-trend-map';\r\nimport AppConfig from '../../AppConfig';\r\n\r\ntype Props = {\r\n    activeTrend: Covid19TrendName;\r\n    size?: number;\r\n    visibleScale?: {\r\n        min: number;\r\n        max: number;\r\n    }\r\n    // itemId?: string;\r\n    // field?: string;\r\n    mapView?:IMapView;\r\n}\r\n\r\ntype Covid19TrendLayerProps = {\r\n    features: Covid19TrendData[]\r\n} & Props;\r\n\r\nconst Covid19TrendLayer:React.FC<Covid19TrendLayerProps> = ({\r\n    activeTrend,\r\n    features,\r\n    visibleScale,\r\n    size = 20,\r\n    mapView\r\n}) => {\r\n\r\n    const [ trendLayer, setTrendLayer ] = useState<IGraphicsLayer>();\r\n\r\n    const [ isLayerInVisibleScale, setIsLayerInVisibleScale ] = useState<boolean>(false);\r\n\r\n    const init = async()=>{\r\n        type Modules = [\r\n            typeof IGraphicsLayer,\r\n            typeof IwatchUtils\r\n        ];\r\n\r\n        try {\r\n            const [ \r\n                GraphicsLayer,\r\n                watchUtils\r\n            ] = await (loadModules([\r\n                'esri/layers/GraphicsLayer',\r\n                'esri/core/watchUtils'\r\n            ]) as Promise<Modules>);\r\n\r\n            const layer = new GraphicsLayer({\r\n                minScale: visibleScale && visibleScale.min,\r\n                maxScale: visibleScale && visibleScale.max\r\n            });\r\n\r\n            mapView.map.add(layer);\r\n\r\n            setTrendLayer(layer);\r\n\r\n            watchUtils.whenTrue(mapView, 'stationary', ()=>{\r\n                const isInVisibleScale = (mapView.scale < visibleScale.min && mapView.scale > visibleScale.max);\r\n                setIsLayerInVisibleScale(isInVisibleScale);\r\n            })\r\n\r\n        } catch(err){\r\n            console.error(err);\r\n        }\r\n    };\r\n\r\n    const draw = async(features:Covid19TrendData[])=>{\r\n\r\n        type Modules = [\r\n            typeof ICIMSymbol,\r\n            typeof IGraphic,\r\n            typeof IPoint\r\n        ];\r\n\r\n        try {\r\n            const [ \r\n                CIMSymbol,\r\n                Graphic,\r\n                Point\r\n            ] = await (loadModules([\r\n                'esri/symbols/CIMSymbol',\r\n                'esri/Graphic',\r\n                'esri/geometry/Point'\r\n            ]) as Promise<Modules>);\r\n\r\n            const graphics = features.map(feature=>{\r\n                const {\r\n                    geometry,\r\n                    confirmed,\r\n                    deaths,\r\n                    newCases\r\n                } = feature;\r\n\r\n                const pathDataByTrendName: { [key in Covid19TrendName]: PathData } = {\r\n                    'confirmed': confirmed,\r\n                    'death': deaths,\r\n                    'new-cases': newCases\r\n                };\r\n\r\n                const pathData = pathDataByTrendName[activeTrend];\r\n\r\n                const {\r\n                    frame,\r\n                    path\r\n                } = pathData;\r\n\r\n                // Create the CIM symbol:\r\n                //  - set the size value\r\n                //  - assign the generated path to the marker's geometry\r\n                const symbol = new CIMSymbol({\r\n                    data: {\r\n                        type: 'CIMSymbolReference',\r\n                        symbol: {\r\n                            type: \"CIMPointSymbol\",\r\n                            symbolLayers: [\r\n                                {\r\n                                    type: \"CIMVectorMarker\",\r\n                                    enable: true,\r\n                                    scaleSymbolsProportionally: false,\r\n                                    respectFrame: false,\r\n                                    size,\r\n                                    frame,\r\n                                    markerGraphics: [{\r\n                                        type: \"CIMMarkerGraphic\",\r\n                                        geometry: {\r\n                                            paths: [path]\r\n                                        },\r\n                                        symbol: {\r\n                                            type: \"CIMLineSymbol\",\r\n                                            symbolLayers: [{\r\n                                                type: \"CIMSolidStroke\",\r\n                                                width: 1,\r\n                                                color: [161, 13, 34, 255]\r\n                                            }]\r\n                                        }\r\n                                    }]\r\n                                }\r\n                            ]\r\n                        }\r\n                    }\r\n                });\r\n\r\n                const graphic = new Graphic({\r\n                    geometry: new Point({\r\n                        latitude: geometry.y,\r\n                        longitude: geometry.x\r\n                    }),\r\n                    symbol\r\n                })\r\n\r\n                return graphic;\r\n            });\r\n\r\n            trendLayer.addMany(graphics);\r\n\r\n        } catch(err){   \r\n            console.error(err);\r\n        }\r\n    };\r\n\r\n    useEffect(()=>{\r\n        if(mapView){\r\n            init();\r\n        }\r\n    }, [mapView]);\r\n\r\n    useEffect(()=>{\r\n        if(trendLayer && features){\r\n\r\n            trendLayer.removeAll();\r\n            // draw(features);\r\n\r\n            if(isLayerInVisibleScale){\r\n                draw(features);\r\n            }\r\n        }\r\n    }, [ trendLayer, features, activeTrend ]);\r\n\r\n    \r\n    useEffect(()=>{\r\n        if( \r\n            features &&\r\n            isLayerInVisibleScale && \r\n            !trendLayer.graphics.length\r\n        ){\r\n            draw(features);\r\n        }\r\n    }, [ isLayerInVisibleScale ]);\r\n\r\n\r\n    return null;\r\n}\r\n\r\n// const Covid19TrendFeatureLayer:React.FC<Covid19TrendLayerProps> = ({\r\n//     activeTrend,\r\n//     features,\r\n//     visibleScale,\r\n//     size = 20,\r\n//     itemId,\r\n//     field,\r\n//     mapView\r\n// })=>{\r\n\r\n//     const [ trendLayer, setTrendLayer ] = useState<IFeatureLayer>();\r\n\r\n//     const [ isLayerInVisibleScale, setIsLayerInVisibleScale ] = useState<boolean>(false);\r\n\r\n//     const init = async()=>{\r\n//         type Modules = [\r\n//             typeof IFeatureLayer,\r\n//             typeof IwatchUtils\r\n//         ];\r\n\r\n//         try {\r\n//             const [ \r\n//                 FeatureLayer,\r\n//                 watchUtils\r\n//             ] = await (loadModules([\r\n//                 'esri/layers/FeatureLayer',\r\n//                 'esri/core/watchUtils'\r\n//             ]) as Promise<Modules>);\r\n\r\n//             const layer = new FeatureLayer({\r\n//                 portalItem: {\r\n//                     id: itemId\r\n//                 },\r\n//                 minScale: visibleScale && visibleScale.min,\r\n//                 maxScale: visibleScale && visibleScale.max\r\n//             });\r\n\r\n//             mapView.map.add(layer);\r\n\r\n//             setTrendLayer(layer);\r\n\r\n//             // watchUtils.whenTrue(mapView, 'stationary', ()=>{\r\n//             //     const isInVisibleScale = (mapView.scale < visibleScale.min && mapView.scale > visibleScale.max);\r\n//             //     setIsLayerInVisibleScale(isInVisibleScale);\r\n//             // })\r\n\r\n//         } catch(err){\r\n//             console.error(err);\r\n//         }\r\n//     };\r\n\r\n//     const draw = async(features:Covid19TrendData[])=>{\r\n\r\n//         type Modules = [\r\n//             typeof ICIMSymbol,\r\n//             typeof IUniqueValueRenderer,\r\n//         ];\r\n\r\n//         try {\r\n//             const [ \r\n//                 CIMSymbol,\r\n//                 UniqueValueRenderer,\r\n//             ] = await (loadModules([\r\n//                 'esri/symbols/CIMSymbol',\r\n//                 'esri/renderers/UniqueValueRenderer'\r\n//             ]) as Promise<Modules>);\r\n\r\n//             const uniqueValueInfos = features.map(feature=>{\r\n//                 const {\r\n//                     attributes,\r\n//                     confirmed,\r\n//                     deaths,\r\n//                     newCases\r\n//                 } = feature;\r\n\r\n//                 const pathDataByTrendName: { [key in Covid19TrendName]: PathData } = {\r\n//                     'confirmed': confirmed,\r\n//                     'death': deaths,\r\n//                     'new-cases': newCases\r\n//                 };\r\n\r\n//                 const pathData = pathDataByTrendName[activeTrend];\r\n\r\n//                 const {\r\n//                     frame,\r\n//                     path\r\n//                 } = pathData;\r\n\r\n//                 // Create the CIM symbol:\r\n//                 //  - set the size value\r\n//                 //  - assign the generated path to the marker's geometry\r\n//                 const symbol = new CIMSymbol({\r\n//                     data: {\r\n//                         type: 'CIMSymbolReference',\r\n//                         symbol: {\r\n//                             type: \"CIMPointSymbol\",\r\n//                             symbolLayers: [\r\n//                                 {\r\n//                                     type: \"CIMVectorMarker\",\r\n//                                     enable: true,\r\n//                                     scaleSymbolsProportionally: false,\r\n//                                     respectFrame: false,\r\n//                                     size,\r\n//                                     frame,\r\n//                                     markerGraphics: [{\r\n//                                         type: \"CIMMarkerGraphic\",\r\n//                                         geometry: {\r\n//                                             paths: [path]\r\n//                                         },\r\n//                                         symbol: {\r\n//                                             type: \"CIMLineSymbol\",\r\n//                                             symbolLayers: [{\r\n//                                                 type: \"CIMSolidStroke\",\r\n//                                                 width: 1,\r\n//                                                 color: [161, 13, 34, 255]\r\n//                                             }]\r\n//                                         }\r\n//                                     }]\r\n//                                 }\r\n//                             ]\r\n//                         }\r\n//                     }\r\n//                 });\r\n\r\n//                 return {\r\n//                     symbol,\r\n//                     value: attributes[field]\r\n//                 }\r\n//             });\r\n\r\n//             trendLayer.renderer = new UniqueValueRenderer({\r\n//                 field,\r\n//                 uniqueValueInfos\r\n//             });\r\n\r\n//         } catch(err){   \r\n//             console.error(err);\r\n//         }\r\n//     };\r\n\r\n//     useEffect(()=>{\r\n//         if(mapView){\r\n//             init();\r\n//         }\r\n//     }, [mapView]);\r\n\r\n//     useEffect(()=>{\r\n//         if(trendLayer && features){\r\n\r\n//             // trendLayer.removeAll();\r\n//             // draw(features);\r\n\r\n//             draw(features);\r\n\r\n//             // processLargeArrayAsync(features, draw, 200)\r\n//         }\r\n//     }, [ trendLayer, features, activeTrend ]);\r\n\r\n    \r\n//     // useEffect(()=>{\r\n//     //     if( \r\n//     //         features &&\r\n//     //         isLayerInVisibleScale && \r\n//     //         !trendLayer.graphics.length\r\n//     //     ){\r\n//     //         draw(features);\r\n//     //     }\r\n//     // }, [ isLayerInVisibleScale ]);\r\n\r\n//     return null;\r\n// }\r\n\r\nexport default Covid19TrendLayer;\r\n","import React, {\r\n    useEffect,\r\n    useState\r\n} from 'react'\r\n\r\nimport { loadModules } from 'esri-loader';\r\n\r\nimport IMapView from 'esri/views/MapView';\r\nimport IFeatureLayer from 'esri/layers/FeatureLayer';\r\n// import IPoint from 'esri/geometry/Point';\r\nimport IGraphic from 'esri/Graphic';\r\n\r\ntype Props = {\r\n    itemId: string;\r\n    outFields?: string[];\r\n    mapView?:IMapView;\r\n    visibleScale?: {\r\n        min: number;\r\n        max: number;\r\n    }\r\n    onStart: ()=>void;\r\n    onSelect: (feature:IGraphic)=>void;\r\n}\r\n\r\nconst QueryTaskLayer:React.FC<Props> = ({\r\n    itemId,\r\n    outFields,\r\n    mapView,\r\n    visibleScale,\r\n    onStart,\r\n    onSelect\r\n}) => {\r\n\r\n    const [ layer, setLayer ] = useState<IFeatureLayer>();\r\n\r\n    const init = async()=>{\r\n\r\n        type Modules = [\r\n            typeof IFeatureLayer\r\n        ];\r\n\r\n        try {\r\n            const [ \r\n                FeatureLayer,\r\n            ] = await (loadModules([\r\n                'esri/layers/FeatureLayer',\r\n            ]) as Promise<Modules>);\r\n\r\n            const layer = new FeatureLayer({\r\n                portalItem: {\r\n                    id: itemId\r\n                },\r\n                minScale: visibleScale && visibleScale.min,\r\n                maxScale: visibleScale && visibleScale.max\r\n            });\r\n\r\n            setLayer(layer);\r\n\r\n        } catch(err){\r\n            console.error(err);\r\n        }\r\n    };\r\n\r\n    const queryFeatures = async(event:__esri.MapViewClickEvent)=>{\r\n        // console.log(mapView.scale)\r\n\r\n        if( mapView.scale < layer.minScale && \r\n            mapView.scale > layer.maxScale\r\n        ){\r\n            onStart();\r\n\r\n            const results = await layer.queryFeatures({\r\n                where: '1=1',\r\n                geometry: mapView.toMap(event),\r\n                returnGeometry: true,\r\n                outFields: outFields || ['*']\r\n            });\r\n\r\n            onSelect(results.features && results.features.length ? results.features[0] : undefined);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(mapView){\r\n            init();\r\n        }\r\n    }, [mapView]);\r\n\r\n    useEffect(() => {\r\n        if(layer && mapView){\r\n            mapView.on(\"click\", (event)=>{\r\n                queryFeatures(event);\r\n            });\r\n        }\r\n    }, [layer])\r\n\r\n    return null;\r\n}\r\n\r\nexport default QueryTaskLayer\r\n","export default {\r\n    'webmap-id':'1bff921ddf7044c3b5ba34e8494a2073',\r\n    'us-states-feature-layer-item-id': '99fd67933e754a1181cc755146be21ca',\r\n    'us-counties-feature-layer-item-id': '7566e0221e5646f99ea249a197116605',\r\n    'static-files-host': 'https://static.vannizhang.com/covid19/',\r\n    'covid19-data-us-states-json': 'us-states-paths.json',\r\n    'covid19-data-us-counties-json': 'us-counties-paths.json',\r\n    'us-counties-layer-visible-scale': {\r\n        'min': 7500000,\r\n        'max': 0\r\n    },\r\n    'us-states-layer-visible-scale': {\r\n        'min': 73957190,\r\n        'max': 7500001\r\n    }\r\n};\r\n\r\nexport const ThemeStyle = {\r\n    'theme-color-red': '#A10D22',\r\n    'theme-color-khaki': '#E8E2D2',\r\n    'theme-color-khaki-bright': '#EFEADB',\r\n    'floating-panel-box-shadow': '#B1A483',\r\n    'theme-color-khaki-dark': '#B2A584'\r\n};","import React from 'react'\r\nimport { Covid19TrendName } from 'covid19-trend-map';\r\nimport {\r\n    ThemeStyle\r\n} from '../../AppConfig';\r\n\r\ntype Props = {\r\n    isMobile?: boolean;\r\n    activeTrend: Covid19TrendName;\r\n    activeTrendOnChange: (val:Covid19TrendName)=>void;\r\n    infoBtnOnClick: ()=>void;\r\n}\r\n\r\nconst SwitchBtnData: {\r\n    label: string;\r\n    value: Covid19TrendName\r\n}[] = [\r\n    {\r\n        label: 'WEEKLY CASES',\r\n        value: 'new-cases'\r\n    },\r\n    {\r\n        label: 'CASES',\r\n        value: 'confirmed'\r\n    },\r\n    {\r\n        label: 'DEATHS',\r\n        value: 'death'\r\n    }\r\n];\r\n\r\nconst ControlPanel: React.FC<Props> = ({\r\n    isMobile,\r\n    activeTrend,\r\n    activeTrendOnChange,\r\n    infoBtnOnClick\r\n}) => {\r\n    \r\n    const getSwitchBtns = ()=>{\r\n        return SwitchBtnData.map(d=>{\r\n\r\n            const {\r\n                value, label\r\n            } = d;\r\n\r\n            return (\r\n                <div\r\n                    key={value}\r\n                    style={{\r\n                        'width': isMobile ? 'auto' : '120px',\r\n                        'flexGrow': isMobile ? 1 : 0,\r\n                        'height': '100%',\r\n                        'color': ThemeStyle[\"theme-color-red\"],\r\n                        'backgroundColor': activeTrend === value ? ThemeStyle[\"theme-color-khaki-bright\"] : 'transparent',\r\n                        'display': 'flex',\r\n                        'alignItems': 'center',\r\n                        'justifyContent': 'center',\r\n                        'boxSizing':'border-box',\r\n                        'borderBottom': `solid 4px ${ activeTrend === value ? ThemeStyle[\"theme-color-red\"] : 'transparent' }`,\r\n                        'borderRight': `solid 1px #E0D8C1`,\r\n                        'cursor': 'pointer'\r\n                    }}\r\n                    onClick={activeTrendOnChange.bind(this, value)}\r\n                >\r\n                    <span \r\n                        className={`avenir-bold`}\r\n                        style={{\r\n                            'fontSize': '12px'\r\n                        }}\r\n                    >{label}</span>\r\n                </div>\r\n            )\r\n        })\r\n    };\r\n\r\n    const getInfoBtn = ()=>{\r\n\r\n        return (\r\n            <div\r\n                style={{\r\n                    'width': '60px',\r\n                    'height': '100%',\r\n                    'display': 'flex',\r\n                    'alignItems': 'center',\r\n                    'justifyContent': 'center',\r\n                    'cursor': 'pointer'\r\n                }}\r\n                onClick={infoBtnOnClick}\r\n            >\r\n                <svg \r\n                    viewBox=\"0 0 24 24\" \r\n                    height='24' \r\n                    width='24'\r\n                    fill={ThemeStyle[\"theme-color-khaki-dark\"]}\r\n                >\r\n                    <path d=\"M12.5 7.5a1 1 0 1 1 1-1 1.002 1.002 0 0 1-1 1zM13 18V9h-2v1h1v8h-1v1h3v-1zm9.8-5.5A10.3 10.3 0 1 1 12.5 2.2a10.297 10.297 0 0 1 10.3 10.3zm-1 0a9.3 9.3 0 1 0-9.3 9.3 9.31 9.31 0 0 0 9.3-9.3z\"/>\r\n                    <path fill=\"none\" d=\"M0 0h24v24H0z\"/>\r\n                </svg>\r\n            </div>\r\n        )\r\n    }\r\n    \r\n    return (\r\n        <div\r\n            style={{\r\n                'position': 'absolute',\r\n                'top': '10px',\r\n                'right': '10px',\r\n                'left': isMobile ? '10px' : 'unset',\r\n                'maxWidth': '420px',\r\n                'boxShadow': `0 0 10px 2px #B1A483`,\r\n            }}\r\n        >\r\n            <div\r\n                style={{\r\n                    'backgroundColor': ThemeStyle[\"theme-color-red\"],\r\n                    'color': ThemeStyle[\"theme-color-khaki-bright\"],\r\n                    // 'height': isMobile ? 'auto' : '20px',\r\n                    'lineHeight': '20px',\r\n                    'width': '100%',\r\n                    'textAlign': 'center'\r\n                }}\r\n            >\r\n                <span className='avenir-bold' style={{\r\n                    'fontSize': '11px'\r\n                }}>COVID-19 TRENDS PER 100,000 PEOPLE, SINCE FEBRUARY, UPDATED DAILY</span>\r\n            </div>\r\n\r\n            <div\r\n                style={{\r\n                    'display': 'flex',\r\n                    'height': '60px',\r\n                    'width': '100%',\r\n                    'boxSizing':'border-box',\r\n                    \r\n                    'backgroundColor': ThemeStyle[\"theme-color-khaki\"]\r\n                }}\r\n            >\r\n                { getSwitchBtns() }\r\n                { getInfoBtn() }\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default ControlPanel\r\n","import React, {\r\n    useRef,\r\n    useEffect\r\n} from 'react';\r\n\r\nimport { \r\n    select,\r\n    scaleBand,\r\n    scaleLinear\r\n} from 'd3';\r\n\r\nimport useWindowSize from '@rehooks/window-size';\r\n\r\nconst margin = {\r\n    top: 15, \r\n    right: 20, \r\n    bottom: 30, \r\n    left: 40\r\n};\r\n\r\ntype Dimension = {\r\n    height: number;\r\n    width: number;\r\n};\r\n\r\nexport type XScale = d3.ScaleBand<string>;\r\nexport type YScale = d3.ScaleLinear<number, number>;\r\n\r\nexport type Scales = {\r\n    x: XScale;\r\n    y: YScale;\r\n    lastUpdateTime?: Date;\r\n};\r\n\r\nexport type SvgContainerData = {\r\n    svg: SVGElement;\r\n    g: SVGGElement;\r\n    margin: typeof margin;\r\n    dimension?: Dimension\r\n}\r\n\r\ntype Props = {\r\n    // data: Covid19CasesByTimeFeature[];\r\n    xDomain: string[];\r\n    yDomain: number[]\r\n}\r\n\r\nconst SvgContainer:React.FC<Props> = ({\r\n    // data,\r\n    xDomain,\r\n    yDomain,\r\n    children\r\n}) => {\r\n\r\n    const windowSize = useWindowSize();\r\n\r\n    const containerRef = useRef<HTMLDivElement>();\r\n    const dimensionRef = useRef<Dimension>();\r\n\r\n    const [ svgContainerData, setSvgContainerData ] = React.useState<SvgContainerData>();\r\n\r\n    const [ scales, setScales ] =  React.useState<Scales>();\r\n\r\n    const init = ()=>{\r\n\r\n        const container = containerRef.current;\r\n        const width = container.offsetWidth - margin.left - margin.right;\r\n        const height = container.offsetHeight - margin.top - margin.bottom;\r\n\r\n        dimensionRef.current = {\r\n            height,\r\n            width\r\n        };\r\n\r\n        select(container)\r\n            .append(\"svg\")\r\n                .attr(\"width\", '100%')\r\n                .attr(\"height\", height + margin.top + margin.bottom)\r\n            .append(\"g\")\r\n                .attr(\r\n                    \"transform\", \r\n                    `translate(${margin.left}, ${margin.top})`\r\n                );\r\n        \r\n        const svgSelector = select(container)\r\n            .select<SVGElement>('svg');\r\n\r\n        const svg = svgSelector.node();\r\n\r\n        const g = svgSelector\r\n            .select<SVGGElement>('g')\r\n            .node();\r\n\r\n        const xScale = scaleBand<string>()\r\n            .paddingInner(0.2)\r\n            .range([0, width])\r\n            .domain(xDomain)\r\n\r\n        const yScale = scaleLinear()\r\n            .range([height, 0])\r\n            .domain(yDomain).nice();\r\n\r\n        setSvgContainerData({\r\n            svg,\r\n            g,\r\n            margin,\r\n            dimension: dimensionRef.current\r\n        });\r\n\r\n        setScales({\r\n            x: xScale,\r\n            y: yScale\r\n        });\r\n        \r\n    };\r\n\r\n    const scalesOnUpdateEndHandler = ()=>{\r\n        setScales(scales=>{\r\n            return {\r\n                ...scales,\r\n                // change last update time so the children components know scales have changed\r\n                lastUpdateTime: new Date()\r\n            }\r\n        });\r\n    };\r\n\r\n    const resizeHandler = ()=>{\r\n\r\n        const container = containerRef.current;\r\n\r\n        if(!container || !svgContainerData || !scales){\r\n            return;\r\n        }\r\n\r\n        // const { svg } = svgContainerData;\r\n        const { x } = scales;\r\n\r\n        // const newContainerWidth = window.innerWidth - 720;\r\n        const newWidth = container.offsetWidth - margin.left - margin.right;\r\n\r\n        dimensionRef.current.width = newWidth;\r\n\r\n        x.range([0, newWidth ]);\r\n\r\n        scalesOnUpdateEndHandler();\r\n    }\r\n\r\n    useEffect(()=>{\r\n        init();\r\n    }, []);\r\n\r\n    useEffect(()=>{\r\n\r\n        if( scales && yDomain ){\r\n            scales.y.domain(yDomain).nice();\r\n            scalesOnUpdateEndHandler();\r\n        }\r\n\r\n    }, [ yDomain ]);\r\n\r\n    React.useEffect(()=>{\r\n        resizeHandler();\r\n    }, [ windowSize ]);\r\n\r\n    return (\r\n        <>\r\n            <div \r\n                ref={containerRef}\r\n                style={{\r\n                    'position': 'relative',\r\n                    'width': '100%',\r\n                    'height': '100%'\r\n                }}\r\n            ></div>\r\n            {   \r\n                React.Children.map(children, (child)=>{\r\n                    return React.cloneElement(child as React.ReactElement<any>, {\r\n                        svgContainerData,\r\n                        scales\r\n                    });\r\n                })  \r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default SvgContainer\r\n","// import './Axis.scss';\r\nimport React from 'react';\r\nimport { numberFns } from 'helper-toolkit-ts'\r\n\r\nimport { \r\n    select,\r\n    axisBottom,\r\n    axisLeft,\r\n    scaleTime,\r\n    timeFormat\r\n} from 'd3';\r\n\r\nimport {\r\n    Scales,\r\n    SvgContainerData\r\n} from './SvgContainer';\r\n\r\ninterface Props {\r\n    svgContainerData?: SvgContainerData;\r\n    scales?: Scales;\r\n};\r\n\r\nconst formatTime = timeFormat(\"%b\");\r\n\r\nconst Axis:React.FC<Props> = ({\r\n    svgContainerData,\r\n    scales\r\n})=>{\r\n\r\n    const drawXAxis = ()=>{\r\n\r\n        const { dimension, g } = svgContainerData;\r\n\r\n        const { height, width } = dimension;\r\n\r\n        const mainGroup = select(g);\r\n\r\n        const { x } = scales;\r\n\r\n        const domain = x.domain();\r\n        const startDateParts = domain[0].split('-').map(d=>+d);\r\n        const startDate = new Date(startDateParts[0], startDateParts[1] - 1, startDateParts[2]);\r\n\r\n        const endDateParts = domain[domain.length - 1].split('-').map(d=>+d);\r\n        const endDate = new Date(endDateParts[0], endDateParts[1] - 1, endDateParts[2]);\r\n        \r\n        const xScale = scaleTime()\r\n            .range([0, width])\r\n            .domain([startDate, endDate])\r\n\r\n        const xAxis = axisBottom(xScale)\r\n            // .ticks(timeMonth)\r\n            .tickFormat((date:Date)=>{\r\n                return formatTime(date);\r\n            })\r\n            // .tickValues(d=>{})\r\n            // .tickSizeInner(-(height))\r\n            // .tickPadding(9)\r\n\r\n        const xAxisLabel = mainGroup.selectAll('.x.axis');\r\n\r\n        if (!xAxisLabel.size()) {\r\n            mainGroup\r\n                .append('g')\r\n                .attr('class', 'x axis')\r\n                .attr('transform', 'translate(0,' + height  + ')')\r\n                .call(xAxis);\r\n        } else {\r\n            xAxisLabel\r\n                .attr('transform', 'translate(0,' + height + ')')\r\n                .call(xAxis);\r\n        }\r\n\r\n    };\r\n\r\n    const drawYAxis = ()=>{\r\n\r\n        const { g, dimension } = svgContainerData;\r\n\r\n        const { width } = dimension;\r\n\r\n        const { y } = scales;\r\n\r\n        const mainGroup = select(g);\r\n\r\n        const yAxis = axisLeft(y)\r\n            .ticks(3)\r\n            .tickSizeInner(-(width))\r\n            .tickPadding(5)\r\n            .tickFormat(num=>{\r\n                return numberFns.abbreviateNumber(+num, 0)\r\n            })\r\n\r\n        const yAxisLabel = mainGroup.selectAll('.y.axis');\r\n\r\n        if (!yAxisLabel.size()) {\r\n            mainGroup\r\n                .append('g')\r\n                .attr('class', 'y axis')\r\n                .call(yAxis);\r\n        } else {\r\n            yAxisLabel.call(yAxis);\r\n        }\r\n    };\r\n\r\n    React.useEffect(()=>{\r\n\r\n        if( svgContainerData && scales ){\r\n            drawXAxis();\r\n            drawYAxis();\r\n        }\r\n\r\n    }, [ svgContainerData, scales ]);\r\n\r\n    return null;\r\n};\r\n\r\nexport default Axis;","import React from 'react';\r\nimport { select } from 'd3';\r\nimport { generate } from 'shortid';\r\n\r\nimport {\r\n    Scales,\r\n    SvgContainerData\r\n} from './SvgContainer';\r\n\r\nimport {\r\n    ChartDataItem\r\n} from './ChartPanel';\r\n\r\nconst BarRectGroupClassName = `bar-rect-group-${generate()}`;\r\nconst BarRectClassName = `bar-rect-${generate()}`;\r\n\r\ntype Props = {\r\n    svgContainerData?: SvgContainerData;\r\n    scales?: Scales;\r\n};\r\n\r\ntype BarProps = {\r\n    data: ChartDataItem[],\r\n    fillColor: string;\r\n} & Props;\r\n\r\nconst Bar:React.FC<BarProps> = ({\r\n    data,\r\n    fillColor,\r\n    svgContainerData,\r\n    scales\r\n})=>{\r\n\r\n    const containerG = React.useRef<SVGGElement>();\r\n\r\n    const initContainer = ()=>{\r\n        const { g } = svgContainerData;\r\n\r\n        containerG.current = select(g)\r\n            .append('g')\r\n            .node();\r\n    };\r\n\r\n    const draw = ()=>{\r\n\r\n        const { dimension } = svgContainerData;\r\n\r\n        const { height } = dimension;\r\n\r\n        const { x, y } = scales;\r\n\r\n        remove();\r\n\r\n        select(containerG.current)\r\n            .append('g')\r\n            .attr('class', BarRectGroupClassName)\r\n            // .attr(\"clip-path\", `url(#${clipPathId})`)\r\n            .selectAll(`.${BarRectClassName}`)\r\n                .data(data)\r\n            .enter().append(\"rect\")\r\n                .attr(\"class\", BarRectClassName)\r\n                .style('fill', fillColor)\r\n                .attr(\"x\", d=>x(d.x))\r\n                .attr(\"width\", x.bandwidth() )\r\n                .attr(\"y\", d=>y(d.y))\r\n                .attr(\"height\", (d)=>{\r\n                    return height - y(d.y)\r\n                })\r\n                \r\n    };\r\n\r\n    const remove = ()=>{\r\n\r\n        const existingBars = select(containerG.current)\r\n            .selectAll(`.${BarRectGroupClassName}`);\r\n\r\n        if (existingBars.size()) {\r\n            existingBars.remove()\r\n        }\r\n    };\r\n\r\n    React.useEffect(()=>{\r\n        if( svgContainerData){\r\n            initContainer();\r\n        }\r\n    }, [ svgContainerData ]);\r\n\r\n    React.useEffect(()=>{\r\n        if( svgContainerData && scales && data ){\r\n            draw();\r\n        }\r\n    }, [ scales, data ]);\r\n\r\n    return null;\r\n};\r\n\r\nexport default Bar;","import React from 'react';\r\nimport { generate } from 'shortid';\r\nimport { \r\n    select,\r\n    line,\r\n    curveMonotoneX\r\n} from 'd3';\r\n\r\nimport {\r\n    Scales,\r\n    SvgContainerData,\r\n} from './SvgContainer';\r\n\r\nimport {\r\n    ChartDataItem\r\n} from './ChartPanel';\r\n\r\ntype Props = {\r\n    svgContainerData?: SvgContainerData;\r\n    scales?: Scales;\r\n};\r\n\r\ntype LineProps = {\r\n    data: ChartDataItem[];\r\n    strokeColor: string;\r\n} & Props;\r\n\r\nconst LinePathClassName = `line-${generate()}`;\r\n\r\nconst Line:React.FC<LineProps> = ({\r\n    data,\r\n    strokeColor,\r\n    svgContainerData,\r\n    scales\r\n})=>{\r\n\r\n    const containerG = React.useRef<SVGGElement>();\r\n\r\n    const initContainer = ()=>{\r\n        const { g } = svgContainerData;\r\n\r\n        containerG.current = select(g)\r\n            .append('g')\r\n            .node();\r\n    };\r\n\r\n    const draw = ()=>{\r\n\r\n        const containerGroup = select(containerG.current);\r\n\r\n        const { x, y } = scales;\r\n\r\n        const xOffset = x.bandwidth() / 2;\r\n\r\n        const valueline = line<ChartDataItem>()\r\n            // .curve(curveMonotoneX)\r\n            .x(d=>x(d.x) + xOffset)\r\n            .y(d=>y(d.y));\r\n\r\n        remove();\r\n\r\n        containerGroup.append(\"path\")\r\n            .data([data])\r\n            .attr(\"class\", LinePathClassName)\r\n            .attr(\"d\", valueline)\r\n            .style('fill', 'none')\r\n            .style('stroke', strokeColor)\r\n            .style('stroke-width', 2);\r\n    };\r\n\r\n    const remove = ()=>{\r\n\r\n        const lines = select(containerG.current).selectAll(`.${LinePathClassName}`);\r\n        \r\n        // check the number of existing lines, if greater than 0; remove all existing ones\r\n        if(lines.size()){\r\n            lines.remove().exit();\r\n        }\r\n    };\r\n\r\n    React.useEffect(()=>{\r\n        if( svgContainerData){\r\n            initContainer();\r\n        }\r\n    }, [ svgContainerData ]);\r\n\r\n    React.useEffect(()=>{\r\n        if( svgContainerData && scales && data ){\r\n            draw();\r\n        }\r\n    }, [ scales, data ]);\r\n\r\n    return null;\r\n};\r\n\r\nexport default Line;","import React, {\r\n    useEffect\r\n} from 'react';\r\n\r\nimport { \r\n    select,\r\n    mouse\r\n} from 'd3';\r\n\r\nimport {\r\n    Scales,\r\n    SvgContainerData\r\n} from './SvgContainer';\r\n\r\nimport {\r\n    Covid19CasesByTimeFeature\r\n} from 'covid19-trend-map';\r\n\r\ninterface Props {\r\n    data: Covid19CasesByTimeFeature[]\r\n    svgContainerData?: SvgContainerData;\r\n    scales?: Scales;\r\n\r\n    onHover?: (item:Covid19CasesByTimeFeature)=>void;\r\n};\r\n\r\nconst VerticalRefLineClassName = 'vertical-ref-line'\r\n\r\nconst MouseEventsRect:React.FC<Props> = ({\r\n    data,\r\n    svgContainerData,\r\n    scales,\r\n\r\n    onHover\r\n}) => {\r\n\r\n    const containerG = React.useRef<SVGGElement>();\r\n\r\n    const itemOnHover = React.useRef<Covid19CasesByTimeFeature>();\r\n\r\n    const init = ()=>{\r\n\r\n        const { g, dimension } = svgContainerData;\r\n\r\n        const { height, width } = dimension;\r\n\r\n        containerG.current = select(g)\r\n            .append('g')\r\n            .node();\r\n        \r\n        const container = select(containerG.current);\r\n\r\n        container.append('line')\r\n            .attr('class', VerticalRefLineClassName)\r\n            .attr('x1', 0)\r\n            .attr('y1', 0)\r\n            .attr('x2', 0)\r\n            .attr('y2', height)\r\n            .style(\"opacity\", 0)\r\n            .attr('stroke-width', 0.5)\r\n            .attr(\"stroke\", \"rgba(255,255,255,.75)\")\r\n            .style(\"fill\", \"none\");\r\n\r\n        container.append(\"rect\")\r\n            // .attr(\"class\", ClassNames.BackgroundRect)\r\n            .attr(\"width\", width)\r\n            .attr(\"height\", height)\r\n            .attr('fill', 'rgba(0,0,0,0)')\r\n            .on(\"mouseleave\", ()=>{\r\n                setItemOnHover(null);\r\n            })\r\n            .on(\"mousemove\", function(){\r\n                const mousePosX = mouse(this)[0];\r\n                setItemOnHover(getItemByMousePos(mousePosX));\r\n            });\r\n    };\r\n\r\n    const setItemOnHover = (item?:Covid19CasesByTimeFeature)=>{\r\n        itemOnHover.current = item;\r\n        updateVerticalRefLinePos();\r\n        onHover(item);\r\n    };\r\n\r\n    const updateVerticalRefLinePos = ():void=>{\r\n\r\n        const { x } = scales;\r\n\r\n        const item = itemOnHover.current;\r\n\r\n        const vRefLine = select(containerG.current)\r\n            .select(`.${VerticalRefLineClassName}`);\r\n\r\n        const xPos = item ? \r\n            x(item.attributes.dt) +  x.bandwidth() / 2\r\n            : 0;\r\n\r\n        const opacity = item ? 1 : 0;\r\n\r\n        vRefLine\r\n            .attr('x1', xPos)\r\n            .attr('x2', xPos)\r\n            .style('opacity', opacity);\r\n    };\r\n\r\n    const getItemByMousePos = (mousePosX:number):Covid19CasesByTimeFeature=>{\r\n\r\n        let itemIndex = -1;\r\n        const { x } = scales;\r\n\r\n        for(let i = 0, len = data.length; i < len; i++){\r\n\r\n            const currItem = data[i];\r\n            const currItemPos = x(currItem.attributes.dt);\r\n\r\n            const nextItemIndex = data[i + 1] ? i + 1 : i;\r\n            const nextItem = data[nextItemIndex];\r\n            const nextItemPos = x(nextItem.attributes.dt);\r\n\r\n            if(mousePosX >= currItemPos && mousePosX <= nextItemPos){\r\n\r\n                const distToCurrItem = Math.abs(mousePosX - currItemPos);\r\n                const distToNextItem = Math.abs(mousePosX - nextItemPos);\r\n\r\n                itemIndex = distToCurrItem < distToNextItem ? i : nextItemIndex;\r\n\r\n                break;\r\n            }\r\n        }\r\n\r\n        return data[itemIndex];\r\n    };\r\n\r\n    useEffect(()=>{\r\n\r\n        if( svgContainerData && data.length ){\r\n            init();\r\n        }\r\n\r\n    }, [ svgContainerData, data ]);\r\n\r\n    useEffect(()=>{\r\n\r\n        if( svgContainerData && scales ){\r\n\r\n            const { dimension } = svgContainerData;\r\n            const { width } = dimension;\r\n\r\n            select(containerG.current)\r\n                .select('rect')\r\n                .attr('width', width);\r\n        }\r\n\r\n    }, [ scales ]);\r\n\r\n    return null;\r\n}\r\n\r\nexport default MouseEventsRect\r\n","import React, {\r\n    useEffect\r\n} from 'react';\r\n\r\nimport {\r\n    Scales,\r\n    SvgContainerData\r\n} from './SvgContainer';\r\n\r\nimport {\r\n    Covid19CasesByTimeFeature\r\n} from 'covid19-trend-map';\r\n\r\nimport { numberFns } from 'helper-toolkit-ts';\r\nimport { ThemeStyle } from '../../AppConfig';\r\n\r\ntype TooltipPos = {\r\n    top: number;\r\n    left: number;\r\n};\r\n\r\ntype Props = {\r\n    svgContainerData?: SvgContainerData;\r\n    scales?: Scales;\r\n    data: Covid19CasesByTimeFeature;\r\n};\r\n\r\nconst Tooltip:React.FC<Props> = ({\r\n    svgContainerData,\r\n    scales,\r\n    data\r\n}) => {\r\n\r\n    const tooltipRef = React.useRef<HTMLDivElement>();\r\n\r\n    const [ tooltipPos, setTooltipPos ] = React.useState<TooltipPos>({ top: 0, left: 0});\r\n\r\n    const updateTooltipPosition = ()=>{\r\n\r\n        const tooltipDiv = tooltipRef.current;\r\n\r\n        if(!tooltipDiv){\r\n            return;\r\n        };\r\n\r\n        const { dimension, margin } = svgContainerData;\r\n\r\n        const { width } = dimension;\r\n\r\n        const { x, y } = scales;\r\n\r\n        const tooltipDivWidth = tooltipDiv.offsetWidth;\r\n        const tooltipDivHeight = tooltipDiv.offsetHeight;\r\n\r\n        const top = -((tooltipDivHeight / 2 ) - margin.top);\r\n        const xPosForItemOnHover = x(data.attributes.dt) + margin.left;\r\n\r\n        let left = ( xPosForItemOnHover + (tooltipDivWidth / 2) ) >= (width + margin.left) \r\n            ? (xPosForItemOnHover - tooltipDivWidth) \r\n            : (xPosForItemOnHover - tooltipDivWidth / 2) ;\r\n\r\n        left = left >= margin.left ? left : margin.left;\r\n\r\n        setTooltipPos({\r\n            top,\r\n            left\r\n        });\r\n    };\r\n\r\n    const getTooltip = ():JSX.Element=>{\r\n\r\n        const { top, left } = tooltipPos;\r\n\r\n        const { attributes } = data;\r\n\r\n        const {\r\n            dt,\r\n            Confirmed,\r\n            Deaths,\r\n            NewCases,\r\n            Population\r\n        } = attributes;\r\n\r\n        const newCases = numberFns.numberWithCommas(NewCases);\r\n        const confirmed = numberFns.numberWithCommas(Confirmed);\r\n        const deaths = numberFns.numberWithCommas(Deaths);\r\n\r\n        return (\r\n            <div\r\n                ref={tooltipRef}\r\n                style={{\r\n                    'position': 'absolute',\r\n                    'left': `${left}px`,\r\n                    'top': `${top}px`,\r\n                    'padding': '7px 10px',\r\n                    'background': ThemeStyle[\"theme-color-khaki-bright\"],\r\n                    'color': '#fff',\r\n                    // 'width': '300px',\r\n                    'pointerEvents': 'none',\r\n                    'boxSizing': 'border-box',\r\n                    'boxShadow': `0 0 10px 2px ${ThemeStyle[\"floating-panel-box-shadow\"]}`\r\n                }}\r\n            >\r\n                <div className='font-size--3 avenir-demi'>\r\n                    <span className='text-theme-color-khaki'>{dt}</span>\r\n                </div>\r\n\r\n                <div className='font-size--2 avenir-bold'>\r\n\r\n                    <div>\r\n                        <span className='text-theme-color-khaki'>new cases: <span className='text-theme-color-red'>{newCases}</span></span>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <span className='text-theme-color-khaki'>cumulative cases: <span className='text-theme-color-red'>{confirmed}</span></span>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <span className='text-theme-color-khaki'>cumulative deaths: <span className='text-theme-color-red'>{deaths}</span></span>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n    useEffect(()=>{\r\n        updateTooltipPosition();\r\n    }, [ data ])\r\n\r\n    return data \r\n        ? getTooltip() \r\n        : null;\r\n}\r\n\r\nexport default Tooltip\r\n","import React, {\r\n    useState\r\n} from 'react'\r\n\r\nimport {\r\n    Covid19TrendName,\r\n    Covid19CasesByTimeFeature\r\n} from 'covid19-trend-map';\r\n\r\nimport SvgContainer from './SvgContainer';\r\nimport Axis from './Axis';\r\nimport Bar from './Bars';\r\nimport Line from './Line';\r\nimport MouseEventsRect from './MouseEventsRect';\r\nimport Tooltip from './Tooltip';\r\n\r\nimport {\r\n    max\r\n} from 'd3';\r\n\r\nimport { ThemeStyle } from '../../AppConfig';\r\n\r\ntype Props = {\r\n    activeTrend: Covid19TrendName;\r\n    data: Covid19CasesByTimeFeature[]\r\n}\r\n\r\nexport type ChartDataItem = {\r\n    x: string;\r\n    y: number;\r\n}\r\n\r\n// field names for Covid19CasesByTime Features\r\nexport const FieldNameByActiveTrend:{ [ key in Covid19TrendName]: string } = {\r\n    'new-cases': 'NewCases',\r\n    'death': 'Deaths',\r\n    'confirmed': 'Confirmed'\r\n}\r\n\r\nconst ChartPanel:React.FC<Props> = ({\r\n    activeTrend,\r\n    data\r\n}) => {\r\n\r\n    const fieldName = FieldNameByActiveTrend[activeTrend];\r\n\r\n    // if true, convert numbers from Covid19CasesByTimeFeature into number per 100K people\r\n    const [ showNormalizedValues, setShowNormalizedValues ] = useState<boolean>(false);\r\n\r\n    const [ itemOnHover, setItemOnHover ] = useState<Covid19CasesByTimeFeature>();\r\n\r\n    const getXDomain = ()=>{\r\n        const xDomain = data.map(d=>d.attributes.dt);\r\n        return xDomain\r\n    };\r\n\r\n    const getYDomain = ()=>{\r\n        const values = data.map(d=>{\r\n            return showNormalizedValues \r\n                ? Math.round(d.attributes[fieldName] / d.attributes.Population * 100000 )\r\n                : d.attributes[fieldName] \r\n        });\r\n        const yMax = max(values) || 1;\r\n        const yDomain = [ 0, yMax ];\r\n        return yDomain;\r\n    }\r\n\r\n    const getDataForBars = ():ChartDataItem[] =>{\r\n        if(!data || !data.length){\r\n            return [];\r\n        }\r\n\r\n        return data.map(d=>{\r\n\r\n            const y = showNormalizedValues\r\n                ? Math.round(d.attributes[fieldName] / d.attributes.Population * 100000)\r\n                : d.attributes[fieldName] \r\n\r\n            return {\r\n                x: d.attributes.dt, \r\n                y\r\n            }\r\n        });\r\n    };\r\n\r\n    const getDataForLine = ():ChartDataItem[] =>{\r\n        \r\n        if(!data || !data.length || activeTrend !== 'new-cases'){\r\n            return [];\r\n        }\r\n\r\n        const values:ChartDataItem[]  = [];\r\n\r\n        for(let i = data.length - 1; i > 0; i--){\r\n\r\n            const feature = data[i];\r\n            \r\n            const x = feature.attributes.dt;\r\n\r\n            let sum = 0;\r\n            const startIndex = i - 6 >= 0 ? i - 6 : 0;\r\n            const endIndex = i + 1;\r\n\r\n            const featuresInPastWeek = data\r\n                .slice(startIndex, endIndex);\r\n\r\n            featuresInPastWeek.forEach(d=>sum += d.attributes[fieldName]);\r\n\r\n            let y = (sum / featuresInPastWeek.length);\r\n\r\n            if(showNormalizedValues){\r\n                y = ( y / feature.attributes.Population * 100000)\r\n            }\r\n\r\n            y = Math.round(y);\r\n\r\n            y = y < 0 ? 0 : y;\r\n\r\n            values.push({\r\n                x,\r\n                y\r\n            })\r\n        }\r\n\r\n        return values;\r\n    }\r\n\r\n    const getContent = ()=>{\r\n\r\n        if(!data || !data.length){\r\n            return null;\r\n        }\r\n\r\n        return (\r\n            <SvgContainer\r\n                xDomain={getXDomain()}\r\n                yDomain={getYDomain()}\r\n            >\r\n\r\n                <Axis />\r\n\r\n                <Bar \r\n                    fillColor={ThemeStyle[\"theme-color-khaki-dark\"]}\r\n                    data={getDataForBars()}\r\n                />\r\n\r\n                <Line \r\n                    strokeColor={ThemeStyle[\"theme-color-red\"]}\r\n                    data={getDataForLine()}\r\n                />\r\n\r\n                <Tooltip \r\n                    data={itemOnHover}\r\n                />\r\n\r\n                <MouseEventsRect \r\n                    data={data}\r\n                    onHover={setItemOnHover}\r\n                />\r\n\r\n            </SvgContainer>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                'width': '100%',\r\n                'height': '170px',\r\n                'backgroundColor': ThemeStyle[\"theme-color-khaki-bright\"]\r\n            }}\r\n        >\r\n\r\n            { getContent() }\r\n        </div>\r\n    \r\n    )\r\n}\r\n\r\nexport default ChartPanel;","import React from 'react'\r\nimport { ThemeStyle } from '../../AppConfig'\r\n\r\ntype Props = {\r\n    showLoadingIndicator: boolean;\r\n}\r\n\r\nconst BottomPanel:React.FC<Props> = ({\r\n    showLoadingIndicator,\r\n    children\r\n}) => {\r\n\r\n    const getLoadingIndicator = ()=>{\r\n\r\n        return (\r\n            <div\r\n                style={{\r\n                    'position': 'relative',\r\n                    'display': 'flex',\r\n                    'justifyContent': 'center',\r\n                    'alignItems': 'center',\r\n                    'width': '100%',\r\n                    'height': '225px'\r\n                }}\r\n            >\r\n                <div className=\"loader is-active\">\r\n                    <div className=\"loader-bars\"></div>\r\n                    {/* <div className=\"loader-text\">Loading...</div> */}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                'position': 'absolute',\r\n                'left': '15px',\r\n                'right': '15px',\r\n                'bottom': '25px',\r\n                'boxSizing': 'border-box',\r\n                'boxShadow': `0 0 10px 2px ${ThemeStyle[\"floating-panel-box-shadow\"]}`,\r\n                'backgroundColor': ThemeStyle[\"theme-color-khaki-bright\"]\r\n            }}\r\n        >\r\n            { \r\n                showLoadingIndicator \r\n                    ? getLoadingIndicator() \r\n                    : children \r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BottomPanel\r\n","import React from 'react'\r\nimport AppConfig, { ThemeStyle } from '../../AppConfig'\r\nimport { Covid19CasesByTimeFeature } from 'covid19-trend-map';\r\nimport { numberFns } from 'helper-toolkit-ts';\r\nimport { parse, getISODay, format } from 'date-fns';\r\n\r\ntype Props = {\r\n    locationName?: string;\r\n    data: Covid19CasesByTimeFeature[];\r\n    isMobile?: boolean;\r\n    closeBtnOnClick: ()=>void;\r\n};\r\n\r\nconst SummaryInfoPanel:React.FC<Props> = ({\r\n    locationName,\r\n    data,\r\n    isMobile = false,\r\n    closeBtnOnClick\r\n}) => {\r\n\r\n    const getBiggestWeeklyIncrease = ()=>{\r\n\r\n        let featureWithBiggestWeeklyIncrease = data[0];\r\n        let biggestWeeklyIncrease = Number.NEGATIVE_INFINITY;\r\n\r\n        const dateForFirstFeature = parse(data[0].attributes.dt, 'yyyy-MM-dd', new Date())\r\n\r\n        let dayForFirstFeature = getISODay(dateForFirstFeature);\r\n\r\n        for( let i = 0, len= data.length; i < len; i++){\r\n\r\n            let dayOfWeek = ( i % 7 ) + dayForFirstFeature;\r\n\r\n            dayOfWeek = dayOfWeek > 7 ? dayOfWeek - 7 : dayOfWeek;\r\n\r\n            if(dayOfWeek === 1){\r\n                const { Confirmed } = data[i].attributes;\r\n\r\n                const feature7DaysAgo = i - 6 >= 0 \r\n                    ? data[i-6] \r\n                    : data[0];\r\n                \r\n                const weeklyIncrease = Confirmed - feature7DaysAgo.attributes.Confirmed;\r\n\r\n                if(weeklyIncrease > biggestWeeklyIncrease){\r\n                    biggestWeeklyIncrease = weeklyIncrease;\r\n                    featureWithBiggestWeeklyIncrease = data[i];\r\n                }\r\n            }\r\n        }\r\n\r\n        const dateWithBiggestWeeklyIncrease = parse(featureWithBiggestWeeklyIncrease.attributes.dt, 'yyyy-MM-dd', new Date())\r\n\r\n        return format(dateWithBiggestWeeklyIncrease, 'MMMM dd, yyyy');\r\n    };\r\n\r\n    const getSummaryInfo = ()=>{\r\n\r\n        if(!data || !data.length){\r\n            return null\r\n        }\r\n\r\n        const feature7DaysAgo = data[data.length - 7]\r\n        const latestFeature = data[data.length - 1];\r\n\r\n        const cumulativeCases = numberFns.numberWithCommas(latestFeature.attributes.Confirmed);\r\n        const cumulativeDeaths = numberFns.numberWithCommas(latestFeature.attributes.Deaths);\r\n\r\n        const newCasesThisWeek = numberFns.numberWithCommas(latestFeature.attributes.Confirmed - feature7DaysAgo.attributes.Confirmed);\r\n        const deathsThisWeek = numberFns.numberWithCommas(latestFeature.attributes.Deaths - feature7DaysAgo.attributes.Deaths);\r\n\r\n        const population = numberFns.numberWithCommas(latestFeature.attributes.Population);\r\n\r\n        const blockStyle:React.CSSProperties ={\r\n            'padding': isMobile ? '0' : '0 .65rem',\r\n            'borderRight': isMobile ? 'none' : `solid 1px rgba(178, 165, 132, .5)`,\r\n            'display': isMobile ? 'block' : 'flex',\r\n            'alignItems': 'center'\r\n        }\r\n\r\n        return (\r\n            <div\r\n                className='font-size--2 avenir-bold text-theme-color-khaki'\r\n                style={{\r\n                    'display': isMobile ? 'block' : 'flex',\r\n                    'alignItems': 'strech',\r\n                    'padding': `0 ${isMobile ? '0' : '1rem' }`\r\n                }}\r\n            >\r\n                <div style={{\r\n                    ...blockStyle,\r\n                    'display': 'block'\r\n                }}>\r\n                    <span>\r\n                        <span className='text-theme-color-red'>Biggest Weekly Jump</span> { isMobile ? null : <br/>} { getBiggestWeeklyIncrease() }\r\n                    </span>\r\n                </div>\r\n\r\n                <div style={blockStyle}>\r\n                    <span><span className='text-theme-color-red'>Population</span> { population }</span>\r\n                </div>\r\n\r\n                <div style={blockStyle}>\r\n                    <span>\r\n                        <span className='text-theme-color-red'>{newCasesThisWeek}</span> new cases and <span className='text-theme-color-red'>{deathsThisWeek}</span> deaths this week\r\n                    </span>\r\n                </div>\r\n\r\n                <div style={{\r\n                    ...blockStyle,\r\n                    'borderRight': 'none'\r\n                }}>\r\n                    <span>\r\n                        <span className='text-theme-color-red'>{cumulativeCases}</span> cumulative cases and <span className='text-theme-color-red'>{cumulativeDeaths}</span> deaths\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        )\r\n\r\n    }\r\n\r\n    const getCloseBtnStyleForMobileDevice = ():React.CSSProperties=>{\r\n\r\n        if(!isMobile){\r\n            return null;\r\n        }\r\n\r\n        return {\r\n            'position': 'absolute',\r\n            'top': '.5rem',\r\n            'right': '.5rem'\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                'position': 'relative',\r\n                'width': '100%',\r\n                'padding': '.4rem 1.35rem',\r\n                'display': isMobile ? 'block' : 'flex',\r\n                'alignItems': 'center',\r\n                'boxSizing': 'border-box',\r\n                'backgroundColor': ThemeStyle[\"theme-color-khaki\"],\r\n            }}\r\n        >\r\n            <div\r\n                style={{\r\n                    'color': ThemeStyle[\"theme-color-red\"],\r\n                    'textTransform': 'uppercase',\r\n                    'maxWidth': isMobile ? '320px' : 'auto'\r\n                }}\r\n            >\r\n                <span className='avenir-bold font-size-2'>{locationName}</span>\r\n            </div>\r\n\r\n            <div\r\n                style={{\r\n                    'flexGrow': 1\r\n                }}\r\n            >\r\n                { getSummaryInfo() }\r\n            </div>\r\n\r\n            <div\r\n                style={{\r\n                    'cursor': 'pointer',\r\n                    ...getCloseBtnStyleForMobileDevice()\r\n                }}\r\n                onClick={closeBtnOnClick}\r\n            >\r\n                <svg \r\n                    viewBox=\"0 0 32 32\" \r\n                    height=\"32\" \r\n                    width=\"32\"\r\n                    fill={ThemeStyle[\"theme-color-khaki-dark\"]}\r\n                >\r\n                    <path d=\"M23.985 8.722L16.707 16l7.278 7.278-.707.707L16 16.707l-7.278 7.278-.707-.707L15.293 16 8.015 8.722l.707-.707L16 15.293l7.278-7.278z\"/>\r\n                    <path fill=\"none\" d=\"M0 0h32v32H0z\"/>\r\n                </svg>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SummaryInfoPanel\r\n","import React, {\r\n    useState,\r\n    useEffect\r\n} from 'react';\r\n\r\nimport { loadModules } from 'esri-loader';\r\nimport IMapView from 'esri/views/MapView';\r\nimport IGraphic from 'esri/Graphic';\r\nimport IGraphicsLayer from 'esri/layers/GraphicsLayer';\r\nimport ISimpleFillSymbol from 'esri/symbols/SimpleFillSymbol';\r\nimport { ThemeStyle } from '../../AppConfig';\r\n\r\ntype Props = {\r\n    queryResult: IGraphic\r\n    mapView?:IMapView;\r\n}\r\n\r\n\r\nconst QueryTaskResultLayer:React.FC<Props> = ({\r\n    queryResult,\r\n    mapView\r\n}) => {\r\n\r\n    const [ graphicLayer, setGraphicLayer ] = useState<IGraphicsLayer>();\r\n\r\n    const init = async()=>{\r\n        type Modules = [\r\n            typeof IGraphicsLayer,\r\n        ];\r\n\r\n        try {\r\n            const [ \r\n                GraphicsLayer\r\n            ] = await (loadModules([\r\n                'esri/layers/GraphicsLayer'\r\n            ]) as Promise<Modules>);\r\n\r\n            const layer = new GraphicsLayer();\r\n\r\n            mapView.map.add(layer);\r\n\r\n            setGraphicLayer(layer);\r\n\r\n        } catch(err){\r\n            console.error(err);\r\n        }\r\n    };\r\n\r\n    const showQueryResult = async()=>{\r\n\r\n        type Modules = [\r\n            typeof ISimpleFillSymbol,\r\n        ];\r\n\r\n        const [ \r\n            SimpleFillSymbol\r\n        ] = await (loadModules([\r\n            'esri/symbols/SimpleFillSymbol'\r\n        ]) as Promise<Modules>);\r\n\r\n        queryResult.symbol = new SimpleFillSymbol({\r\n            color: [0,0,0,0],\r\n            outline: {  // autocasts as new SimpleLineSymbol()\r\n                color: 'rgba(178,165,132,.7)',\r\n                width: 1\r\n            } \r\n        });\r\n\r\n        graphicLayer.add(queryResult)\r\n    }\r\n\r\n    useEffect(()=>{\r\n        if(mapView){\r\n            init();\r\n        }\r\n    }, [mapView]);\r\n\r\n    useEffect(()=>{\r\n        if(graphicLayer){\r\n\r\n            graphicLayer.removeAll();\r\n\r\n            if(queryResult){\r\n                showQueryResult();\r\n            }\r\n            \r\n        }\r\n    }, [queryResult]);\r\n\r\n    return null;\r\n}\r\n\r\nexport default QueryTaskResultLayer\r\n","import './About.scss';\r\nimport React, {\r\n    useEffect\r\n} from 'react';\r\nimport { modal, bus } from 'calcite-web/dist/js/calcite-web.min.js';\r\n\r\ntype Props = {\r\n    isOpen?: boolean;\r\n    closeBtnOnClicked: ()=>void;\r\n}\r\n\r\nconst ModalID = 'about';\r\n\r\nconst About:React.FC<Props> = ({\r\n    isOpen,\r\n    closeBtnOnClicked\r\n}) => {\r\n\r\n    useEffect(()=>{\r\n        modal();\r\n        // bus.emit('modal:open', {id: \"about\"})\r\n    }, [])\r\n\r\n    useEffect(()=>{\r\n\r\n        if(isOpen){\r\n            bus.emit('modal:open', {id: ModalID})\r\n        } else {\r\n            bus.emit('modal:close')\r\n        }\r\n        \r\n    }, [ isOpen ])\r\n\r\n    return (\r\n        <div\r\n            className=\"js-modal modal-overlay about-modal\"\r\n            data-modal={ModalID}\r\n        >\r\n            <div\r\n                className=\"modal-content column-20\"\r\n                role=\"dialog\"\r\n                aria-labelledby=\"modal\"\r\n            >\r\n                <div className='close-btn' onClick={closeBtnOnClicked}>\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" height=\"24\" width=\"24\"><path d=\"M18.01 6.697L12.707 12l5.303 5.303-.707.707L12 12.707 6.697 18.01l-.707-.707L11.293 12 5.99 6.697l.707-.707L12 11.293l5.303-5.303z\"/></svg>\r\n                </div>\r\n\r\n                <div className='block-group block-group-3-up tablet-block-group-1-up phone-block-group-1-up'>\r\n                    <div className='block'>\r\n                        <h4 className='header-red avenir-bold'>WEEKLY CASES</h4>\r\n                        <p>These lines mark the weekly averages of new cases, per 100,000 population, per week—useful for showing the local fluctuations of cases throughout the outbreak. When seen together regional patterns emerge. The Y-axis of these charts are scaled to fit the maximum weekly increase when new cases are greater than 25 per 100,000. Please see the note on the Y-axis below for an explanation.</p>\r\n                    </div>\r\n                    <div className='block'>\r\n                        <h4 className='header-red avenir-bold'>CASES</h4>\r\n                        <p>These lines track the ongoing cumulative number of cases, per 100,000 population, per week. Because it is a cumulative count, the lines will never trend downward, though their rate of increase over time can provide an impression of the local history of the outbreak. An upward-bending line indicates a slow start and rapidly rising outbreak. A generally diagonal line indicates a consistent rate of transmission. An s-shaped line indicates a local “flattening of the curve” associated with a decrease in local cases. A stair-stepped line indicates multiple waves of transmission.</p>\r\n                    </div>\r\n                    <div className='block'>\r\n                        <h4 className='header-red avenir-bold'>DEATHS</h4>\r\n                        <p>These lines track the ongoing cumulative number of deaths, per 100,000 population. Interpretations of these lines is consistent with the description of cases, above. Given the incubation and illness period of the virus, this line will show a similar pattern, though with a lag, compared to cases.</p>\r\n                    </div>\r\n                </div>\r\n\r\n                <div>\r\n                    <h4 className='header-khaki avenir-bold'>ABOUT THE Y-AXIS</h4>\r\n                    <p>Each trend line has a dynamic y-axis such that if the maximum rate of cases exceeds 25 cases per 100,000 population (quite high), then the height is compressed to fit into the rectangular bounds of the chart container. While this prevents a direct comparison between locations, it ensures that areas with very low populations (and therefore highly fluctuating case rates) do not by comparison suppress (to nearly flat) the rates of moderate and high-population areas. This compromise allows for a general visual reference of local trends while specific counts can be accessed when a location is selected.</p>\r\n                </div>\r\n\r\n                <div>\r\n                    <h4 className='header-khaki avenir-bold'>SOURCES</h4>\r\n                    <p>These counts are sourced from the Johns Hopkins University features service of <a target='_blank' href=\"https://services9.arcgis.com/6Hv9AANartyT7fJW/ArcGIS/rest/services\">US County Cases</a> and normalized into rates using <a target='_blank' href=\"https://www.arcgis.com/home/item.html?id=99fd67933e754a1181cc755146be21ca\">state</a> and <a target='_blank' href=\"https://www.arcgis.com/home/item.html?id=7566e0221e5646f99ea249a197116605\">county</a> populations from the US Census Bureau accessed via <a target='_blank' href=\"https://livingatlas.arcgis.com/en/browse/#d=2&amp;q=usa%20population\">Living Atlas</a>. The Khaki basemap is <a target='_blank' href=\"https://livingatlas.arcgis.com/en/browse/#d=2&amp;q=khaki\">available via Living Atlas</a>.</p>\r\n                </div>\r\n\r\n                <div>\r\n                    <h4 className='header-khaki avenir-bold'>CREATORS</h4>\r\n                    <p>This application was created by <a target='_blank' href=\"https://github.com/vannizhang/\">Jinnan Zhang</a> and <a target='_blank' href=\"https://adventuresinmapping.com/\">John Nelson</a>, of Esri, with help from <a target='_blank' href=\"https://github.com/ycabon\">Yann Cabon</a>, inspired by the <a target='_blank' href=\"https://datagistips.hypotheses.org/488\">trend line maps of Mathieu Rajerison</a> and the <a target='_blank' href=\"https://twitter.com/rileydchampine/status/1243552850728411143\">local 1918 flu charts of Riley D. Champine</a>. We are not medical professionals but saw a need for a visual sense of local rates and trends and created this primarily as a resource for ourselves but are making it available to the public in the event that it is a helpful resource for understanding patterns. We make no claims of officiality and share it only as a reference.</p>\r\n                </div>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default About;\r\n","import axios from 'axios';\r\n\r\nimport {\r\n    Covid19CasesByTimeFeature\r\n} from 'covid19-trend-map';\r\n\r\ntype FetchCovid19DataOptions = {\r\n    countyFIPS?: string;\r\n    stateName?: string;\r\n}\r\n\r\nconst USCountiesCovid19CasesByTimeFeatureServiceURL = 'https://services9.arcgis.com/6Hv9AANartyT7fJW/ArcGIS/rest/services/USCounties_cases_V1/FeatureServer/1';\r\n\r\nconst cachedQueryResults: {\r\n    [key:string]: Covid19CasesByTimeFeature[]\r\n} = {};\r\n\r\nexport const fetchCovid19Data = async({\r\n    countyFIPS,\r\n    stateName\r\n}:FetchCovid19DataOptions):Promise<Covid19CasesByTimeFeature[]>=>{\r\n\r\n    const key4CachedResults = countyFIPS || stateName;\r\n\r\n    if(cachedQueryResults[key4CachedResults]){\r\n        return cachedQueryResults[key4CachedResults];\r\n    }\r\n\r\n    const requestUrl = `${USCountiesCovid19CasesByTimeFeatureServiceURL}/query`;\r\n\r\n    const params = countyFIPS\r\n        ? {\r\n            f: 'json',\r\n            where: `FIPS='${countyFIPS}'`,\r\n            outFields: 'dt,Confirmed,Deaths,NewCases,Population',\r\n            orderByFields: 'dt'\r\n        }\r\n        : {\r\n            f: 'json',\r\n            where: `ST_Name='${stateName}'`,\r\n            outFields: '*',\r\n            orderByFields: 'dt',\r\n            groupByFieldsForStatistics: 'ST_Name,dt',\r\n            outStatistics: JSON.stringify([\r\n                {\r\n                    \"statisticType\": \"sum\",\r\n                    \"onStatisticField\": \"Confirmed\", \r\n                    \"outStatisticFieldName\": \"Confirmed\"\r\n                },\r\n                {\r\n                    \"statisticType\": \"sum\",\r\n                    \"onStatisticField\": \"Deaths\", \r\n                    \"outStatisticFieldName\": \"Deaths\"\r\n                },\r\n                {\r\n                    \"statisticType\": \"sum\",\r\n                    \"onStatisticField\": \"NewCases\",\r\n                    \"outStatisticFieldName\": \"NewCases\"\r\n                },\r\n                {\r\n                    \"statisticType\": \"sum\",\r\n                    \"onStatisticField\": \"Population\",\r\n                    \"outStatisticFieldName\": \"Population\"\r\n                }  \r\n            ])\r\n        };\r\n\r\n    try {\r\n        const { data } = await axios.get(requestUrl, { \r\n            params: new URLSearchParams(params)\r\n        });\r\n\r\n        if(data && data.features){\r\n            // console.log(data.features)\r\n\r\n            cachedQueryResults[key4CachedResults] = data.features;\r\n\r\n            return data.features\r\n        }\r\n\r\n    } catch(err){\r\n        console.error(err);\r\n    }\r\n\r\n    return null;\r\n};","import {\r\n    useState,\r\n    useEffect\r\n} from 'react';\r\nimport { urlFns } from 'helper-toolkit-ts';\r\n\r\nexport type MapCenterLocation = {\r\n    lat: number;\r\n    lon: number;\r\n    zoom: number;\r\n}\r\n\r\nconst SearchParamKeyForMapCenterLoc = '@';\r\n\r\nconst getMapCenterLocationFromUrlSearchParams = ():MapCenterLocation=>{\r\n\r\n    const searchParams = urlFns.parseQuery();\r\n\r\n    if(!searchParams[SearchParamKeyForMapCenterLoc]){\r\n        return null;\r\n    }\r\n\r\n    const values: number[] = searchParams[SearchParamKeyForMapCenterLoc]\r\n        .split(',')\r\n        .map((d:string)=>+d)\r\n\r\n    const [ lon, lat, zoom ] = values\r\n\r\n    return { lon, lat, zoom };\r\n};\r\n\r\nconst useMapCenterLocationFromUrl = () => {\r\n\r\n    const [ locationFromURL, setMapCenterLocation ] = useState<MapCenterLocation>(getMapCenterLocationFromUrlSearchParams());\r\n\r\n    useEffect(()=>{\r\n\r\n        if(!locationFromURL){\r\n            return;\r\n        }\r\n\r\n        const { lon, lat, zoom } = locationFromURL;\r\n\r\n        urlFns.updateQueryParam({\r\n            key: SearchParamKeyForMapCenterLoc,\r\n            value: `${lon},${lat},${zoom}`\r\n        });\r\n\r\n    }, [ locationFromURL ]);\r\n\r\n    return {\r\n        locationFromURL,\r\n        saveLocationInURL: setMapCenterLocation\r\n    }\r\n}\r\n\r\nexport default useMapCenterLocationFromUrl\r\n","import React, {\r\n    useEffect,\r\n    useState\r\n} from 'react';\r\n\r\nimport axios from 'axios';\r\n\r\nimport MapView from '../MapView/MapView';\r\nimport Covid19TrendLayer from '../Covid19TrendLayer/Covid19TrendLayer';\r\nimport QueryTaskLayer from '../QueryTaskLayer/QueryTaskLayer';\r\nimport ControlPanel from '../ControlPanel/ControlPanel';\r\nimport ChartPanel from '../ChartPanel/ChartPanel';\r\nimport BottomPanel from '../BottomPanel/BottomPanel';\r\nimport SummaryInfoPanel from '../SummaryInfoPanel/SummaryInfoPanel';\r\nimport QueryTaskResultLayer from '../QueryTaskResultLayer/QueryTaskResultLayer'; \r\nimport About from '../About/About';\r\n\r\nimport {\r\n    Covid19TrendName,\r\n    Covid19TrendData,\r\n    Covid19CasesByTimeFeature,\r\n    QueryLocation4Covid19TrendData\r\n} from 'covid19-trend-map';\r\n\r\nimport IGraphic from 'esri/Graphic';\r\n\r\nimport AppConfig from '../../AppConfig';\r\n\r\nimport {\r\n    urlFns, miscFns\r\n} from 'helper-toolkit-ts';\r\n\r\nimport {\r\n    fetchCovid19Data\r\n} from '../../utils/queryCovid19Data';\r\n\r\nimport useMapCenterLocationFromUrl from '../../hooks/useMapLocationFromUrl';\r\n\r\nconst isMobile = miscFns.isMobileDevice();\r\n\r\nconst UrlSearchParams = urlFns.parseQuery();\r\n// console.log(UrlSearchParams.trend)\r\n\r\nconst DefaultTrend:Covid19TrendName = UrlSearchParams.trend;\r\n\r\nconst App = () => {\r\n\r\n    const { locationFromURL, saveLocationInURL } = useMapCenterLocationFromUrl();\r\n\r\n    const [ activeTrend, setActiveTrend ] = useState<Covid19TrendName>(DefaultTrend || 'new-cases');\r\n\r\n    const [ covid19USCountiesData, setCovid19USCountiesData ] = useState<Covid19TrendData[]>();\r\n\r\n    const [ covid19USStatesData, setCovid19USStatesData ] = useState<Covid19TrendData[]>();\r\n\r\n    const [ covid19CasesByTimeQueryResults, setCovid19CasesByTimeQueryResults ] = useState<Covid19CasesByTimeFeature[]>();\r\n\r\n    // user can click map to select US State or County that will be used to query covid19 trend data\r\n    const [ covid19CasesByTimeQueryLocation, setcovid19CasesByTimeQueryLocation ] = useState<QueryLocation4Covid19TrendData>();\r\n\r\n    const [ isLoading, setIsLoading ] = useState<boolean>(false);\r\n\r\n    const [ isAboutModalOpen, setIsAboutModalOpen ] = useState<boolean>(false);\r\n\r\n    const fetchData = async()=>{\r\n\r\n        try {\r\n\r\n            const HostUrl = AppConfig[\"static-files-host\"];\r\n            const Url4CountiesJSON = HostUrl + AppConfig[\"covid19-data-us-counties-json\"];\r\n            const Url4StatesJSON = HostUrl + AppConfig[\"covid19-data-us-states-json\"];\r\n\r\n            const queryResUSStates = await axios.get<Covid19TrendData[]>(Url4StatesJSON);\r\n            setCovid19USStatesData(queryResUSStates.data);\r\n            // console.log(queryResUSStates)\r\n\r\n            const queryResUSCounties = await axios.get<Covid19TrendData[]>(Url4CountiesJSON);\r\n            setCovid19USCountiesData(queryResUSCounties.data);\r\n            // console.log(queryResUSCounties)\r\n\r\n        } catch(err){\r\n            console.error(err);\r\n        }\r\n\r\n    };\r\n\r\n    const countyOnSelect = async(countyFeature:IGraphic)=>{\r\n\r\n        if(!countyFeature){\r\n            resetQueryResults();\r\n            return false;\r\n        }\r\n\r\n        setcovid19CasesByTimeQueryLocation({\r\n            graphic: countyFeature,\r\n            locationName:  `${countyFeature.attributes['NAME']} CO, ${countyFeature.attributes['STATE_NAME']}`\r\n        });\r\n\r\n        const data = await fetchCovid19Data({\r\n            countyFIPS: countyFeature.attributes['FIPS']\r\n        });\r\n        setCovid19CasesByTimeQueryResults(data);\r\n    };\r\n\r\n    const stateOnSelect = async(stateFeature:IGraphic)=>{\r\n\r\n        if(!stateFeature){\r\n            resetQueryResults();\r\n            return false;\r\n        }\r\n\r\n        const stateName = stateFeature.attributes['STATE_NAME'];\r\n\r\n        setcovid19CasesByTimeQueryLocation({\r\n            graphic: stateFeature,\r\n            locationName: stateFeature.attributes['STATE_NAME']\r\n        });\r\n\r\n        const data = await fetchCovid19Data({\r\n            stateName\r\n        });\r\n        setCovid19CasesByTimeQueryResults(data);\r\n    };\r\n\r\n    const queryOnStartHandler = ()=>{\r\n        setCovid19CasesByTimeQueryResults(undefined);\r\n        setIsLoading(true);\r\n    }\r\n\r\n    const resetQueryResults = ()=>{\r\n        setIsLoading(false);\r\n        setCovid19CasesByTimeQueryResults(undefined);\r\n        setcovid19CasesByTimeQueryLocation(undefined);\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchData();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if(covid19CasesByTimeQueryResults){\r\n            setIsLoading(false);\r\n        }\r\n    }, [covid19CasesByTimeQueryResults]);\r\n\r\n    return (\r\n        <>\r\n            <MapView \r\n                webmapId={AppConfig[\"webmap-id\"]}\r\n                initialMapCenterLocation={locationFromURL}\r\n                onStationary={saveLocationInURL}\r\n            >\r\n                <QueryTaskResultLayer \r\n                    queryResult={covid19CasesByTimeQueryLocation ? covid19CasesByTimeQueryLocation.graphic : undefined}\r\n                />\r\n\r\n                <Covid19TrendLayer \r\n                    key='US-Counties'\r\n                    features={covid19USCountiesData}\r\n                    activeTrend={activeTrend}\r\n                    size={20}\r\n                    visibleScale={AppConfig[\"us-counties-layer-visible-scale\"]}\r\n                />\r\n\r\n                <Covid19TrendLayer \r\n                    key='US-States'\r\n                    features={covid19USStatesData}\r\n                    activeTrend={activeTrend}\r\n                    size={24}\r\n                    visibleScale={AppConfig[\"us-states-layer-visible-scale\"]}\r\n                />\r\n\r\n                <QueryTaskLayer \r\n                    key='query-4-US-Counties'\r\n                    itemId={AppConfig[\"us-counties-feature-layer-item-id\"]}\r\n                    outFields={['FIPS', 'NAME', 'STATE_NAME']}\r\n                    visibleScale={AppConfig[\"us-counties-layer-visible-scale\"]}\r\n                    onStart={queryOnStartHandler}\r\n                    onSelect={countyOnSelect}\r\n                />\r\n\r\n                <QueryTaskLayer \r\n                    key='query-4-US-States'\r\n                    itemId={AppConfig[\"us-states-feature-layer-item-id\"]}\r\n                    outFields={['STATE_NAME']}\r\n                    visibleScale={AppConfig[\"us-states-layer-visible-scale\"]}\r\n                    onStart={queryOnStartHandler}\r\n                    onSelect={stateOnSelect}\r\n                />\r\n            </MapView>\r\n\r\n            <ControlPanel \r\n                isMobile={isMobile}\r\n                activeTrend={activeTrend}\r\n                activeTrendOnChange={setActiveTrend}\r\n                infoBtnOnClick={setIsAboutModalOpen.bind(this, true)}\r\n            />\r\n\r\n            {\r\n                covid19CasesByTimeQueryResults || isLoading ? (\r\n                    <BottomPanel\r\n                        showLoadingIndicator={isLoading}\r\n                    >\r\n\r\n                        <SummaryInfoPanel \r\n                            locationName={covid19CasesByTimeQueryLocation ? covid19CasesByTimeQueryLocation.locationName : undefined }\r\n                            data={covid19CasesByTimeQueryResults}\r\n                            isMobile={isMobile}\r\n                            closeBtnOnClick={resetQueryResults}\r\n                        />\r\n\r\n                        <ChartPanel \r\n                            activeTrend={activeTrend}\r\n                            data={covid19CasesByTimeQueryResults}\r\n                        />\r\n                    </BottomPanel>\r\n                ) : null\r\n            }\r\n\r\n            <About \r\n                isOpen={isAboutModalOpen}\r\n                closeBtnOnClicked={setIsAboutModalOpen.bind(this, false)}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import './styles/index.scss';\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { setDefaultOptions } from 'esri-loader';\r\n\r\nimport App from './components/App/App';\r\n\r\nsetDefaultOptions({ url: 'https://js.arcgis.com/next/'})\r\n\r\nReactDOM.render(\r\n    <App/>, \r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}