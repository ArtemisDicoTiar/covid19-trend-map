{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/components/MapView/MapView.tsx","webpack:///./src/components/Covid19TrendLayer/Covid19TrendLayer.tsx","webpack:///./src/components/QueryTaskLayer/QueryTaskLayer.tsx","webpack:///./src/AppConfig.ts","webpack:///./src/components/ControlPanel/ControlPanel.tsx","webpack:///./src/components/ChartPanel/SvgContainer.tsx","webpack:///./src/components/ChartPanel/Axis.tsx","webpack:///./src/components/ChartPanel/Bars.tsx","webpack:///./src/components/ChartPanel/Line.tsx","webpack:///./src/components/ChartPanel/MouseEventsRect.tsx","webpack:///./src/components/ChartPanel/Tooltip.tsx","webpack:///./src/components/ChartPanel/ChartPanel.tsx","webpack:///./src/components/BottomPanel/BottomPanel.tsx","webpack:///./src/components/SummaryInfoPanel/SummaryInfoPanel.tsx","webpack:///./src/components/QueryTaskResultLayer/QueryTaskResultLayer.tsx","webpack:///./src/utils/queryCovid19Data.ts","webpack:///./src/hooks/useMapLocationFromUrl.tsx","webpack:///./src/components/App/App.tsx","webpack:///./src/index.tsx"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","0","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","MapView","webmapId","initialMapCenterLocation","onStationary","children","mapDivRef","React","useRef","useState","mapView","setMapView","initMapView","a","loadModules","WebMap","lat","lon","zoom","center","undefined","view","container","current","map","portalItem","id","when","addWatchEvent","whenTrue","centerLocation","latitude","toFixed","longitude","useEffect","loadCss","style","position","top","left","width","height","ref","Children","child","cloneElement","Covid19TrendLayer","activeTrend","features","visibleScale","size","trendLayer","setTrendLayer","isLayerInVisibleScale","setIsLayerInVisibleScale","init","GraphicsLayer","watchUtils","layer","minScale","min","maxScale","max","add","isInVisibleScale","scale","draw","CIMSymbol","Graphic","Point","graphics","feature","geometry","pathData","confirmed","deaths","newCases","frame","path","symbol","type","symbolLayers","enable","scaleSymbolsProportionally","respectFrame","markerGraphics","paths","color","y","x","addMany","removeAll","QueryTaskLayer","itemId","outFields","onStart","onSelect","setLayer","FeatureLayer","queryFeatures","event","where","toMap","returnGeometry","results","on","ThemeStyle","SwitchBtnData","label","ControlPanel","isMobile","activeTrendOnChange","className","onClick","viewBox","fill","margin","right","bottom","SvgContainer","xDomain","yDomain","windowSize","useWindowSize","containerRef","dimensionRef","svgContainerData","setSvgContainerData","scales","setScales","scalesOnUpdateEndHandler","lastUpdateTime","Date","offsetWidth","offsetHeight","select","append","attr","svgSelector","svg","node","g","xScale","scaleBand","paddingInner","range","domain","yScale","scaleLinear","nice","dimension","newWidth","resizeHandler","formatTime","timeFormat","Axis","mainGroup","startDateParts","startDate","endDateParts","endDate","xAxis","xAxisLabel","split","scaleTime","axisBottom","tickFormat","date","selectAll","yAxis","axisLeft","ticks","tickSizeInner","tickPadding","num","numberFns","abbreviateNumber","yAxisLabel","drawYAxis","BarRectGroupClassName","generate","BarRectClassName","Bar","fillColor","containerG","remove","existingBars","enter","bandwidth","LinePathClassName","Line","strokeColor","lines","exit","containerGroup","xOffset","valueline","line","MouseEventsRect","onHover","itemOnHover","setItemOnHover","item","updateVerticalRefLinePos","vRefLine","xPos","attributes","dt","opacity","getItemByMousePos","mousePosX","itemIndex","len","currItemPos","nextItemIndex","nextItemPos","Math","abs","mouse","this","Tooltip","Confirmed","Deaths","NewCases","tooltipRef","tooltipPos","setTooltipPos","tooltipDiv","tooltipDivWidth","xPosForItemOnHover","updateTooltipPosition","Population","numberWithCommas","FieldNameByActiveTrend","ChartPanel","values","fieldName","showNormalizedValues","round","sum","startIndex","endIndex","featuresInPastWeek","forEach","getDataForLine","BottomPanel","SummaryInfoPanel","feature7DaysAgo","latestFeature","cumulativeCases","cumulativeDeaths","newCasesThisWeek","deathsThisWeek","population","locationName","closeBtnOnClick","featureWithBiggestWeeklyIncrease","biggestWeeklyIncrease","Number","NEGATIVE_INFINITY","dateForFirstFeature","parse","dayForFirstFeature","getISODay","dayOfWeek","weeklyIncrease","dateWithBiggestWeeklyIncrease","format","getBiggestWeeklyIncrease","QueryTaskResultLayer","queryResult","graphicLayer","setGraphicLayer","showQueryResult","SimpleFillSymbol","outline","cachedQueryResults","fetchCovid19Data","countyFIPS","stateName","key4CachedResults","requestUrl","params","f","orderByFields","groupByFieldsForStatistics","outStatistics","JSON","stringify","axios","URLSearchParams","useMapCenterLocationFromUrl","searchParams","urlFns","parseQuery","getMapCenterLocationFromUrlSearchParams","locationFromURL","setMapCenterLocation","updateQueryParam","saveLocationInURL","miscFns","isMobileDevice","DefaultTrend","trend","App","setActiveTrend","covid19USCountiesData","setCovid19USCountiesData","covid19USStatesData","setCovid19USStatesData","covid19CasesByTimeQueryResults","setCovid19CasesByTimeQueryResults","covid19CasesByTimeQueryLocation","setcovid19CasesByTimeQueryLocation","fetchData","Url4CountiesJSON","HostUrl","AppConfig","Url4StatesJSON","queryResUSCounties","queryResUSStates","countyOnSelect","countyFeature","graphic","stateOnSelect","stateFeature","setDefaultOptions","url","ReactDOM","render","document","getElementById"],"mappings":"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","file":"main.106b42cb6c2fcd72da57.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t0: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([142,1]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import React, {\r\n    useEffect\r\n} from 'react';\r\n\r\nimport { loadModules, loadCss } from 'esri-loader';\r\nimport IMapView from 'esri/views/MapView';\r\nimport IWebMap from \"esri/WebMap\";\r\nimport IwatchUtils from 'esri/core/watchUtils';\r\n\r\nimport {\r\n    MapCenterLocation\r\n} from '../../hooks/useMapLocationFromUrl'\r\n\r\ninterface Props {\r\n    webmapId: string;\r\n    initialMapCenterLocation?: MapCenterLocation;\r\n    onStationary: (data:MapCenterLocation)=>void;\r\n};\r\n\r\nconst MapView:React.FC<Props> = ({\r\n    webmapId,\r\n    initialMapCenterLocation,\r\n    onStationary,\r\n    children\r\n})=>{\r\n\r\n    const mapDivRef = React.useRef<HTMLDivElement>();\r\n\r\n    const [ mapView, setMapView] = React.useState<IMapView>(null);\r\n\r\n    const initMapView = async()=>{\r\n  \r\n        type Modules = [typeof IMapView, typeof IWebMap];\r\n\r\n        try {\r\n            const [ \r\n                MapView, \r\n                WebMap \r\n            ] = await (loadModules([\r\n                'esri/views/MapView',\r\n                'esri/WebMap',\r\n            ]) as Promise<Modules>);\r\n\r\n            const { lat, lon, zoom } = initialMapCenterLocation || {};\r\n\r\n            const center = lon && lat  ? [ lon, lat ] : undefined;\r\n\r\n            const view = new MapView({\r\n                container: mapDivRef.current,\r\n                center,\r\n                zoom,\r\n                map: new WebMap({\r\n                    portalItem: {\r\n                        id: webmapId\r\n                    }  \r\n                }),\r\n            });\r\n\r\n            view.when(()=>{\r\n                setMapView(view);\r\n            });\r\n\r\n        } catch(err){   \r\n            console.error(err);\r\n        }\r\n    };\r\n\r\n    const addWatchEvent = async()=>{\r\n        type Modules = [typeof IwatchUtils];\r\n\r\n        try {\r\n            const [ \r\n                watchUtils \r\n            ] = await (loadModules([\r\n                'esri/core/watchUtils'\r\n            ]) as Promise<Modules>);\r\n\r\n            watchUtils.whenTrue(mapView, 'stationary', ()=>{\r\n                // console.log('mapview is stationary', mapView.center, mapView.zoom);\r\n\r\n                if(mapView.zoom === -1){\r\n                    return;\r\n                }\r\n\r\n                const centerLocation = {\r\n                    lat: mapView.center && mapView.center.latitude \r\n                        ? +mapView.center.latitude.toFixed(3) \r\n                        : 0,\r\n                    lon: mapView.center && mapView.center.longitude \r\n                        ? +mapView.center.longitude.toFixed(3) \r\n                        : 0,\r\n                    zoom: mapView.zoom\r\n                }\r\n\r\n                onStationary(centerLocation);\r\n            });\r\n\r\n        } catch(err){   \r\n            console.error(err);\r\n        }\r\n    };\r\n\r\n    useEffect(()=>{\r\n        loadCss();\r\n        initMapView();\r\n    }, []);\r\n\r\n    React.useEffect(()=>{\r\n        if(mapView){\r\n            addWatchEvent();\r\n        }\r\n    }, [ mapView ]);\r\n\r\n    return (\r\n        <>\r\n            <div \r\n                style={{\r\n                    position: 'absolute',\r\n                    top: 0,\r\n                    left: 0,\r\n                    width: '100%',\r\n                    height: '100%',\r\n                }}\r\n                ref={mapDivRef}\r\n            ></div>\r\n            { \r\n                React.Children.map(children, (child)=>{\r\n                    return React.cloneElement(child as React.ReactElement<any>, {\r\n                        mapView,\r\n                    });\r\n                }) \r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MapView;","import React, {\r\n    useEffect,\r\n    useState\r\n} from 'react';\r\n\r\nimport { loadModules } from 'esri-loader';\r\nimport IMapView from 'esri/views/MapView';\r\nimport ICIMSymbol from 'esri/symbols/CIMSymbol';\r\nimport IGraphic from 'esri/Graphic';\r\nimport IPoint from 'esri/geometry/Point';\r\nimport IGraphicsLayer from 'esri/layers/GraphicsLayer';\r\nimport IwatchUtils from 'esri/core/watchUtils';\r\n\r\n// import IFeatureLayer from 'esri/layers/FeatureLayer';\r\n// import IUniqueValueRenderer from 'esri/renderers/UniqueValueRenderer';\r\n// // import IUniqueValueInfo from 'esri/renderers/support/UniqueValueInfo';\r\n\r\n// import ISimpleRenderer from 'esri/renderers/SimpleRenderer';\r\n// import ISimpleMarkerSymbol from 'esri/symbols/SimpleMarkerSymbol';\r\n\r\nimport {\r\n    PathData,\r\n    Covid19TrendName,\r\n    Covid19TrendData\r\n} from 'covid19-trend-map';\r\nimport AppConfig from '../../AppConfig';\r\n\r\ntype Props = {\r\n    activeTrend: Covid19TrendName;\r\n    size?: number;\r\n    visibleScale?: {\r\n        min: number;\r\n        max: number;\r\n    }\r\n    // itemId?: string;\r\n    // field?: string;\r\n    mapView?:IMapView;\r\n}\r\n\r\ntype Covid19TrendLayerProps = {\r\n    features: Covid19TrendData[]\r\n} & Props;\r\n\r\nconst Covid19TrendLayer:React.FC<Covid19TrendLayerProps> = ({\r\n    activeTrend,\r\n    features,\r\n    visibleScale,\r\n    size = 20,\r\n    mapView\r\n}) => {\r\n\r\n    const [ trendLayer, setTrendLayer ] = useState<IGraphicsLayer>();\r\n\r\n    const [ isLayerInVisibleScale, setIsLayerInVisibleScale ] = useState<boolean>(false);\r\n\r\n    const init = async()=>{\r\n        type Modules = [\r\n            typeof IGraphicsLayer,\r\n            typeof IwatchUtils\r\n        ];\r\n\r\n        try {\r\n            const [ \r\n                GraphicsLayer,\r\n                watchUtils\r\n            ] = await (loadModules([\r\n                'esri/layers/GraphicsLayer',\r\n                'esri/core/watchUtils'\r\n            ]) as Promise<Modules>);\r\n\r\n            const layer = new GraphicsLayer({\r\n                minScale: visibleScale && visibleScale.min,\r\n                maxScale: visibleScale && visibleScale.max\r\n            });\r\n\r\n            mapView.map.add(layer);\r\n\r\n            setTrendLayer(layer);\r\n\r\n            watchUtils.whenTrue(mapView, 'stationary', ()=>{\r\n                const isInVisibleScale = (mapView.scale < visibleScale.min && mapView.scale > visibleScale.max);\r\n                setIsLayerInVisibleScale(isInVisibleScale);\r\n            })\r\n\r\n        } catch(err){\r\n            console.error(err);\r\n        }\r\n    };\r\n\r\n    const draw = async(features:Covid19TrendData[])=>{\r\n\r\n        type Modules = [\r\n            typeof ICIMSymbol,\r\n            typeof IGraphic,\r\n            typeof IPoint\r\n        ];\r\n\r\n        try {\r\n            const [ \r\n                CIMSymbol,\r\n                Graphic,\r\n                Point\r\n            ] = await (loadModules([\r\n                'esri/symbols/CIMSymbol',\r\n                'esri/Graphic',\r\n                'esri/geometry/Point'\r\n            ]) as Promise<Modules>);\r\n\r\n            const graphics = features.map(feature=>{\r\n                const {\r\n                    geometry,\r\n                    confirmed,\r\n                    deaths,\r\n                    newCases\r\n                } = feature;\r\n\r\n                const pathDataByTrendName: { [key in Covid19TrendName]: PathData } = {\r\n                    'confirmed': confirmed,\r\n                    'death': deaths,\r\n                    'new-cases': newCases\r\n                };\r\n\r\n                const pathData = pathDataByTrendName[activeTrend];\r\n\r\n                const {\r\n                    frame,\r\n                    path\r\n                } = pathData;\r\n\r\n                // Create the CIM symbol:\r\n                //  - set the size value\r\n                //  - assign the generated path to the marker's geometry\r\n                const symbol = new CIMSymbol({\r\n                    data: {\r\n                        type: 'CIMSymbolReference',\r\n                        symbol: {\r\n                            type: \"CIMPointSymbol\",\r\n                            symbolLayers: [\r\n                                {\r\n                                    type: \"CIMVectorMarker\",\r\n                                    enable: true,\r\n                                    scaleSymbolsProportionally: false,\r\n                                    respectFrame: false,\r\n                                    size,\r\n                                    frame,\r\n                                    markerGraphics: [{\r\n                                        type: \"CIMMarkerGraphic\",\r\n                                        geometry: {\r\n                                            paths: [path]\r\n                                        },\r\n                                        symbol: {\r\n                                            type: \"CIMLineSymbol\",\r\n                                            symbolLayers: [{\r\n                                                type: \"CIMSolidStroke\",\r\n                                                width: 1,\r\n                                                color: [161, 13, 34, 255]\r\n                                            }]\r\n                                        }\r\n                                    }]\r\n                                }\r\n                            ]\r\n                        }\r\n                    }\r\n                });\r\n\r\n                const graphic = new Graphic({\r\n                    geometry: new Point({\r\n                        latitude: geometry.y,\r\n                        longitude: geometry.x\r\n                    }),\r\n                    symbol\r\n                })\r\n\r\n                return graphic;\r\n            });\r\n\r\n            trendLayer.addMany(graphics);\r\n\r\n        } catch(err){   \r\n            console.error(err);\r\n        }\r\n    };\r\n\r\n    useEffect(()=>{\r\n        if(mapView){\r\n            init();\r\n        }\r\n    }, [mapView]);\r\n\r\n    useEffect(()=>{\r\n        if(trendLayer && features){\r\n\r\n            trendLayer.removeAll();\r\n            // draw(features);\r\n\r\n            if(isLayerInVisibleScale){\r\n                draw(features);\r\n            }\r\n        }\r\n    }, [ trendLayer, features, activeTrend ]);\r\n\r\n    \r\n    useEffect(()=>{\r\n        if( \r\n            features &&\r\n            isLayerInVisibleScale && \r\n            !trendLayer.graphics.length\r\n        ){\r\n            draw(features);\r\n        }\r\n    }, [ isLayerInVisibleScale ]);\r\n\r\n\r\n    return null;\r\n}\r\n\r\n// const Covid19TrendFeatureLayer:React.FC<Covid19TrendLayerProps> = ({\r\n//     activeTrend,\r\n//     features,\r\n//     visibleScale,\r\n//     size = 20,\r\n//     itemId,\r\n//     field,\r\n//     mapView\r\n// })=>{\r\n\r\n//     const [ trendLayer, setTrendLayer ] = useState<IFeatureLayer>();\r\n\r\n//     const [ isLayerInVisibleScale, setIsLayerInVisibleScale ] = useState<boolean>(false);\r\n\r\n//     const init = async()=>{\r\n//         type Modules = [\r\n//             typeof IFeatureLayer,\r\n//             typeof IwatchUtils\r\n//         ];\r\n\r\n//         try {\r\n//             const [ \r\n//                 FeatureLayer,\r\n//                 watchUtils\r\n//             ] = await (loadModules([\r\n//                 'esri/layers/FeatureLayer',\r\n//                 'esri/core/watchUtils'\r\n//             ]) as Promise<Modules>);\r\n\r\n//             const layer = new FeatureLayer({\r\n//                 portalItem: {\r\n//                     id: itemId\r\n//                 },\r\n//                 minScale: visibleScale && visibleScale.min,\r\n//                 maxScale: visibleScale && visibleScale.max\r\n//             });\r\n\r\n//             mapView.map.add(layer);\r\n\r\n//             setTrendLayer(layer);\r\n\r\n//             // watchUtils.whenTrue(mapView, 'stationary', ()=>{\r\n//             //     const isInVisibleScale = (mapView.scale < visibleScale.min && mapView.scale > visibleScale.max);\r\n//             //     setIsLayerInVisibleScale(isInVisibleScale);\r\n//             // })\r\n\r\n//         } catch(err){\r\n//             console.error(err);\r\n//         }\r\n//     };\r\n\r\n//     const draw = async(features:Covid19TrendData[])=>{\r\n\r\n//         type Modules = [\r\n//             typeof ICIMSymbol,\r\n//             typeof IUniqueValueRenderer,\r\n//         ];\r\n\r\n//         try {\r\n//             const [ \r\n//                 CIMSymbol,\r\n//                 UniqueValueRenderer,\r\n//             ] = await (loadModules([\r\n//                 'esri/symbols/CIMSymbol',\r\n//                 'esri/renderers/UniqueValueRenderer'\r\n//             ]) as Promise<Modules>);\r\n\r\n//             const uniqueValueInfos = features.map(feature=>{\r\n//                 const {\r\n//                     attributes,\r\n//                     confirmed,\r\n//                     deaths,\r\n//                     newCases\r\n//                 } = feature;\r\n\r\n//                 const pathDataByTrendName: { [key in Covid19TrendName]: PathData } = {\r\n//                     'confirmed': confirmed,\r\n//                     'death': deaths,\r\n//                     'new-cases': newCases\r\n//                 };\r\n\r\n//                 const pathData = pathDataByTrendName[activeTrend];\r\n\r\n//                 const {\r\n//                     frame,\r\n//                     path\r\n//                 } = pathData;\r\n\r\n//                 // Create the CIM symbol:\r\n//                 //  - set the size value\r\n//                 //  - assign the generated path to the marker's geometry\r\n//                 const symbol = new CIMSymbol({\r\n//                     data: {\r\n//                         type: 'CIMSymbolReference',\r\n//                         symbol: {\r\n//                             type: \"CIMPointSymbol\",\r\n//                             symbolLayers: [\r\n//                                 {\r\n//                                     type: \"CIMVectorMarker\",\r\n//                                     enable: true,\r\n//                                     scaleSymbolsProportionally: false,\r\n//                                     respectFrame: false,\r\n//                                     size,\r\n//                                     frame,\r\n//                                     markerGraphics: [{\r\n//                                         type: \"CIMMarkerGraphic\",\r\n//                                         geometry: {\r\n//                                             paths: [path]\r\n//                                         },\r\n//                                         symbol: {\r\n//                                             type: \"CIMLineSymbol\",\r\n//                                             symbolLayers: [{\r\n//                                                 type: \"CIMSolidStroke\",\r\n//                                                 width: 1,\r\n//                                                 color: [161, 13, 34, 255]\r\n//                                             }]\r\n//                                         }\r\n//                                     }]\r\n//                                 }\r\n//                             ]\r\n//                         }\r\n//                     }\r\n//                 });\r\n\r\n//                 return {\r\n//                     symbol,\r\n//                     value: attributes[field]\r\n//                 }\r\n//             });\r\n\r\n//             trendLayer.renderer = new UniqueValueRenderer({\r\n//                 field,\r\n//                 uniqueValueInfos\r\n//             });\r\n\r\n//         } catch(err){   \r\n//             console.error(err);\r\n//         }\r\n//     };\r\n\r\n//     useEffect(()=>{\r\n//         if(mapView){\r\n//             init();\r\n//         }\r\n//     }, [mapView]);\r\n\r\n//     useEffect(()=>{\r\n//         if(trendLayer && features){\r\n\r\n//             // trendLayer.removeAll();\r\n//             // draw(features);\r\n\r\n//             draw(features);\r\n\r\n//             // processLargeArrayAsync(features, draw, 200)\r\n//         }\r\n//     }, [ trendLayer, features, activeTrend ]);\r\n\r\n    \r\n//     // useEffect(()=>{\r\n//     //     if( \r\n//     //         features &&\r\n//     //         isLayerInVisibleScale && \r\n//     //         !trendLayer.graphics.length\r\n//     //     ){\r\n//     //         draw(features);\r\n//     //     }\r\n//     // }, [ isLayerInVisibleScale ]);\r\n\r\n//     return null;\r\n// }\r\n\r\nexport default Covid19TrendLayer;\r\n","import React, {\r\n    useEffect,\r\n    useState\r\n} from 'react'\r\n\r\nimport { loadModules } from 'esri-loader';\r\n\r\nimport IMapView from 'esri/views/MapView';\r\nimport IFeatureLayer from 'esri/layers/FeatureLayer';\r\n// import IPoint from 'esri/geometry/Point';\r\nimport IGraphic from 'esri/Graphic';\r\n\r\ntype Props = {\r\n    itemId: string;\r\n    outFields?: string[];\r\n    mapView?:IMapView;\r\n    visibleScale?: {\r\n        min: number;\r\n        max: number;\r\n    }\r\n    onStart: ()=>void;\r\n    onSelect: (feature:IGraphic)=>void;\r\n}\r\n\r\nconst QueryTaskLayer:React.FC<Props> = ({\r\n    itemId,\r\n    outFields,\r\n    mapView,\r\n    visibleScale,\r\n    onStart,\r\n    onSelect\r\n}) => {\r\n\r\n    const [ layer, setLayer ] = useState<IFeatureLayer>();\r\n\r\n    const init = async()=>{\r\n\r\n        type Modules = [\r\n            typeof IFeatureLayer\r\n        ];\r\n\r\n        try {\r\n            const [ \r\n                FeatureLayer,\r\n            ] = await (loadModules([\r\n                'esri/layers/FeatureLayer',\r\n            ]) as Promise<Modules>);\r\n\r\n            const layer = new FeatureLayer({\r\n                portalItem: {\r\n                    id: itemId\r\n                },\r\n                minScale: visibleScale && visibleScale.min,\r\n                maxScale: visibleScale && visibleScale.max\r\n            });\r\n\r\n            setLayer(layer);\r\n\r\n        } catch(err){\r\n            console.error(err);\r\n        }\r\n    };\r\n\r\n    const queryFeatures = async(event:__esri.MapViewClickEvent)=>{\r\n        // console.log(mapView.scale)\r\n\r\n        if( mapView.scale < layer.minScale && \r\n            mapView.scale > layer.maxScale\r\n        ){\r\n            onStart();\r\n\r\n            const results = await layer.queryFeatures({\r\n                where: '1=1',\r\n                geometry: mapView.toMap(event),\r\n                returnGeometry: true,\r\n                outFields: outFields || ['*']\r\n            });\r\n\r\n            onSelect(results.features && results.features.length ? results.features[0] : undefined);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(mapView){\r\n            init();\r\n        }\r\n    }, [mapView]);\r\n\r\n    useEffect(() => {\r\n        if(layer && mapView){\r\n            mapView.on(\"click\", (event)=>{\r\n                queryFeatures(event);\r\n            });\r\n        }\r\n    }, [layer])\r\n\r\n    return null;\r\n}\r\n\r\nexport default QueryTaskLayer\r\n","export default {\r\n    'webmap-id':'1bff921ddf7044c3b5ba34e8494a2073',\r\n    'us-states-feature-layer-item-id': '99fd67933e754a1181cc755146be21ca',\r\n    'us-counties-feature-layer-item-id': '7566e0221e5646f99ea249a197116605',\r\n    'static-files-host': 'https://static.vannizhang.com/covid19/',\r\n    'covid19-data-us-states-json': 'us-states-paths.json',\r\n    'covid19-data-us-counties-json': 'us-counties-paths.json',\r\n    'us-counties-layer-visible-scale': {\r\n        'min': 7500000,\r\n        'max': 0\r\n    },\r\n    'us-states-layer-visible-scale': {\r\n        'min': 73957190,\r\n        'max': 7500001\r\n    }\r\n};\r\n\r\nexport const ThemeStyle = {\r\n    'theme-color-red': '#A10D22',\r\n    'theme-color-khaki': '#E8E2D2',\r\n    'theme-color-khaki-bright': '#EFEADB',\r\n    'floating-panel-box-shadow': '#B1A483',\r\n    'theme-color-khaki-dark': '#B2A584'\r\n};","import React from 'react'\r\nimport { Covid19TrendName } from 'covid19-trend-map';\r\nimport {\r\n    ThemeStyle\r\n} from '../../AppConfig';\r\n\r\ntype Props = {\r\n    isMobile?: boolean;\r\n    activeTrend: Covid19TrendName;\r\n    activeTrendOnChange: (val:Covid19TrendName)=>void;\r\n}\r\n\r\nconst SwitchBtnData: {\r\n    label: string;\r\n    value: Covid19TrendName\r\n}[] = [\r\n    {\r\n        label: 'WEEKLY CASES',\r\n        value: 'new-cases'\r\n    },\r\n    {\r\n        label: 'CASES',\r\n        value: 'confirmed'\r\n    },\r\n    {\r\n        label: 'DEATHS',\r\n        value: 'death'\r\n    }\r\n];\r\n\r\nconst ControlPanel: React.FC<Props> = ({\r\n    isMobile,\r\n    activeTrend,\r\n    activeTrendOnChange\r\n}) => {\r\n    \r\n    const getSwitchBtns = ()=>{\r\n        return SwitchBtnData.map(d=>{\r\n\r\n            const {\r\n                value, label\r\n            } = d;\r\n\r\n            return (\r\n                <div\r\n                    key={value}\r\n                    style={{\r\n                        'width': isMobile ? 'auto' : '150px',\r\n                        'flexGrow': isMobile ? 1 : 0,\r\n                        'height': '100%',\r\n                        'color': ThemeStyle[\"theme-color-red\"],\r\n                        'backgroundColor': activeTrend === value ? ThemeStyle[\"theme-color-khaki-bright\"] : 'transparent',\r\n                        'display': 'flex',\r\n                        'alignItems': 'center',\r\n                        'justifyContent': 'center',\r\n                        'boxSizing':'border-box',\r\n                        'borderBottom': `solid 4px ${ activeTrend === value ? ThemeStyle[\"theme-color-red\"] : 'transparent' }`,\r\n                        'borderRight': `solid 1px #E0D8C1`,\r\n                        'cursor': 'pointer'\r\n                    }}\r\n                    onClick={activeTrendOnChange.bind(this, value)}\r\n                >\r\n                    <span className={`avenir-bold ${isMobile ? 'font-size--3' : ''}`}>{label}</span>\r\n                </div>\r\n            )\r\n        })\r\n    };\r\n\r\n    const getInfoBtn = ()=>{\r\n\r\n        return (\r\n            <div\r\n                style={{\r\n                    'width': '60px',\r\n                    'height': '100%',\r\n                    'display': 'flex',\r\n                    'alignItems': 'center',\r\n                    'justifyContent': 'center',\r\n                    'cursor': 'pointer'\r\n                }}\r\n            >\r\n                <svg \r\n                    viewBox=\"0 0 24 24\" \r\n                    height='24' \r\n                    width='24'\r\n                    fill={ThemeStyle[\"theme-color-khaki-dark\"]}\r\n                >\r\n                    <path d=\"M12.5 7.5a1 1 0 1 1 1-1 1.002 1.002 0 0 1-1 1zM13 18V9h-2v1h1v8h-1v1h3v-1zm9.8-5.5A10.3 10.3 0 1 1 12.5 2.2a10.297 10.297 0 0 1 10.3 10.3zm-1 0a9.3 9.3 0 1 0-9.3 9.3 9.31 9.31 0 0 0 9.3-9.3z\"/>\r\n                    <path fill=\"none\" d=\"M0 0h24v24H0z\"/>\r\n                </svg>\r\n            </div>\r\n        )\r\n    }\r\n    \r\n    return (\r\n        <div\r\n            style={{\r\n                'position': 'absolute',\r\n                'top': '10px',\r\n                'right': '10px',\r\n                'left': isMobile ? '10px' : 'unset',\r\n                'boxShadow': `0 0 10px 2px #B1A483`,\r\n            }}\r\n        >\r\n            <div\r\n                style={{\r\n                    'backgroundColor': ThemeStyle[\"theme-color-red\"],\r\n                    'color': ThemeStyle[\"theme-color-khaki-bright\"],\r\n                    'height': isMobile ? 'auto' : '20px',\r\n                    'lineHeight': '20px',\r\n                    'width': '100%',\r\n                    'textAlign': 'center'\r\n                }}\r\n            >\r\n                <span className='avenir-bold' style={{\r\n                    'fontSize': '0.785rem'\r\n                }}>CORONAVIRUS TRENDS PER 100,000 PEOPLE, SINCE FEBRUARY, UPDATED DAILY</span>\r\n            </div>\r\n\r\n            <div\r\n                style={{\r\n                    'display': 'flex',\r\n                    'height': '60px',\r\n                    'width': '100%',\r\n                    'boxSizing':'border-box',\r\n                    \r\n                    'backgroundColor': ThemeStyle[\"theme-color-khaki\"]\r\n                }}\r\n            >\r\n                { getSwitchBtns() }\r\n                { getInfoBtn() }\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default ControlPanel\r\n","import React, {\r\n    useRef,\r\n    useEffect\r\n} from 'react';\r\n\r\nimport { \r\n    select,\r\n    scaleBand,\r\n    scaleLinear\r\n} from 'd3';\r\n\r\nimport useWindowSize from '@rehooks/window-size';\r\n\r\nconst margin = {\r\n    top: 15, \r\n    right: 20, \r\n    bottom: 30, \r\n    left: 40\r\n};\r\n\r\ntype Dimension = {\r\n    height: number;\r\n    width: number;\r\n};\r\n\r\nexport type XScale = d3.ScaleBand<string>;\r\nexport type YScale = d3.ScaleLinear<number, number>;\r\n\r\nexport type Scales = {\r\n    x: XScale;\r\n    y: YScale;\r\n    lastUpdateTime?: Date;\r\n};\r\n\r\nexport type SvgContainerData = {\r\n    svg: SVGElement;\r\n    g: SVGGElement;\r\n    margin: typeof margin;\r\n    dimension?: Dimension\r\n}\r\n\r\ntype Props = {\r\n    // data: Covid19CasesByTimeFeature[];\r\n    xDomain: string[];\r\n    yDomain: number[]\r\n}\r\n\r\nconst SvgContainer:React.FC<Props> = ({\r\n    // data,\r\n    xDomain,\r\n    yDomain,\r\n    children\r\n}) => {\r\n\r\n    const windowSize = useWindowSize();\r\n\r\n    const containerRef = useRef<HTMLDivElement>();\r\n    const dimensionRef = useRef<Dimension>();\r\n\r\n    const [ svgContainerData, setSvgContainerData ] = React.useState<SvgContainerData>();\r\n\r\n    const [ scales, setScales ] =  React.useState<Scales>();\r\n\r\n    const init = ()=>{\r\n\r\n        const container = containerRef.current;\r\n        const width = container.offsetWidth - margin.left - margin.right;\r\n        const height = container.offsetHeight - margin.top - margin.bottom;\r\n\r\n        dimensionRef.current = {\r\n            height,\r\n            width\r\n        };\r\n\r\n        select(container)\r\n            .append(\"svg\")\r\n                .attr(\"width\", '100%')\r\n                .attr(\"height\", height + margin.top + margin.bottom)\r\n            .append(\"g\")\r\n                .attr(\r\n                    \"transform\", \r\n                    `translate(${margin.left}, ${margin.top})`\r\n                );\r\n        \r\n        const svgSelector = select(container)\r\n            .select<SVGElement>('svg');\r\n\r\n        const svg = svgSelector.node();\r\n\r\n        const g = svgSelector\r\n            .select<SVGGElement>('g')\r\n            .node();\r\n\r\n        const xScale = scaleBand<string>()\r\n            .paddingInner(0.2)\r\n            .range([0, width])\r\n            .domain(xDomain)\r\n\r\n        const yScale = scaleLinear()\r\n            .range([height, 0])\r\n            .domain(yDomain).nice();\r\n\r\n        setSvgContainerData({\r\n            svg,\r\n            g,\r\n            margin,\r\n            dimension: dimensionRef.current\r\n        });\r\n\r\n        setScales({\r\n            x: xScale,\r\n            y: yScale\r\n        });\r\n        \r\n    };\r\n\r\n    const scalesOnUpdateEndHandler = ()=>{\r\n        setScales(scales=>{\r\n            return {\r\n                ...scales,\r\n                // change last update time so the children components know scales have changed\r\n                lastUpdateTime: new Date()\r\n            }\r\n        });\r\n    };\r\n\r\n    const resizeHandler = ()=>{\r\n\r\n        const container = containerRef.current;\r\n\r\n        if(!container || !svgContainerData || !scales){\r\n            return;\r\n        }\r\n\r\n        // const { svg } = svgContainerData;\r\n        const { x } = scales;\r\n\r\n        // const newContainerWidth = window.innerWidth - 720;\r\n        const newWidth = container.offsetWidth - margin.left - margin.right;\r\n\r\n        dimensionRef.current.width = newWidth;\r\n\r\n        x.range([0, newWidth ]);\r\n\r\n        scalesOnUpdateEndHandler();\r\n    }\r\n\r\n    useEffect(()=>{\r\n        init();\r\n    }, []);\r\n\r\n    useEffect(()=>{\r\n\r\n        if( scales && yDomain ){\r\n            scales.y.domain(yDomain).nice();\r\n            scalesOnUpdateEndHandler();\r\n        }\r\n\r\n    }, [ yDomain ]);\r\n\r\n    React.useEffect(()=>{\r\n        resizeHandler();\r\n    }, [ windowSize ]);\r\n\r\n    return (\r\n        <>\r\n            <div \r\n                ref={containerRef}\r\n                style={{\r\n                    'position': 'relative',\r\n                    'width': '100%',\r\n                    'height': '100%'\r\n                }}\r\n            ></div>\r\n            {   \r\n                React.Children.map(children, (child)=>{\r\n                    return React.cloneElement(child as React.ReactElement<any>, {\r\n                        svgContainerData,\r\n                        scales\r\n                    });\r\n                })  \r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default SvgContainer\r\n","// import './Axis.scss';\r\nimport React from 'react';\r\nimport { numberFns } from 'helper-toolkit-ts'\r\n\r\nimport { \r\n    select,\r\n    axisBottom,\r\n    axisLeft,\r\n    scaleTime,\r\n    timeFormat\r\n} from 'd3';\r\n\r\nimport {\r\n    Scales,\r\n    SvgContainerData\r\n} from './SvgContainer';\r\n\r\ninterface Props {\r\n    svgContainerData?: SvgContainerData;\r\n    scales?: Scales;\r\n};\r\n\r\nconst formatTime = timeFormat(\"%b\");\r\n\r\nconst Axis:React.FC<Props> = ({\r\n    svgContainerData,\r\n    scales\r\n})=>{\r\n\r\n    const drawXAxis = ()=>{\r\n\r\n        const { dimension, g } = svgContainerData;\r\n\r\n        const { height, width } = dimension;\r\n\r\n        const mainGroup = select(g);\r\n\r\n        const { x } = scales;\r\n\r\n        const domain = x.domain();\r\n        const startDateParts = domain[0].split('-').map(d=>+d);\r\n        const startDate = new Date(startDateParts[0], startDateParts[1] - 1, startDateParts[2]);\r\n\r\n        const endDateParts = domain[domain.length - 1].split('-').map(d=>+d);\r\n        const endDate = new Date(endDateParts[0], endDateParts[1] - 1, endDateParts[2]);\r\n        \r\n        const xScale = scaleTime()\r\n            .range([0, width])\r\n            .domain([startDate, endDate])\r\n\r\n        const xAxis = axisBottom(xScale)\r\n            // .ticks(timeMonth)\r\n            .tickFormat((date:Date)=>{\r\n                return formatTime(date);\r\n            })\r\n            // .tickValues(d=>{})\r\n            // .tickSizeInner(-(height))\r\n            // .tickPadding(9)\r\n\r\n        const xAxisLabel = mainGroup.selectAll('.x.axis');\r\n\r\n        if (!xAxisLabel.size()) {\r\n            mainGroup\r\n                .append('g')\r\n                .attr('class', 'x axis')\r\n                .attr('transform', 'translate(0,' + height  + ')')\r\n                .call(xAxis);\r\n        } else {\r\n            xAxisLabel\r\n                .attr('transform', 'translate(0,' + height + ')')\r\n                .call(xAxis);\r\n        }\r\n\r\n    };\r\n\r\n    const drawYAxis = ()=>{\r\n\r\n        const { g, dimension } = svgContainerData;\r\n\r\n        const { width } = dimension;\r\n\r\n        const { y } = scales;\r\n\r\n        const mainGroup = select(g);\r\n\r\n        const yAxis = axisLeft(y)\r\n            .ticks(3)\r\n            .tickSizeInner(-(width))\r\n            .tickPadding(5)\r\n            .tickFormat(num=>{\r\n                return numberFns.abbreviateNumber(+num, 0)\r\n            })\r\n\r\n        const yAxisLabel = mainGroup.selectAll('.y.axis');\r\n\r\n        if (!yAxisLabel.size()) {\r\n            mainGroup\r\n                .append('g')\r\n                .attr('class', 'y axis')\r\n                .call(yAxis);\r\n        } else {\r\n            yAxisLabel.call(yAxis);\r\n        }\r\n    };\r\n\r\n    React.useEffect(()=>{\r\n\r\n        if( svgContainerData && scales ){\r\n            drawXAxis();\r\n            drawYAxis();\r\n        }\r\n\r\n    }, [ svgContainerData, scales ]);\r\n\r\n    return null;\r\n};\r\n\r\nexport default Axis;","import React from 'react';\r\nimport { select } from 'd3';\r\nimport { generate } from 'shortid';\r\n\r\nimport {\r\n    Scales,\r\n    SvgContainerData\r\n} from './SvgContainer';\r\n\r\nimport {\r\n    ChartDataItem\r\n} from './ChartPanel';\r\n\r\nconst BarRectGroupClassName = `bar-rect-group-${generate()}`;\r\nconst BarRectClassName = `bar-rect-${generate()}`;\r\n\r\ntype Props = {\r\n    svgContainerData?: SvgContainerData;\r\n    scales?: Scales;\r\n};\r\n\r\ntype BarProps = {\r\n    data: ChartDataItem[],\r\n    fillColor: string;\r\n} & Props;\r\n\r\nconst Bar:React.FC<BarProps> = ({\r\n    data,\r\n    fillColor,\r\n    svgContainerData,\r\n    scales\r\n})=>{\r\n\r\n    const containerG = React.useRef<SVGGElement>();\r\n\r\n    const initContainer = ()=>{\r\n        const { g } = svgContainerData;\r\n\r\n        containerG.current = select(g)\r\n            .append('g')\r\n            .node();\r\n    };\r\n\r\n    const draw = ()=>{\r\n\r\n        const { dimension } = svgContainerData;\r\n\r\n        const { height } = dimension;\r\n\r\n        const { x, y } = scales;\r\n\r\n        remove();\r\n\r\n        select(containerG.current)\r\n            .append('g')\r\n            .attr('class', BarRectGroupClassName)\r\n            // .attr(\"clip-path\", `url(#${clipPathId})`)\r\n            .selectAll(`.${BarRectClassName}`)\r\n                .data(data)\r\n            .enter().append(\"rect\")\r\n                .attr(\"class\", BarRectClassName)\r\n                .style('fill', fillColor)\r\n                .attr(\"x\", d=>x(d.x))\r\n                .attr(\"width\", x.bandwidth() )\r\n                .attr(\"y\", d=>y(d.y))\r\n                .attr(\"height\", (d)=>{\r\n                    return height - y(d.y)\r\n                })\r\n                \r\n    };\r\n\r\n    const remove = ()=>{\r\n\r\n        const existingBars = select(containerG.current)\r\n            .selectAll(`.${BarRectGroupClassName}`);\r\n\r\n        if (existingBars.size()) {\r\n            existingBars.remove()\r\n        }\r\n    };\r\n\r\n    React.useEffect(()=>{\r\n        if( svgContainerData){\r\n            initContainer();\r\n        }\r\n    }, [ svgContainerData ]);\r\n\r\n    React.useEffect(()=>{\r\n        if( svgContainerData && scales && data ){\r\n            draw();\r\n        }\r\n    }, [ scales, data ]);\r\n\r\n    return null;\r\n};\r\n\r\nexport default Bar;","import React from 'react';\r\nimport { generate } from 'shortid';\r\nimport { \r\n    select,\r\n    line,\r\n    curveMonotoneX\r\n} from 'd3';\r\n\r\nimport {\r\n    Scales,\r\n    SvgContainerData,\r\n} from './SvgContainer';\r\n\r\nimport {\r\n    ChartDataItem\r\n} from './ChartPanel';\r\n\r\ntype Props = {\r\n    svgContainerData?: SvgContainerData;\r\n    scales?: Scales;\r\n};\r\n\r\ntype LineProps = {\r\n    data: ChartDataItem[];\r\n    strokeColor: string;\r\n} & Props;\r\n\r\nconst LinePathClassName = `line-${generate()}`;\r\n\r\nconst Line:React.FC<LineProps> = ({\r\n    data,\r\n    strokeColor,\r\n    svgContainerData,\r\n    scales\r\n})=>{\r\n\r\n    const containerG = React.useRef<SVGGElement>();\r\n\r\n    const initContainer = ()=>{\r\n        const { g } = svgContainerData;\r\n\r\n        containerG.current = select(g)\r\n            .append('g')\r\n            .node();\r\n    };\r\n\r\n    const draw = ()=>{\r\n\r\n        const containerGroup = select(containerG.current);\r\n\r\n        const { x, y } = scales;\r\n\r\n        const xOffset = x.bandwidth() / 2;\r\n\r\n        const valueline = line<ChartDataItem>()\r\n            // .curve(curveMonotoneX)\r\n            .x(d=>x(d.x) + xOffset)\r\n            .y(d=>y(d.y));\r\n\r\n        remove();\r\n\r\n        containerGroup.append(\"path\")\r\n            .data([data])\r\n            .attr(\"class\", LinePathClassName)\r\n            .attr(\"d\", valueline)\r\n            .style('fill', 'none')\r\n            .style('stroke', strokeColor)\r\n            .style('stroke-width', 2);\r\n    };\r\n\r\n    const remove = ()=>{\r\n\r\n        const lines = select(containerG.current).selectAll(`.${LinePathClassName}`);\r\n        \r\n        // check the number of existing lines, if greater than 0; remove all existing ones\r\n        if(lines.size()){\r\n            lines.remove().exit();\r\n        }\r\n    };\r\n\r\n    React.useEffect(()=>{\r\n        if( svgContainerData){\r\n            initContainer();\r\n        }\r\n    }, [ svgContainerData ]);\r\n\r\n    React.useEffect(()=>{\r\n        if( svgContainerData && scales && data ){\r\n            draw();\r\n        }\r\n    }, [ scales, data ]);\r\n\r\n    return null;\r\n};\r\n\r\nexport default Line;","import React, {\r\n    useEffect\r\n} from 'react';\r\n\r\nimport { \r\n    select,\r\n    mouse\r\n} from 'd3';\r\n\r\nimport {\r\n    Scales,\r\n    SvgContainerData\r\n} from './SvgContainer';\r\n\r\nimport {\r\n    Covid19CasesByTimeFeature\r\n} from 'covid19-trend-map';\r\n\r\ninterface Props {\r\n    data: Covid19CasesByTimeFeature[]\r\n    svgContainerData?: SvgContainerData;\r\n    scales?: Scales;\r\n\r\n    onHover?: (item:Covid19CasesByTimeFeature)=>void;\r\n};\r\n\r\nconst VerticalRefLineClassName = 'vertical-ref-line'\r\n\r\nconst MouseEventsRect:React.FC<Props> = ({\r\n    data,\r\n    svgContainerData,\r\n    scales,\r\n\r\n    onHover\r\n}) => {\r\n\r\n    const containerG = React.useRef<SVGGElement>();\r\n\r\n    const itemOnHover = React.useRef<Covid19CasesByTimeFeature>();\r\n\r\n    const init = ()=>{\r\n\r\n        const { g, dimension } = svgContainerData;\r\n\r\n        const { height, width } = dimension;\r\n\r\n        containerG.current = select(g)\r\n            .append('g')\r\n            .node();\r\n        \r\n        const container = select(containerG.current);\r\n\r\n        container.append('line')\r\n            .attr('class', VerticalRefLineClassName)\r\n            .attr('x1', 0)\r\n            .attr('y1', 0)\r\n            .attr('x2', 0)\r\n            .attr('y2', height)\r\n            .style(\"opacity\", 0)\r\n            .attr('stroke-width', 0.5)\r\n            .attr(\"stroke\", \"rgba(255,255,255,.75)\")\r\n            .style(\"fill\", \"none\");\r\n\r\n        container.append(\"rect\")\r\n            // .attr(\"class\", ClassNames.BackgroundRect)\r\n            .attr(\"width\", width)\r\n            .attr(\"height\", height)\r\n            .attr('fill', 'rgba(0,0,0,0)')\r\n            .on(\"mouseleave\", ()=>{\r\n                setItemOnHover(null);\r\n            })\r\n            .on(\"mousemove\", function(){\r\n                const mousePosX = mouse(this)[0];\r\n                setItemOnHover(getItemByMousePos(mousePosX));\r\n            });\r\n    };\r\n\r\n    const setItemOnHover = (item?:Covid19CasesByTimeFeature)=>{\r\n        itemOnHover.current = item;\r\n        updateVerticalRefLinePos();\r\n        onHover(item);\r\n    };\r\n\r\n    const updateVerticalRefLinePos = ():void=>{\r\n\r\n        const { x } = scales;\r\n\r\n        const item = itemOnHover.current;\r\n\r\n        const vRefLine = select(containerG.current)\r\n            .select(`.${VerticalRefLineClassName}`);\r\n\r\n        const xPos = item ? \r\n            x(item.attributes.dt) +  x.bandwidth() / 2\r\n            : 0;\r\n\r\n        const opacity = item ? 1 : 0;\r\n\r\n        vRefLine\r\n            .attr('x1', xPos)\r\n            .attr('x2', xPos)\r\n            .style('opacity', opacity);\r\n    };\r\n\r\n    const getItemByMousePos = (mousePosX:number):Covid19CasesByTimeFeature=>{\r\n\r\n        let itemIndex = -1;\r\n        const { x } = scales;\r\n\r\n        for(let i = 0, len = data.length; i < len; i++){\r\n\r\n            const currItem = data[i];\r\n            const currItemPos = x(currItem.attributes.dt);\r\n\r\n            const nextItemIndex = data[i + 1] ? i + 1 : i;\r\n            const nextItem = data[nextItemIndex];\r\n            const nextItemPos = x(nextItem.attributes.dt);\r\n\r\n            if(mousePosX >= currItemPos && mousePosX <= nextItemPos){\r\n\r\n                const distToCurrItem = Math.abs(mousePosX - currItemPos);\r\n                const distToNextItem = Math.abs(mousePosX - nextItemPos);\r\n\r\n                itemIndex = distToCurrItem < distToNextItem ? i : nextItemIndex;\r\n\r\n                break;\r\n            }\r\n        }\r\n\r\n        return data[itemIndex];\r\n    };\r\n\r\n    useEffect(()=>{\r\n\r\n        if( svgContainerData && data.length ){\r\n            init();\r\n        }\r\n\r\n    }, [ svgContainerData, data ]);\r\n\r\n    useEffect(()=>{\r\n\r\n        if( svgContainerData && scales ){\r\n\r\n            const { dimension } = svgContainerData;\r\n            const { width } = dimension;\r\n\r\n            select(containerG.current)\r\n                .select('rect')\r\n                .attr('width', width);\r\n        }\r\n\r\n    }, [ scales ]);\r\n\r\n    return null;\r\n}\r\n\r\nexport default MouseEventsRect\r\n","import React, {\r\n    useEffect\r\n} from 'react';\r\n\r\nimport {\r\n    Scales,\r\n    SvgContainerData\r\n} from './SvgContainer';\r\n\r\nimport {\r\n    Covid19CasesByTimeFeature\r\n} from 'covid19-trend-map';\r\n\r\nimport { numberFns } from 'helper-toolkit-ts';\r\nimport { ThemeStyle } from '../../AppConfig';\r\n\r\ntype TooltipPos = {\r\n    top: number;\r\n    left: number;\r\n};\r\n\r\ntype Props = {\r\n    svgContainerData?: SvgContainerData;\r\n    scales?: Scales;\r\n    data: Covid19CasesByTimeFeature;\r\n};\r\n\r\nconst Tooltip:React.FC<Props> = ({\r\n    svgContainerData,\r\n    scales,\r\n    data\r\n}) => {\r\n\r\n    const tooltipRef = React.useRef<HTMLDivElement>();\r\n\r\n    const [ tooltipPos, setTooltipPos ] = React.useState<TooltipPos>({ top: 0, left: 0});\r\n\r\n    const updateTooltipPosition = ()=>{\r\n\r\n        const tooltipDiv = tooltipRef.current;\r\n\r\n        if(!tooltipDiv){\r\n            return;\r\n        };\r\n\r\n        const { dimension, margin } = svgContainerData;\r\n\r\n        const { width } = dimension;\r\n\r\n        const { x, y } = scales;\r\n\r\n        const tooltipDivWidth = tooltipDiv.offsetWidth;\r\n        const tooltipDivHeight = tooltipDiv.offsetHeight;\r\n\r\n        const top = -((tooltipDivHeight / 2 ) - margin.top);\r\n        const xPosForItemOnHover = x(data.attributes.dt) + margin.left;\r\n\r\n        let left = ( xPosForItemOnHover + (tooltipDivWidth / 2) ) >= (width + margin.left) \r\n            ? (xPosForItemOnHover - tooltipDivWidth) \r\n            : (xPosForItemOnHover - tooltipDivWidth / 2) ;\r\n\r\n        left = left >= margin.left ? left : margin.left;\r\n\r\n        setTooltipPos({\r\n            top,\r\n            left\r\n        });\r\n    };\r\n\r\n    const getTooltip = ():JSX.Element=>{\r\n\r\n        const { top, left } = tooltipPos;\r\n\r\n        const { attributes } = data;\r\n\r\n        const {\r\n            dt,\r\n            Confirmed,\r\n            Deaths,\r\n            NewCases,\r\n            Population\r\n        } = attributes;\r\n\r\n        const newCases = numberFns.numberWithCommas(NewCases);\r\n        const confirmed = numberFns.numberWithCommas(Confirmed);\r\n        const deaths = numberFns.numberWithCommas(Deaths);\r\n\r\n        return (\r\n            <div\r\n                ref={tooltipRef}\r\n                style={{\r\n                    'position': 'absolute',\r\n                    'left': `${left}px`,\r\n                    'top': `${top}px`,\r\n                    'padding': '7px 10px',\r\n                    'background': ThemeStyle[\"theme-color-khaki-bright\"],\r\n                    'color': '#fff',\r\n                    // 'width': '300px',\r\n                    'pointerEvents': 'none',\r\n                    'boxSizing': 'border-box',\r\n                    'boxShadow': `0 0 10px 2px ${ThemeStyle[\"floating-panel-box-shadow\"]}`\r\n                }}\r\n            >\r\n                <div className='font-size--3 avenir-demi'>\r\n                    <span className='text-theme-color-khaki'>{dt}</span>\r\n                </div>\r\n\r\n                <div className='font-size--2 avenir-bold'>\r\n\r\n                    <div>\r\n                        <span className='text-theme-color-khaki'>new cases: <span className='text-theme-color-red'>{newCases}</span></span>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <span className='text-theme-color-khaki'>cumulative cases: <span className='text-theme-color-red'>{confirmed}</span></span>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <span className='text-theme-color-khaki'>cumulative deaths: <span className='text-theme-color-red'>{deaths}</span></span>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n    useEffect(()=>{\r\n        updateTooltipPosition();\r\n    }, [ data ])\r\n\r\n    return data \r\n        ? getTooltip() \r\n        : null;\r\n}\r\n\r\nexport default Tooltip\r\n","import React, {\r\n    useState\r\n} from 'react'\r\n\r\nimport {\r\n    Covid19TrendName,\r\n    Covid19CasesByTimeFeature\r\n} from 'covid19-trend-map';\r\n\r\nimport SvgContainer from './SvgContainer';\r\nimport Axis from './Axis';\r\nimport Bar from './Bars';\r\nimport Line from './Line';\r\nimport MouseEventsRect from './MouseEventsRect';\r\nimport Tooltip from './Tooltip';\r\n\r\nimport {\r\n    max\r\n} from 'd3';\r\n\r\nimport { ThemeStyle } from '../../AppConfig';\r\n\r\ntype Props = {\r\n    activeTrend: Covid19TrendName;\r\n    data: Covid19CasesByTimeFeature[]\r\n}\r\n\r\nexport type ChartDataItem = {\r\n    x: string;\r\n    y: number;\r\n}\r\n\r\n// field names for Covid19CasesByTime Features\r\nexport const FieldNameByActiveTrend:{ [ key in Covid19TrendName]: string } = {\r\n    'new-cases': 'NewCases',\r\n    'death': 'Deaths',\r\n    'confirmed': 'Confirmed'\r\n}\r\n\r\nconst ChartPanel:React.FC<Props> = ({\r\n    activeTrend,\r\n    data\r\n}) => {\r\n\r\n    const fieldName = FieldNameByActiveTrend[activeTrend];\r\n\r\n    // if true, convert numbers from Covid19CasesByTimeFeature into number per 100K people\r\n    const [ showNormalizedValues, setShowNormalizedValues ] = useState<boolean>(false);\r\n\r\n    const [ itemOnHover, setItemOnHover ] = useState<Covid19CasesByTimeFeature>();\r\n\r\n    const getXDomain = ()=>{\r\n        const xDomain = data.map(d=>d.attributes.dt);\r\n        return xDomain\r\n    };\r\n\r\n    const getYDomain = ()=>{\r\n        const values = data.map(d=>{\r\n            return showNormalizedValues \r\n                ? Math.round(d.attributes[fieldName] / d.attributes.Population * 100000 )\r\n                : d.attributes[fieldName] \r\n        });\r\n        const yMax = max(values) || 1;\r\n        const yDomain = [ 0, yMax ];\r\n        return yDomain;\r\n    }\r\n\r\n    const getDataForBars = ():ChartDataItem[] =>{\r\n        if(!data || !data.length){\r\n            return [];\r\n        }\r\n\r\n        return data.map(d=>{\r\n\r\n            const y = showNormalizedValues\r\n                ? Math.round(d.attributes[fieldName] / d.attributes.Population * 100000)\r\n                : d.attributes[fieldName] \r\n\r\n            return {\r\n                x: d.attributes.dt, \r\n                y\r\n            }\r\n        });\r\n    };\r\n\r\n    const getDataForLine = ():ChartDataItem[] =>{\r\n        \r\n        if(!data || !data.length || activeTrend !== 'new-cases'){\r\n            return [];\r\n        }\r\n\r\n        const values:ChartDataItem[]  = [];\r\n\r\n        for(let i = data.length - 1; i > 0; i--){\r\n\r\n            const feature = data[i];\r\n            \r\n            const x = feature.attributes.dt;\r\n\r\n            let sum = 0;\r\n            const startIndex = i - 6 >= 0 ? i - 6 : 0;\r\n            const endIndex = i + 1;\r\n\r\n            const featuresInPastWeek = data\r\n                .slice(startIndex, endIndex);\r\n\r\n            featuresInPastWeek.forEach(d=>sum += d.attributes[fieldName]);\r\n\r\n            let y = (sum / featuresInPastWeek.length);\r\n\r\n            if(showNormalizedValues){\r\n                y = ( y / feature.attributes.Population * 100000)\r\n            }\r\n\r\n            y = Math.round(y);\r\n\r\n            y = y < 0 ? 0 : y;\r\n\r\n            values.push({\r\n                x,\r\n                y\r\n            })\r\n        }\r\n\r\n        return values;\r\n    }\r\n\r\n    return data && data.length ? (\r\n        <div\r\n            style={{\r\n                'width': '100%',\r\n                'height': '170px',\r\n                'backgroundColor': ThemeStyle[\"theme-color-khaki-bright\"]\r\n            }}\r\n        >\r\n            <SvgContainer\r\n                xDomain={getXDomain()}\r\n                yDomain={getYDomain()}\r\n            >\r\n\r\n                <Axis />\r\n\r\n                <Bar \r\n                    fillColor={ThemeStyle[\"theme-color-khaki-dark\"]}\r\n                    data={getDataForBars()}\r\n                />\r\n\r\n                <Line \r\n                    strokeColor={ThemeStyle[\"theme-color-red\"]}\r\n                    data={getDataForLine()}\r\n                />\r\n\r\n                <Tooltip \r\n                    data={itemOnHover}\r\n                />\r\n\r\n                <MouseEventsRect \r\n                    data={data}\r\n                    onHover={setItemOnHover}\r\n                />\r\n\r\n            </SvgContainer>\r\n\r\n        </div>\r\n    \r\n    ) : null\r\n}\r\n\r\nexport default ChartPanel;","import React from 'react'\r\nimport { ThemeStyle } from '../../AppConfig'\r\n\r\nconst BottomPanel:React.FC = ({\r\n    children\r\n}) => {\r\n    return (\r\n        <div\r\n            style={{\r\n                'position': 'absolute',\r\n                'left': '15px',\r\n                'right': '15px',\r\n                'bottom': '25px',\r\n                // 'width': '100%',\r\n                // 'padding': '1rem 1rem 1.5rem',\r\n                'boxSizing': 'border-box',\r\n                'boxShadow': `0 0 10px 2px ${ThemeStyle[\"floating-panel-box-shadow\"]}`,\r\n                'backgroundColor': ThemeStyle[\"theme-color-khaki-bright\"]\r\n            }}\r\n        >\r\n            { children }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BottomPanel\r\n","import React from 'react'\r\nimport { ThemeStyle } from '../../AppConfig'\r\nimport { Covid19CasesByTimeFeature } from 'covid19-trend-map';\r\nimport { numberFns } from 'helper-toolkit-ts';\r\nimport { parse, getISODay, format } from 'date-fns';\r\n\r\ntype Props = {\r\n    locationName?: string;\r\n    data: Covid19CasesByTimeFeature[];\r\n    isMobile?: boolean;\r\n    closeBtnOnClick: ()=>void;\r\n};\r\n\r\nconst SummaryInfoPanel:React.FC<Props> = ({\r\n    locationName,\r\n    data,\r\n    isMobile = false,\r\n    closeBtnOnClick\r\n}) => {\r\n\r\n    const getBiggestWeeklyIncrease = ()=>{\r\n\r\n        let featureWithBiggestWeeklyIncrease = data[0];\r\n        let biggestWeeklyIncrease = Number.NEGATIVE_INFINITY;\r\n\r\n        const dateForFirstFeature = parse(data[0].attributes.dt, 'yyyy-MM-dd', new Date())\r\n\r\n        let dayForFirstFeature = getISODay(dateForFirstFeature);\r\n\r\n        for( let i = 0, len= data.length; i < len; i++){\r\n\r\n            let dayOfWeek = ( i % 7 ) + dayForFirstFeature;\r\n\r\n            dayOfWeek = dayOfWeek > 7 ? dayOfWeek - 7 : dayOfWeek;\r\n\r\n            if(dayOfWeek === 1){\r\n                const { Confirmed } = data[i].attributes;\r\n\r\n                const feature7DaysAgo = i - 6 >= 0 \r\n                    ? data[i-6] \r\n                    : data[0];\r\n                \r\n                const weeklyIncrease = Confirmed - feature7DaysAgo.attributes.Confirmed;\r\n\r\n                if(weeklyIncrease > biggestWeeklyIncrease){\r\n                    biggestWeeklyIncrease = weeklyIncrease;\r\n                    featureWithBiggestWeeklyIncrease = data[i];\r\n                }\r\n            }\r\n        }\r\n\r\n        const dateWithBiggestWeeklyIncrease = parse(featureWithBiggestWeeklyIncrease.attributes.dt, 'yyyy-MM-dd', new Date())\r\n\r\n        return format(dateWithBiggestWeeklyIncrease, 'MMMM dd, yyyy');\r\n    };\r\n\r\n    const getSummaryInfo = ()=>{\r\n        const feature7DaysAgo = data[data.length - 7]\r\n        const latestFeature = data[data.length - 1];\r\n\r\n        const cumulativeCases = numberFns.numberWithCommas(latestFeature.attributes.Confirmed);\r\n        const cumulativeDeaths = numberFns.numberWithCommas(latestFeature.attributes.Deaths);\r\n\r\n        const newCasesThisWeek = numberFns.numberWithCommas(latestFeature.attributes.Confirmed - feature7DaysAgo.attributes.Confirmed);\r\n        const deathsThisWeek = numberFns.numberWithCommas(latestFeature.attributes.Deaths - feature7DaysAgo.attributes.Deaths);\r\n\r\n        const population = numberFns.numberWithCommas(latestFeature.attributes.Population);\r\n\r\n        return (\r\n            <div\r\n                className='font-size--2 avenir-bold text-theme-color-khaki'\r\n                style={{\r\n                    'display': isMobile ? 'block' : 'flex',\r\n                    'alignItems': 'center',\r\n                    'padding': `0 ${isMobile ? '0' : '1rem' }`\r\n                }}\r\n            >\r\n                <div className='margin-right-1'>\r\n                    <div className='text-theme-color-red'>Biggest Weekly Jump</div>\r\n                    { getBiggestWeeklyIncrease() }\r\n                </div>\r\n\r\n                <div className='margin-right-1'>\r\n                    <span className='text-theme-color-red'>Population</span> { population }\r\n                </div>\r\n\r\n                <div className='margin-right-1'>\r\n                    <span className='text-theme-color-red'>{newCasesThisWeek}</span> new cases and <span className='text-theme-color-red'>{deathsThisWeek}</span> deaths this week\r\n                </div>\r\n\r\n                <div className='margin-right-1'>\r\n                    <span className='text-theme-color-red'>{cumulativeCases}</span> cumulative cases and <span className='text-theme-color-red'>{cumulativeDeaths}</span> deaths\r\n                </div>\r\n            </div>\r\n        )\r\n\r\n    }\r\n\r\n    const getCloseBtnStyleForMobileDevice = ():React.CSSProperties=>{\r\n\r\n        if(!isMobile){\r\n            return null;\r\n        }\r\n\r\n        return {\r\n            'position': 'absolute',\r\n            'top': '.5rem',\r\n            'right': '.5rem'\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                'position': 'relative',\r\n                'width': '100%',\r\n                'padding': '.4rem 1.35rem',\r\n                'display': isMobile ? 'block' : 'flex',\r\n                'alignItems': 'center',\r\n                'boxSizing': 'border-box',\r\n                'backgroundColor': ThemeStyle[\"theme-color-khaki\"],\r\n            }}\r\n        >\r\n            <div\r\n                style={{\r\n                    'color': ThemeStyle[\"theme-color-red\"],\r\n                    'textTransform': 'uppercase'\r\n                }}\r\n            >\r\n                <span className='avenir-bold font-size-2'>{locationName}</span>\r\n            </div>\r\n\r\n            <div\r\n                style={{\r\n                    'flexGrow': 1\r\n                }}\r\n            >\r\n                { getSummaryInfo() }\r\n            </div>\r\n\r\n            <div\r\n                style={{\r\n                    'cursor': 'pointer',\r\n                    ...getCloseBtnStyleForMobileDevice()\r\n                }}\r\n                onClick={closeBtnOnClick}\r\n            >\r\n                <svg \r\n                    viewBox=\"0 0 32 32\" \r\n                    height=\"32\" \r\n                    width=\"32\"\r\n                    fill={ThemeStyle[\"theme-color-khaki-dark\"]}\r\n                >\r\n                    <path d=\"M23.985 8.722L16.707 16l7.278 7.278-.707.707L16 16.707l-7.278 7.278-.707-.707L15.293 16 8.015 8.722l.707-.707L16 15.293l7.278-7.278z\"/>\r\n                    <path fill=\"none\" d=\"M0 0h32v32H0z\"/>\r\n                </svg>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SummaryInfoPanel\r\n","import React, {\r\n    useState,\r\n    useEffect\r\n} from 'react';\r\n\r\nimport { loadModules } from 'esri-loader';\r\nimport IMapView from 'esri/views/MapView';\r\nimport IGraphic from 'esri/Graphic';\r\nimport IGraphicsLayer from 'esri/layers/GraphicsLayer';\r\nimport ISimpleFillSymbol from 'esri/symbols/SimpleFillSymbol';\r\nimport { ThemeStyle } from '../../AppConfig';\r\n\r\ntype Props = {\r\n    queryResult: IGraphic\r\n    mapView?:IMapView;\r\n}\r\n\r\n\r\nconst QueryTaskResultLayer:React.FC<Props> = ({\r\n    queryResult,\r\n    mapView\r\n}) => {\r\n\r\n    const [ graphicLayer, setGraphicLayer ] = useState<IGraphicsLayer>();\r\n\r\n    const init = async()=>{\r\n        type Modules = [\r\n            typeof IGraphicsLayer,\r\n        ];\r\n\r\n        try {\r\n            const [ \r\n                GraphicsLayer\r\n            ] = await (loadModules([\r\n                'esri/layers/GraphicsLayer'\r\n            ]) as Promise<Modules>);\r\n\r\n            const layer = new GraphicsLayer();\r\n\r\n            mapView.map.add(layer);\r\n\r\n            setGraphicLayer(layer);\r\n\r\n        } catch(err){\r\n            console.error(err);\r\n        }\r\n    };\r\n\r\n    const showQueryResult = async()=>{\r\n\r\n        type Modules = [\r\n            typeof ISimpleFillSymbol,\r\n        ];\r\n\r\n        const [ \r\n            SimpleFillSymbol\r\n        ] = await (loadModules([\r\n            'esri/symbols/SimpleFillSymbol'\r\n        ]) as Promise<Modules>);\r\n\r\n        queryResult.symbol = new SimpleFillSymbol({\r\n            color: [0,0,0,0],\r\n            outline: {  // autocasts as new SimpleLineSymbol()\r\n                color: 'rgba(178,165,132,.7)',\r\n                width: 1\r\n            } \r\n        });\r\n\r\n        graphicLayer.add(queryResult)\r\n    }\r\n\r\n    useEffect(()=>{\r\n        if(mapView){\r\n            init();\r\n        }\r\n    }, [mapView]);\r\n\r\n    useEffect(()=>{\r\n        if(graphicLayer){\r\n\r\n            graphicLayer.removeAll();\r\n\r\n            if(queryResult){\r\n                showQueryResult();\r\n            }\r\n            \r\n        }\r\n    }, [queryResult]);\r\n\r\n    return null;\r\n}\r\n\r\nexport default QueryTaskResultLayer\r\n","import axios from 'axios';\r\n\r\nimport {\r\n    Covid19CasesByTimeFeature\r\n} from 'covid19-trend-map';\r\n\r\ntype FetchCovid19DataOptions = {\r\n    countyFIPS?: string;\r\n    stateName?: string;\r\n}\r\n\r\nconst USCountiesCovid19CasesByTimeFeatureServiceURL = 'https://services9.arcgis.com/6Hv9AANartyT7fJW/ArcGIS/rest/services/USCounties_cases_V1/FeatureServer/1';\r\n\r\nconst cachedQueryResults: {\r\n    [key:string]: Covid19CasesByTimeFeature[]\r\n} = {};\r\n\r\nexport const fetchCovid19Data = async({\r\n    countyFIPS,\r\n    stateName\r\n}:FetchCovid19DataOptions):Promise<Covid19CasesByTimeFeature[]>=>{\r\n\r\n    const key4CachedResults = countyFIPS || stateName;\r\n\r\n    if(cachedQueryResults[key4CachedResults]){\r\n        return cachedQueryResults[key4CachedResults];\r\n    }\r\n\r\n    const requestUrl = `${USCountiesCovid19CasesByTimeFeatureServiceURL}/query`;\r\n\r\n    const params = countyFIPS\r\n        ? {\r\n            f: 'json',\r\n            where: `FIPS='${countyFIPS}'`,\r\n            outFields: 'dt,Confirmed,Deaths,NewCases,Population',\r\n            orderByFields: 'dt'\r\n        }\r\n        : {\r\n            f: 'json',\r\n            where: `ST_Name='${stateName}'`,\r\n            outFields: '*',\r\n            orderByFields: 'dt',\r\n            groupByFieldsForStatistics: 'ST_Name,dt',\r\n            outStatistics: JSON.stringify([\r\n                {\r\n                    \"statisticType\": \"sum\",\r\n                    \"onStatisticField\": \"Confirmed\", \r\n                    \"outStatisticFieldName\": \"Confirmed\"\r\n                },\r\n                {\r\n                    \"statisticType\": \"sum\",\r\n                    \"onStatisticField\": \"Deaths\", \r\n                    \"outStatisticFieldName\": \"Deaths\"\r\n                },\r\n                {\r\n                    \"statisticType\": \"sum\",\r\n                    \"onStatisticField\": \"NewCases\",\r\n                    \"outStatisticFieldName\": \"NewCases\"\r\n                },\r\n                {\r\n                    \"statisticType\": \"sum\",\r\n                    \"onStatisticField\": \"Population\",\r\n                    \"outStatisticFieldName\": \"Population\"\r\n                }  \r\n            ])\r\n        };\r\n\r\n    try {\r\n        const { data } = await axios.get(requestUrl, { \r\n            params: new URLSearchParams(params)\r\n        });\r\n\r\n        if(data && data.features){\r\n            // console.log(data.features)\r\n\r\n            cachedQueryResults[key4CachedResults] = data.features;\r\n\r\n            return data.features\r\n        }\r\n\r\n    } catch(err){\r\n        console.error(err);\r\n    }\r\n\r\n    return null;\r\n};","import {\r\n    useState,\r\n    useEffect\r\n} from 'react';\r\nimport { urlFns } from 'helper-toolkit-ts';\r\n\r\nexport type MapCenterLocation = {\r\n    lat: number;\r\n    lon: number;\r\n    zoom: number;\r\n}\r\n\r\nconst SearchParamKeyForMapCenterLoc = '@';\r\n\r\nconst getMapCenterLocationFromUrlSearchParams = ():MapCenterLocation=>{\r\n\r\n    const searchParams = urlFns.parseQuery();\r\n\r\n    if(!searchParams[SearchParamKeyForMapCenterLoc]){\r\n        return null;\r\n    }\r\n\r\n    const values: number[] = searchParams[SearchParamKeyForMapCenterLoc]\r\n        .split(',')\r\n        .map((d:string)=>+d)\r\n\r\n    const [ lon, lat, zoom ] = values\r\n\r\n    return { lon, lat, zoom };\r\n};\r\n\r\nconst useMapCenterLocationFromUrl = () => {\r\n\r\n    const [ locationFromURL, setMapCenterLocation ] = useState<MapCenterLocation>(getMapCenterLocationFromUrlSearchParams());\r\n\r\n    useEffect(()=>{\r\n\r\n        if(!locationFromURL){\r\n            return;\r\n        }\r\n\r\n        const { lon, lat, zoom } = locationFromURL;\r\n\r\n        urlFns.updateQueryParam({\r\n            key: SearchParamKeyForMapCenterLoc,\r\n            value: `${lon},${lat},${zoom}`\r\n        });\r\n\r\n    }, [ locationFromURL ]);\r\n\r\n    return {\r\n        locationFromURL,\r\n        saveLocationInURL: setMapCenterLocation\r\n    }\r\n}\r\n\r\nexport default useMapCenterLocationFromUrl\r\n","import React, {\r\n    useEffect,\r\n    useState\r\n} from 'react';\r\n\r\nimport axios from 'axios';\r\n\r\nimport MapView from '../MapView/MapView';\r\nimport Covid19TrendLayer from '../Covid19TrendLayer/Covid19TrendLayer';\r\nimport QueryTaskLayer from '../QueryTaskLayer/QueryTaskLayer';\r\nimport ControlPanel from '../ControlPanel/ControlPanel';\r\nimport ChartPanel from '../ChartPanel/ChartPanel';\r\nimport BottomPanel from '../BottomPanel/BottomPanel';\r\nimport SummaryInfoPanel from '../SummaryInfoPanel/SummaryInfoPanel';\r\nimport QueryTaskResultLayer from '../QueryTaskResultLayer/QueryTaskResultLayer'; \r\n\r\nimport {\r\n    Covid19TrendName,\r\n    Covid19TrendData,\r\n    Covid19CasesByTimeFeature,\r\n    QueryLocation4Covid19TrendData\r\n} from 'covid19-trend-map';\r\n\r\nimport IGraphic from 'esri/Graphic';\r\n\r\nimport AppConfig from '../../AppConfig';\r\n\r\nimport {\r\n    urlFns, miscFns\r\n} from 'helper-toolkit-ts';\r\n\r\nimport {\r\n    fetchCovid19Data\r\n} from '../../utils/queryCovid19Data';\r\n\r\nimport useMapCenterLocationFromUrl from '../../hooks/useMapLocationFromUrl';\r\n\r\nconst isMobile = miscFns.isMobileDevice();\r\n\r\nconst UrlSearchParams = urlFns.parseQuery();\r\n// console.log(UrlSearchParams.trend)\r\n\r\nconst DefaultTrend:Covid19TrendName = UrlSearchParams.trend;\r\n\r\nconst App = () => {\r\n\r\n    const { locationFromURL, saveLocationInURL } = useMapCenterLocationFromUrl();\r\n\r\n    const [ activeTrend, setActiveTrend ] = useState<Covid19TrendName>(DefaultTrend || 'new-cases');\r\n\r\n    const [ covid19USCountiesData, setCovid19USCountiesData ] = useState<Covid19TrendData[]>();\r\n\r\n    const [ covid19USStatesData, setCovid19USStatesData ] = useState<Covid19TrendData[]>();\r\n\r\n    const [ covid19CasesByTimeQueryResults, setCovid19CasesByTimeQueryResults ] = useState<Covid19CasesByTimeFeature[]>();\r\n\r\n    // user can click map to select US State or County that will be used to query covid19 trend data\r\n    const [ covid19CasesByTimeQueryLocation, setcovid19CasesByTimeQueryLocation ] = useState<QueryLocation4Covid19TrendData>();\r\n\r\n    const fetchData = async()=>{\r\n\r\n        try {\r\n\r\n            const HostUrl = AppConfig[\"static-files-host\"];\r\n            const Url4CountiesJSON = HostUrl + AppConfig[\"covid19-data-us-counties-json\"];\r\n            const Url4StatesJSON = HostUrl + AppConfig[\"covid19-data-us-states-json\"];\r\n\r\n            const queryResUSCounties = await axios.get<Covid19TrendData[]>(Url4CountiesJSON);\r\n            setCovid19USCountiesData(queryResUSCounties.data);\r\n            // console.log(queryResUSCounties)\r\n\r\n            const queryResUSStates = await axios.get<Covid19TrendData[]>(Url4StatesJSON);\r\n            setCovid19USStatesData(queryResUSStates.data);\r\n            // console.log(queryResUSStates)\r\n\r\n        } catch(err){\r\n            console.error(err);\r\n        }\r\n\r\n    };\r\n\r\n    const countyOnSelect = async(countyFeature:IGraphic)=>{\r\n\r\n        setcovid19CasesByTimeQueryLocation({\r\n            graphic: countyFeature,\r\n            locationName:  `${countyFeature.attributes['NAME']} CO, ${countyFeature.attributes['STATE_NAME']}`\r\n        });\r\n\r\n        const data = await fetchCovid19Data({\r\n            countyFIPS: countyFeature.attributes['FIPS']\r\n        });\r\n        setCovid19CasesByTimeQueryResults(data);\r\n    };\r\n\r\n    const stateOnSelect = async(stateFeature:IGraphic)=>{\r\n\r\n        const stateName = stateFeature.attributes['STATE_NAME'];\r\n\r\n        setcovid19CasesByTimeQueryLocation({\r\n            graphic: stateFeature,\r\n            locationName: stateFeature.attributes['STATE_NAME']\r\n        });\r\n\r\n        const data = await fetchCovid19Data({\r\n            stateName\r\n        });\r\n        setCovid19CasesByTimeQueryResults(data);\r\n    };\r\n\r\n    const resetQueryResults = ()=>{\r\n        setCovid19CasesByTimeQueryResults(undefined);\r\n        setcovid19CasesByTimeQueryLocation(undefined)\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchData();\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <MapView \r\n                webmapId={AppConfig[\"webmap-id\"]}\r\n                initialMapCenterLocation={locationFromURL}\r\n                onStationary={saveLocationInURL}\r\n            >\r\n                <QueryTaskResultLayer \r\n                    queryResult={covid19CasesByTimeQueryLocation ? covid19CasesByTimeQueryLocation.graphic : undefined}\r\n                />\r\n\r\n                <Covid19TrendLayer \r\n                    key='US-Counties'\r\n                    features={covid19USCountiesData}\r\n                    activeTrend={activeTrend}\r\n                    size={20}\r\n                    visibleScale={AppConfig[\"us-counties-layer-visible-scale\"]}\r\n                />\r\n\r\n                <Covid19TrendLayer \r\n                    key='US-States'\r\n                    features={covid19USStatesData}\r\n                    activeTrend={activeTrend}\r\n                    size={24}\r\n                    visibleScale={AppConfig[\"us-states-layer-visible-scale\"]}\r\n                />\r\n\r\n                <QueryTaskLayer \r\n                    key='query-4-US-Counties'\r\n                    itemId={AppConfig[\"us-counties-feature-layer-item-id\"]}\r\n                    outFields={['FIPS', 'NAME', 'STATE_NAME']}\r\n                    visibleScale={AppConfig[\"us-counties-layer-visible-scale\"]}\r\n                    onStart={setCovid19CasesByTimeQueryResults.bind(this, undefined)}\r\n                    onSelect={countyOnSelect}\r\n                />\r\n\r\n                <QueryTaskLayer \r\n                    key='query-4-US-States'\r\n                    itemId={AppConfig[\"us-states-feature-layer-item-id\"]}\r\n                    outFields={['STATE_NAME']}\r\n                    visibleScale={AppConfig[\"us-states-layer-visible-scale\"]}\r\n                    onStart={setCovid19CasesByTimeQueryResults.bind(this, undefined)}\r\n                    onSelect={stateOnSelect}\r\n                />\r\n            </MapView>\r\n\r\n            <ControlPanel \r\n                isMobile={isMobile}\r\n                activeTrend={activeTrend}\r\n                activeTrendOnChange={setActiveTrend}\r\n            />\r\n\r\n            {\r\n                covid19CasesByTimeQueryResults ? (\r\n                    <BottomPanel>\r\n\r\n                        <SummaryInfoPanel \r\n                            locationName={covid19CasesByTimeQueryLocation ? covid19CasesByTimeQueryLocation.locationName : undefined }\r\n                            data={covid19CasesByTimeQueryResults}\r\n                            isMobile={isMobile}\r\n                            closeBtnOnClick={resetQueryResults}\r\n                        />\r\n\r\n                        <ChartPanel \r\n                            activeTrend={activeTrend}\r\n                            data={covid19CasesByTimeQueryResults}\r\n                        />\r\n                    </BottomPanel>\r\n                ) : null\r\n            }\r\n\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import './styles/index.scss';\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { setDefaultOptions } from 'esri-loader';\r\n\r\nimport App from './components/App/App';\r\n\r\nsetDefaultOptions({ url: 'https://js.arcgis.com/next/'})\r\n\r\nReactDOM.render(\r\n    <App/>, \r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}