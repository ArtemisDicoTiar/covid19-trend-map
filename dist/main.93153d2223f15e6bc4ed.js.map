{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/store/reducers/Map.ts","webpack:///./src/store/reducers/UI.ts","webpack:///./src/store/reducers/rootReducer.ts","webpack:///./src/store/configureStore.ts","webpack:///./src/components/About/About.tsx","webpack:///./src/hooks/useMapLocationFromUrl.tsx","webpack:///./src/components/MapView/MapView.tsx","webpack:///./src/AppConfig.ts","webpack:///./src/components/Tooltip/Tooltip.tsx","webpack:///./src/components/ChartPanel/SvgContainer.tsx","webpack:///./src/components/ChartPanel/Axis.tsx","webpack:///./src/components/ChartPanel/Bars.tsx","webpack:///./src/components/ChartPanel/Line.tsx","webpack:///./src/components/ChartPanel/MouseEventsRect.tsx","webpack:///./src/components/ChartPanel/Tooltip.tsx","webpack:///./src/components/ChartPanel/ChartPanel.tsx","webpack:///./src/components/BottomPanel/BottomPanel.tsx","webpack:///./src/components/ControlPanel/ControlPanel.tsx","webpack:///./src/components/QueryTaskLayer/QueryTaskLayer.tsx","webpack:///./src/components/SummaryInfoPanel/SummaryInfoPanel.tsx","webpack:///./src/components/Covid19TrendLayer/Covid19TrendLayer.tsx","webpack:///./src/components/QueryTaskResultLayer/QueryTaskResultLayer.tsx","webpack:///./src/components/TrendCategoriesToggle/TrendCategoriesToggle.tsx","webpack:///./src/utils/queryCovid19Data.ts","webpack:///./src/components/App/App.tsx","webpack:///./src/index.tsx"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","0","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","createSlice","initialState","tooltipPosition","tooltipData","isStateLayerVisilbe","reducers","tooltipPositionChanged","state","action","payload","tooltipDataChanged","isStateLayerVisilbeToggled","reducer","actions","tooltipPositionSelector","createSelector","map","tooltipDataSelector","isStateLayerVisilbeSelector","isMobile","miscFns","isMobileDevice","activeTrend","isAboutModalOpen","showTrendCategories","activeTrendUpdated","isAboutModalOpenToggled","showTrendCategoriesToggled","activeTrendSelector","UI","isAboutModalOpenSelector","showTrendCategoriesSelector","isMobileSeletor","combineReducers","mapReducer","UIReducer","store","configureStore","rootReducer","middleware","getDefaultMiddleware","About","dispatch","useDispatch","isOpen","useSelector","useEffect","modal","bus","emit","id","className","data-modal","role","aria-labelledby","onClick","xmlns","viewBox","height","width","target","href","useMapCenterLocationFromUrl","useState","searchParams","urlFns","parseQuery","values","split","lon","lat","zoom","getMapCenterLocationFromUrlSearchParams","locationFromURL","setMapCenterLocation","updateQueryParam","saveLocationInURL","MapView","webmapId","children","mapDivRef","React","useRef","mapView","setMapView","initMapView","a","loadModules","WebMap","center","undefined","view","container","current","portalItem","when","addWatchEvent","whenTrue","centerLocation","latitude","toFixed","longitude","loadCss","style","position","top","left","ref","Children","child","cloneElement","ThemeStyle","TrendColor","Tooltip","containerRef","useWindowSize","tooltipHeight","offsetHeight","y","getYPosition","tooltipWidth","offsetWidth","x","getXPosition","locationName","numberFns","numberWithCommas","weeklyNewCases","confirmed","deaths","TooltipConatiner","margin","right","bottom","SvgContainer","xDomain","yDomain","windowSize","dimensionRef","svgContainerData","setSvgContainerData","scales","setScales","scalesOnUpdateEndHandler","lastUpdateTime","Date","select","append","attr","svgSelector","svg","node","g","xScale","scaleBand","paddingInner","range","domain","yScale","scaleLinear","nice","dimension","init","newWidth","resizeHandler","formatTime","timeFormat","Axis","mainGroup","startDateParts","startDate","endDateParts","endDate","xAxis","xAxisLabel","scaleTime","axisBottom","tickFormat","date","selectAll","size","yAxis","axisLeft","ticks","tickSizeInner","tickPadding","num","abbreviateNumber","yAxisLabel","drawYAxis","BarRectGroupClassName","generate","BarRectClassName","Bar","fillColor","containerG","remove","existingBars","enter","bandwidth","LinePathClassName","Line","strokeColor","lines","exit","containerGroup","xOffset","valueline","line","MouseEventsRect","onHover","itemOnHover","setItemOnHover","item","updateVerticalRefLinePos","vRefLine","xPos","attributes","dt","opacity","getItemByMousePos","mousePosX","itemIndex","len","currItemPos","nextItemIndex","nextItemPos","Math","abs","on","mouse","this","Confirmed","Deaths","NewCases","newCases","tooltipRef","tooltipPos","setTooltipPos","tooltipDiv","tooltipDivWidth","xPosForItemOnHover","updateTooltipPosition","Population","FieldNameByActiveTrend","ChartPanel","fieldName","showNormalizedValues","getDataForLine","feature","sum","startIndex","endIndex","featuresInPastWeek","forEach","round","max","BottomPanel","showLoadingIndicator","SwitchBtnData","label","ControlPanel","fill","QueryTaskLayer","itemId","outFields","visibleScale","onStart","onSelect","pointerOnMove","featureOnHover","layerRef","layerViewRef","mouseMoveDelay","isLayerInVisibleRange","scale","minScale","maxScale","FeatureLayer","layer","min","visible","popupEnabled","add","whenLayerView","then","layerView","initEventListeners","queryFeatures","event","where","geometry","toMap","returnGeometry","results","features","clearTimeout","setTimeout","SummaryInfoPanel","closeBtnOnClick","indexOfLatestFeature","year","month","day","dayOfWeek","getDay","featureOfLastSunday","cumulativeCases","cumulativeDeaths","newCasesThisWeek","deathsThisWeek","population","blockStyle","featureWithBiggestWeeklyIncrease","biggestWeeklyIncrease","Number","NEGATIVE_INFINITY","dateForFirstFeature","parse","dayForFirstFeature","getISODay","weeklyIncrease","dateWithBiggestWeeklyIncrease","format","getBiggestWeeklyIncrease","getSummaryInfo","Covid19TrendLayer","hasTrendCategoriesAttribute","isLayerInVisibleScaleOnChange","trendLayer","setTrendLayer","isLayerInVisibleScale","setIsLayerInVisibleScale","GraphicsLayer","watchUtils","isInVisibleScale","draw","CIMSymbol","Graphic","Point","graphics","pathData","frame","path","color","trendType","symbol","type","symbolLayers","enable","scaleSymbolsProportionally","respectFrame","markerGraphics","paths","addMany","removeAll","QueryTaskResultLayer","queryResult","graphicLayer","setGraphicLayer","showQueryResult","SimpleFillSymbol","outline","LegendData","tooltip","TrendCategoriesToggle","checkboxIcon","legends","title","getTrendCategoriesLegend","cachedQueryResults","fetchCovid19Data","countyFIPS","stateName","key4CachedResults","requestUrl","params","f","orderByFields","groupByFieldsForStatistics","outStatistics","JSON","stringify","axios","URLSearchParams","App","covid19USCountiesData","setCovid19USCountiesData","covid19USStatesData","setCovid19USStatesData","covid19LatestNumbers","setCovid19LatestNumbers","covid19CasesByTimeQueryResults","setCovid19CasesByTimeQueryResults","covid19CasesByTimeQueryLocation","setcovid19CasesByTimeQueryLocation","isLoading","setIsLoading","fetchData","Url4CountiesJSON","HostUrl","AppConfig","Url4StatesJSON","Url4LatestNumbers","queryResUSStates","queryResUSCounties","latestNumbers","countyOnSelect","countyFeature","resetQueryResults","graphic","stateOnSelect","stateFeature","queryOnStartHandler","featureOnHoverHandler","FIPS","latestNumbers4SelectedFeature","isVisible","setDefaultOptions","url","ReactDOM","render","document","getElementById"],"mappings":"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","file":"main.93153d2223f15e6bc4ed.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t0: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([163,1]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import { \r\n    createSlice,\r\n    createSelector,\r\n    // createAsyncThunk\r\n} from '@reduxjs/toolkit';\r\n\r\nimport {\r\n    RootState,\r\n    // StoreDispatch,\r\n    // StoreGetState\r\n} from '../configureStore';\r\n\r\nimport {\r\n    TooltipPosition,\r\n    TooltipData\r\n} from '../../components/Tooltip/Tooltip'\r\n\r\ntype MapState = {\r\n    tooltipPosition: TooltipPosition;\r\n    tooltipData: TooltipData;\r\n    isStateLayerVisilbe: boolean;\r\n}\r\n\r\ntype TooltipPositionChangedAction = {\r\n    type: string;\r\n    payload: TooltipPosition;\r\n}\r\n\r\ntype TooltipDataChangedAction = {\r\n    type: string;\r\n    payload: TooltipData;\r\n}\r\n\r\ntype IsStateLayerVisilbeToggledAction = {\r\n    type: string;\r\n    payload: boolean;\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'map',\r\n    initialState: {\r\n        tooltipPosition: null,\r\n        tooltipData: null,\r\n        isStateLayerVisilbe: true\r\n    } as MapState,\r\n    reducers: {\r\n        tooltipPositionChanged: (state, action:TooltipPositionChangedAction)=>{\r\n            state.tooltipPosition = action.payload;\r\n        },\r\n        tooltipDataChanged: (state, action:TooltipDataChangedAction)=>{\r\n            state.tooltipData = action.payload;\r\n        },\r\n        isStateLayerVisilbeToggled: (state, action:IsStateLayerVisilbeToggledAction)=>{\r\n            state.isStateLayerVisilbe = action.payload;\r\n        }\r\n    }\r\n});\r\n\r\nconst {\r\n    reducer,\r\n} = slice;\r\n\r\nexport const {\r\n    tooltipPositionChanged,\r\n    tooltipDataChanged,\r\n    isStateLayerVisilbeToggled\r\n} = slice.actions;\r\n\r\n// selectors\r\nexport const tooltipPositionSelector = createSelector(\r\n    (state:RootState)=>state.map.tooltipPosition,\r\n    (tooltipPosition)=>tooltipPosition\r\n);\r\n\r\nexport const tooltipDataSelector = createSelector(\r\n    (state:RootState)=>state.map.tooltipData,\r\n    (tooltipData)=>tooltipData\r\n);\r\n\r\nexport const isStateLayerVisilbeSelector = createSelector(\r\n    (state:RootState)=>state.map.isStateLayerVisilbe,\r\n    (isStateLayerVisilbe)=>isStateLayerVisilbe\r\n);\r\n\r\nexport default reducer;\r\n","import { \r\n    createSlice,\r\n    createSelector,\r\n    // createAsyncThunk\r\n} from '@reduxjs/toolkit';\r\n\r\nimport {\r\n    RootState,\r\n    // StoreDispatch,\r\n    // StoreGetState\r\n} from '../configureStore';\r\nimport { Covid19TrendName } from 'covid19-trend-map';\r\n\r\nimport {\r\n    miscFns\r\n} from 'helper-toolkit-ts';\r\n\r\nconst isMobile = miscFns.isMobileDevice();\r\n\r\ntype UIState = {\r\n    isMobile: boolean;\r\n    activeTrend: Covid19TrendName;\r\n    isAboutModalOpen: boolean;\r\n    isLoadingChartData: boolean;\r\n    showTrendCategories: boolean;\r\n}\r\n\r\ntype ActiveTrendUpdatedAction = {\r\n    type: string;\r\n    payload: Covid19TrendName;\r\n}\r\n\r\n// type BooleanPropToggledAction = {\r\n//     type: string;\r\n//     payload: boolean;\r\n// }\r\n\r\nconst slice = createSlice({\r\n    name: 'map',\r\n    initialState: {\r\n        isMobile,\r\n        activeTrend: 'new-cases',\r\n        isAboutModalOpen: false,\r\n        // isLoadingChartData: false,\r\n        showTrendCategories: false\r\n    } as UIState,\r\n    reducers: {\r\n        activeTrendUpdated: (state, action:ActiveTrendUpdatedAction)=>{\r\n            state.activeTrend = action.payload;\r\n        },\r\n        isAboutModalOpenToggled: (state)=>{\r\n            state.isAboutModalOpen = !state.isAboutModalOpen;\r\n        }, \r\n        // isLoadingChartDataToggled: (state)=>{\r\n        //     state.isLoadingChartData = !state.isLoadingChartData;\r\n        // }, \r\n        showTrendCategoriesToggled: (state)=>{\r\n            state.showTrendCategories = !state.showTrendCategories;\r\n        }, \r\n    }\r\n});\r\n\r\nconst {\r\n    reducer,\r\n} = slice;\r\n\r\nexport const {\r\n    activeTrendUpdated,\r\n    isAboutModalOpenToggled,\r\n    // isLoadingChartDataToggled,\r\n    showTrendCategoriesToggled\r\n} = slice.actions;\r\n\r\n// selectors\r\nexport const activeTrendSelector = createSelector(\r\n    (state:RootState)=>state.UI.activeTrend,\r\n    (activeTrend)=>activeTrend\r\n);\r\n\r\nexport const isAboutModalOpenSelector = createSelector(\r\n    (state:RootState)=>state.UI.isAboutModalOpen,\r\n    (isAboutModalOpen)=>isAboutModalOpen\r\n);\r\n\r\n// export const isLoadingChartDataSelector = createSelector(\r\n//     (state:RootState)=>state.UI.isLoadingChartData,\r\n//     (isLoadingChartData)=>isLoadingChartData\r\n// );\r\n\r\nexport const showTrendCategoriesSelector = createSelector(\r\n    (state:RootState)=>state.UI.showTrendCategories,\r\n    (showTrendCategories)=>showTrendCategories\r\n);\r\n\r\nexport const isMobileSeletor = createSelector(\r\n    (state:RootState)=>state.UI.isMobile,\r\n    (isMobile)=>isMobile\r\n);\r\n\r\nexport default reducer;","import { combineReducers } from 'redux';\r\nimport mapReducer from './Map';\r\nimport UIReducer from './UI';\r\n\r\nexport default combineReducers({\r\n    map: mapReducer,\r\n    UI: UIReducer\r\n});","import { \r\n    configureStore, \r\n    getDefaultMiddleware \r\n} from '@reduxjs/toolkit';\r\n\r\nimport rootReducer from './reducers/rootReducer';\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n\r\nconst store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware:[ \r\n        ...getDefaultMiddleware<RootState>()\r\n    ]\r\n});\r\n\r\nexport type StoreDispatch = typeof store.dispatch;\r\n\r\nexport type StoreGetState = typeof store.getState;\r\n\r\nexport default store;\r\n","import './About.scss';\r\nimport React, {\r\n    useEffect\r\n} from 'react';\r\nimport { modal, bus } from 'calcite-web/dist/js/calcite-web.min.js';\r\n\r\nimport {\r\n    useSelector,\r\n    useDispatch\r\n} from 'react-redux';\r\n\r\nimport {\r\n    isAboutModalOpenSelector,\r\n    isAboutModalOpenToggled\r\n} from '../../store/reducers/UI';\r\n\r\nconst ModalID = 'about';\r\n\r\nconst About:React.FC = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const isOpen = useSelector(isAboutModalOpenSelector);\r\n\r\n    const closeBtnOnClicked = ()=>{\r\n        dispatch(isAboutModalOpenToggled())\r\n    }\r\n\r\n    useEffect(()=>{\r\n        modal();\r\n        // bus.emit('modal:open', {id: \"about\"})\r\n    }, [])\r\n\r\n    useEffect(()=>{\r\n\r\n        if(isOpen){\r\n            bus.emit('modal:open', {id: ModalID})\r\n        } else {\r\n            bus.emit('modal:close')\r\n        }\r\n        \r\n    }, [ isOpen ])\r\n\r\n    return (\r\n        <div\r\n            className=\"js-modal modal-overlay about-modal\"\r\n            data-modal={ModalID}\r\n        >\r\n            <div\r\n                className=\"modal-content column-20\"\r\n                role=\"dialog\"\r\n                aria-labelledby=\"modal\"\r\n            >\r\n                <div className='close-btn' onClick={closeBtnOnClicked}>\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" height=\"24\" width=\"24\"><path d=\"M18.01 6.697L12.707 12l5.303 5.303-.707.707L12 12.707 6.697 18.01l-.707-.707L11.293 12 5.99 6.697l.707-.707L12 11.293l5.303-5.303z\"/></svg>\r\n                </div>\r\n\r\n                <div className='block-group block-group-3-up tablet-block-group-1-up phone-block-group-1-up'>\r\n                    <div className='block'>\r\n                        <h4 className='header-red avenir-bold'>WEEKLY CASES</h4>\r\n                        <p>These lines mark the weekly averages of new cases, per 100,000 population, per week—useful for showing the local fluctuations of cases throughout the outbreak. When seen together regional patterns emerge. The Y-axis of these charts are scaled to fit the maximum weekly increase when new cases are greater than 25 per 100,000. Please see the note on the Y-axis below for an explanation.</p>\r\n                    </div>\r\n                    <div className='block'>\r\n                        <h4 className='header-red avenir-bold'>CASES</h4>\r\n                        <p>These lines track the ongoing cumulative number of cases, per 100,000 population, per week. Because it is a cumulative count, the lines will never trend downward, though their rate of increase over time can provide an impression of the local history of the outbreak. An upward-bending line indicates a slow start and rapidly rising outbreak. A generally diagonal line indicates a consistent rate of transmission. An s-shaped line indicates a local “flattening of the curve” associated with a decrease in local cases. A stair-stepped line indicates multiple waves of transmission.</p>\r\n                    </div>\r\n                    <div className='block'>\r\n                        <h4 className='header-red avenir-bold'>DEATHS</h4>\r\n                        <p>These lines track the ongoing cumulative number of deaths, per 100,000 population. Interpretations of these lines is consistent with the description of cases, above. Given the incubation and illness period of the virus, this line will show a similar pattern, though with a lag, compared to cases.</p>\r\n                    </div>\r\n                </div>\r\n\r\n                <div>\r\n                    <h4 className='header-khaki avenir-bold'>ABOUT THE Y-AXIS</h4>\r\n                    <p>Each trend line has a dynamic y-axis such that if the maximum rate of cases exceeds 25 cases per 100,000 population (quite high), then the height is compressed to fit into the rectangular bounds of the chart container. While this prevents a direct comparison between locations, it ensures that areas with very low populations (and therefore highly fluctuating case rates) do not by comparison suppress (to nearly flat) the rates of moderate and high-population areas. This compromise allows for a general visual reference of local trends while specific counts can be accessed when a location is selected.</p>\r\n                </div>\r\n\r\n                <div>\r\n                    <h4 className='header-khaki avenir-bold'>SOURCES</h4>\r\n                    <p>These counts are sourced from the Johns Hopkins University features service of <a target='_blank' href=\"https://services9.arcgis.com/6Hv9AANartyT7fJW/ArcGIS/rest/services\">US County Cases</a> and normalized into rates using <a target='_blank' href=\"https://www.arcgis.com/home/item.html?id=99fd67933e754a1181cc755146be21ca\">state</a> and <a target='_blank' href=\"https://www.arcgis.com/home/item.html?id=7566e0221e5646f99ea249a197116605\">county</a> populations from the US Census Bureau accessed via <a target='_blank' href=\"https://livingatlas.arcgis.com/en/browse/#d=2&amp;q=usa%20population\">Living Atlas</a>. The Khaki basemap is <a target='_blank' href=\"https://livingatlas.arcgis.com/en/browse/#d=2&amp;q=khaki\">available via Living Atlas</a>.</p>\r\n                </div>\r\n\r\n                <div>\r\n                    <h4 className='header-khaki avenir-bold'>CREATORS</h4>\r\n                    <p>This application was created by <a target='_blank' href=\"https://github.com/vannizhang/\">Jinnan Zhang</a> and <a target='_blank' href=\"https://adventuresinmapping.com/\">John Nelson</a>, of Esri, with help from <a target='_blank' href=\"https://github.com/ycabon\">Yann Cabon</a>, inspired by the <a target='_blank' href=\"https://datagistips.hypotheses.org/488\">trend line maps of Mathieu Rajerison</a> and the <a target='_blank' href=\"https://twitter.com/rileydchampine/status/1243552850728411143\">local 1918 flu charts of Riley D. Champine</a>. We are not medical professionals but saw a need for a visual sense of local rates and trends and created this primarily as a resource for ourselves but are making it available to the public in the event that it is a helpful resource for understanding patterns. We make no claims of officiality and share it only as a reference.</p>\r\n                </div>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default About;\r\n","import {\r\n    useState,\r\n    useEffect\r\n} from 'react';\r\nimport { urlFns } from 'helper-toolkit-ts';\r\n\r\nexport type MapCenterLocation = {\r\n    lat: number;\r\n    lon: number;\r\n    zoom: number;\r\n}\r\n\r\nconst SearchParamKeyForMapCenterLoc = '@';\r\n\r\nconst getMapCenterLocationFromUrlSearchParams = ():MapCenterLocation=>{\r\n\r\n    const searchParams = urlFns.parseQuery();\r\n\r\n    if(!searchParams[SearchParamKeyForMapCenterLoc]){\r\n        return null;\r\n    }\r\n\r\n    const values: number[] = searchParams[SearchParamKeyForMapCenterLoc]\r\n        .split(',')\r\n        .map((d:string)=>+d)\r\n\r\n    const [ lon, lat, zoom ] = values\r\n\r\n    return { lon, lat, zoom };\r\n};\r\n\r\nconst useMapCenterLocationFromUrl = () => {\r\n\r\n    const [ locationFromURL, setMapCenterLocation ] = useState<MapCenterLocation>(getMapCenterLocationFromUrlSearchParams());\r\n\r\n    useEffect(()=>{\r\n\r\n        if(!locationFromURL){\r\n            return;\r\n        }\r\n\r\n        const { lon, lat, zoom } = locationFromURL;\r\n\r\n        urlFns.updateQueryParam({\r\n            key: SearchParamKeyForMapCenterLoc,\r\n            value: `${lon},${lat},${zoom}`\r\n        });\r\n\r\n    }, [ locationFromURL ]);\r\n\r\n    return {\r\n        locationFromURL,\r\n        saveLocationInURL: setMapCenterLocation\r\n    }\r\n}\r\n\r\nexport default useMapCenterLocationFromUrl\r\n","import React, {\r\n    useEffect\r\n} from 'react';\r\n\r\nimport { loadModules, loadCss } from 'esri-loader';\r\nimport IMapView from 'esri/views/MapView';\r\nimport IWebMap from \"esri/WebMap\";\r\nimport IwatchUtils from 'esri/core/watchUtils';\r\n\r\nimport useMapCenterLocationFromUrl, {\r\n    MapCenterLocation\r\n} from '../../hooks/useMapLocationFromUrl';\r\n\r\ninterface Props {\r\n    webmapId: string;\r\n};\r\n\r\nconst MapView:React.FC<Props> = ({\r\n    webmapId,\r\n    children\r\n})=>{\r\n    \r\n    const { locationFromURL, saveLocationInURL } = useMapCenterLocationFromUrl();\r\n\r\n    const mapDivRef = React.useRef<HTMLDivElement>();\r\n\r\n    const [ mapView, setMapView] = React.useState<IMapView>(null);\r\n\r\n    const initMapView = async()=>{\r\n  \r\n        type Modules = [typeof IMapView, typeof IWebMap];\r\n\r\n        try {\r\n            const [ \r\n                MapView, \r\n                WebMap \r\n            ] = await (loadModules([\r\n                'esri/views/MapView',\r\n                'esri/WebMap',\r\n            ]) as Promise<Modules>);\r\n\r\n            const { lat, lon, zoom } = locationFromURL || {};\r\n\r\n            const center = lon && lat  ? [ lon, lat ] : undefined;\r\n\r\n            const view = new MapView({\r\n                container: mapDivRef.current,\r\n                center,\r\n                zoom,\r\n                map: new WebMap({\r\n                    portalItem: {\r\n                        id: webmapId\r\n                    }  \r\n                }),\r\n            });\r\n\r\n            view.when(()=>{\r\n                setMapView(view);\r\n            });\r\n\r\n        } catch(err){   \r\n            console.error(err);\r\n        }\r\n    };\r\n\r\n    const addWatchEvent = async()=>{\r\n        type Modules = [typeof IwatchUtils];\r\n\r\n        try {\r\n            const [ \r\n                watchUtils \r\n            ] = await (loadModules([\r\n                'esri/core/watchUtils'\r\n            ]) as Promise<Modules>);\r\n\r\n            watchUtils.whenTrue(mapView, 'stationary', ()=>{\r\n                // console.log('mapview is stationary', mapView.center, mapView.zoom);\r\n\r\n                if(mapView.zoom === -1){\r\n                    return;\r\n                }\r\n\r\n                const centerLocation = {\r\n                    lat: mapView.center && mapView.center.latitude \r\n                        ? +mapView.center.latitude.toFixed(3) \r\n                        : 0,\r\n                    lon: mapView.center && mapView.center.longitude \r\n                        ? +mapView.center.longitude.toFixed(3) \r\n                        : 0,\r\n                    zoom: mapView.zoom\r\n                }\r\n\r\n                saveLocationInURL(centerLocation);\r\n            });\r\n\r\n        } catch(err){   \r\n            console.error(err);\r\n        }\r\n    };\r\n\r\n    useEffect(()=>{\r\n        loadCss();\r\n        initMapView();\r\n    }, []);\r\n\r\n    React.useEffect(()=>{\r\n        if(mapView){\r\n            addWatchEvent();\r\n        }\r\n    }, [ mapView ]);\r\n\r\n    return (\r\n        <>\r\n            <div \r\n                style={{\r\n                    position: 'absolute',\r\n                    top: 0,\r\n                    left: 0,\r\n                    width: '100%',\r\n                    height: '100%',\r\n                }}\r\n                ref={mapDivRef}\r\n            ></div>\r\n            { \r\n                React.Children.map(children, (child)=>{\r\n                    return React.cloneElement(child as React.ReactElement<any>, {\r\n                        mapView,\r\n                    });\r\n                }) \r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MapView;","import {\r\n    COVID19TrendCategoryType\r\n} from 'covid19-trend-map'\r\n\r\nexport default {\r\n    'webmap-id':'1bff921ddf7044c3b5ba34e8494a2073',\r\n    'us-states-feature-layer-item-id': '99fd67933e754a1181cc755146be21ca',\r\n    'us-counties-feature-layer-item-id': '7566e0221e5646f99ea249a197116605',\r\n    'static-files-host': 'https://static.vannizhang.com/covid19/',\r\n    'covid19-data-us-states-json': 'us-states-paths.json',\r\n    'covid19-data-us-counties-json': 'us-counties-paths.json',\r\n    'covid19-latest-numbers-json': 'latest-numbers.json',\r\n    'us-counties-layer-visible-scale': {\r\n        'min': 7500000,\r\n        'max': 0\r\n    },\r\n    'us-states-layer-visible-scale': {\r\n        'min': 73957190,\r\n        'max': 7500001\r\n    }\r\n};\r\n\r\nexport const ThemeStyle = {\r\n    'theme-color-red': '#A10D22',\r\n    'theme-color-khaki': '#E8E2D2',\r\n    'theme-color-khaki-bright': '#EFEADB',\r\n    'floating-panel-box-shadow': '#B1A483',\r\n    'theme-color-khaki-dark': '#B2A584'\r\n};\r\n\r\nexport const TrendColor: Record<COVID19TrendCategoryType, number[]> = {\r\n    'Emergent': [212,158,198,255], //'#D49EC6',\r\n    'Spreading': [165,51,110,255], //'#A5336E',\r\n    'Epidemic': [128,11,76,255], //'#800B4C',\r\n    'Controlled': [147,195,195,255], //'#93C3C3',\r\n    'End Stage': [91,160,168,255], //'#5BA0A8', \r\n    'Zero Cases': [100,100,100,255]\r\n};","import React,{\r\n    useRef\r\n} from 'react';\r\nimport {\r\n    useWindowSize,\r\n} from '@react-hook/window-size';\r\nimport { ThemeStyle } from '../../AppConfig';\r\nimport { numberFns } from'helper-toolkit-ts'\r\n\r\nimport {\r\n    useSelector\r\n} from 'react-redux';\r\n\r\nimport {\r\n    tooltipDataSelector,\r\n    tooltipPositionSelector\r\n} from '../../store/reducers/Map'\r\n\r\nexport type TooltipPosition = {\r\n    x: number;\r\n    y: number;\r\n};\r\n\r\nexport type TooltipData = {\r\n    locationName: string;\r\n    confirmed: number;\r\n    deaths: number;\r\n    weeklyNewCases: number;\r\n}\r\n\r\ntype Props = {\r\n    position: TooltipPosition;\r\n    data: TooltipData\r\n};\r\n\r\n// const TooltipWidth = 200;\r\n// const TooltipHeight = 150;\r\nconst PositionOffset = 10;\r\n\r\nconst Tooltip:React.FC<Props> = ({\r\n    position,\r\n    data\r\n}) => {\r\n\r\n    const containerRef = useRef<HTMLDivElement>()\r\n\r\n    const [ width, height ] = useWindowSize();\r\n    \r\n    const getXPosition = ()=>{\r\n\r\n        if(!position){\r\n            return -99999;\r\n        }\r\n\r\n        const tooltipWidth = containerRef.current \r\n            ? containerRef.current.offsetWidth \r\n            : 200;\r\n\r\n        if(position.x + tooltipWidth > width) {\r\n            return position.x - tooltipWidth - PositionOffset;\r\n        }\r\n\r\n        return position.x + PositionOffset;\r\n    };\r\n\r\n    const getYPosition = ()=>{\r\n\r\n        if(!position){\r\n            return -99999;\r\n        }\r\n\r\n        const tooltipHeight = containerRef.current \r\n            ? containerRef.current.offsetHeight \r\n            : 150;\r\n        \r\n\r\n        if(position.y + tooltipHeight > height) {\r\n            return position.y - tooltipHeight - PositionOffset;\r\n        }\r\n\r\n        return position.y + PositionOffset;\r\n    };\r\n\r\n    return data ? (\r\n        <div\r\n            ref={containerRef}\r\n            style={{\r\n                position: 'absolute',\r\n                'top': getYPosition() + 'px',\r\n                'left': getXPosition() + 'px',\r\n                // 'height': TooltipHeight + 'px',\r\n                // 'width': TooltipWidth + 'px',\r\n                'padding': '7px 15px',\r\n                'background': ThemeStyle[\"theme-color-khaki-bright\"],\r\n                'pointerEvents': 'none',\r\n                'boxSizing': 'border-box',\r\n                'boxShadow': `0 0 10px 2px ${ThemeStyle[\"floating-panel-box-shadow\"]}`,\r\n                'zIndex': 5\r\n            }}\r\n        >\r\n            <div>\r\n                <span className='text-theme-color-red avenir-demi font-size--1'>{ data.locationName }</span>\r\n            </div>\r\n            \r\n            <div className='text-theme-color-khaki avenir-demi font-size--2'>\r\n                <span>\r\n                    <span className='text-theme-color-red'>{numberFns.numberWithCommas(data.weeklyNewCases)}</span> new cases this week\r\n                </span>\r\n                <br/>\r\n\r\n                <span>\r\n                    <span className='text-theme-color-red'>{numberFns.numberWithCommas(data.confirmed)}</span> cumulative cases\r\n                </span>\r\n                <br/>\r\n\r\n                <span>\r\n                    <span className='text-theme-color-red'>{numberFns.numberWithCommas(data.deaths)}</span> deaths\r\n                </span>\r\n\r\n            </div>\r\n        </div>\r\n    ) : null;\r\n}\r\n\r\nconst TooltipConatiner = ()=>{\r\n\r\n    const position = useSelector(tooltipPositionSelector);\r\n    const data = useSelector(tooltipDataSelector);\r\n\r\n    return (\r\n        <Tooltip \r\n            position={position}\r\n            data={data}\r\n        />\r\n    )\r\n}\r\n\r\nexport default TooltipConatiner;\r\n","import React, {\r\n    useRef,\r\n    useEffect\r\n} from 'react';\r\n\r\nimport { \r\n    select,\r\n    scaleBand,\r\n    scaleLinear\r\n} from 'd3';\r\n\r\nimport useWindowSize from '@rehooks/window-size';\r\n\r\nconst margin = {\r\n    top: 15, \r\n    right: 20, \r\n    bottom: 30, \r\n    left: 40\r\n};\r\n\r\ntype Dimension = {\r\n    height: number;\r\n    width: number;\r\n};\r\n\r\nexport type XScale = d3.ScaleBand<string>;\r\nexport type YScale = d3.ScaleLinear<number, number>;\r\n\r\nexport type Scales = {\r\n    x: XScale;\r\n    y: YScale;\r\n    lastUpdateTime?: Date;\r\n};\r\n\r\nexport type SvgContainerData = {\r\n    svg: SVGElement;\r\n    g: SVGGElement;\r\n    margin: typeof margin;\r\n    dimension?: Dimension\r\n}\r\n\r\ntype Props = {\r\n    // data: Covid19CasesByTimeFeature[];\r\n    xDomain: string[];\r\n    yDomain: number[]\r\n}\r\n\r\nconst SvgContainer:React.FC<Props> = ({\r\n    // data,\r\n    xDomain,\r\n    yDomain,\r\n    children\r\n}) => {\r\n\r\n    const windowSize = useWindowSize();\r\n\r\n    const containerRef = useRef<HTMLDivElement>();\r\n    const dimensionRef = useRef<Dimension>();\r\n\r\n    const [ svgContainerData, setSvgContainerData ] = React.useState<SvgContainerData>();\r\n\r\n    const [ scales, setScales ] =  React.useState<Scales>();\r\n\r\n    const init = ()=>{\r\n\r\n        const container = containerRef.current;\r\n        const width = container.offsetWidth - margin.left - margin.right;\r\n        const height = container.offsetHeight - margin.top - margin.bottom;\r\n\r\n        dimensionRef.current = {\r\n            height,\r\n            width\r\n        };\r\n\r\n        select(container)\r\n            .append(\"svg\")\r\n                .attr(\"width\", '100%')\r\n                .attr(\"height\", height + margin.top + margin.bottom)\r\n            .append(\"g\")\r\n                .attr(\r\n                    \"transform\", \r\n                    `translate(${margin.left}, ${margin.top})`\r\n                );\r\n        \r\n        const svgSelector = select(container)\r\n            .select<SVGElement>('svg');\r\n\r\n        const svg = svgSelector.node();\r\n\r\n        const g = svgSelector\r\n            .select<SVGGElement>('g')\r\n            .node();\r\n\r\n        const xScale = scaleBand<string>()\r\n            .paddingInner(0.2)\r\n            .range([0, width])\r\n            .domain(xDomain)\r\n\r\n        const yScale = scaleLinear()\r\n            .range([height, 0])\r\n            .domain(yDomain).nice();\r\n\r\n        setSvgContainerData({\r\n            svg,\r\n            g,\r\n            margin,\r\n            dimension: dimensionRef.current\r\n        });\r\n\r\n        setScales({\r\n            x: xScale,\r\n            y: yScale\r\n        });\r\n        \r\n    };\r\n\r\n    const scalesOnUpdateEndHandler = ()=>{\r\n        setScales(scales=>{\r\n            return {\r\n                ...scales,\r\n                // change last update time so the children components know scales have changed\r\n                lastUpdateTime: new Date()\r\n            }\r\n        });\r\n    };\r\n\r\n    const resizeHandler = ()=>{\r\n\r\n        const container = containerRef.current;\r\n\r\n        if(!container || !svgContainerData || !scales){\r\n            return;\r\n        }\r\n\r\n        // const { svg } = svgContainerData;\r\n        const { x } = scales;\r\n\r\n        // const newContainerWidth = window.innerWidth - 720;\r\n        const newWidth = container.offsetWidth - margin.left - margin.right;\r\n\r\n        dimensionRef.current.width = newWidth;\r\n\r\n        x.range([0, newWidth ]);\r\n\r\n        scalesOnUpdateEndHandler();\r\n    }\r\n\r\n    useEffect(()=>{\r\n        init();\r\n    }, []);\r\n\r\n    useEffect(()=>{\r\n\r\n        if( scales && yDomain ){\r\n            scales.y.domain(yDomain).nice();\r\n            scalesOnUpdateEndHandler();\r\n        }\r\n\r\n    }, [ yDomain ]);\r\n\r\n    React.useEffect(()=>{\r\n        resizeHandler();\r\n    }, [ windowSize ]);\r\n\r\n    return (\r\n        <>\r\n            <div \r\n                ref={containerRef}\r\n                style={{\r\n                    'position': 'relative',\r\n                    'width': '100%',\r\n                    'height': '100%'\r\n                }}\r\n            ></div>\r\n            {   \r\n                React.Children.map(children, (child)=>{\r\n                    return React.cloneElement(child as React.ReactElement<any>, {\r\n                        svgContainerData,\r\n                        scales\r\n                    });\r\n                })  \r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default SvgContainer\r\n","// import './Axis.scss';\r\nimport React from 'react';\r\nimport { numberFns } from 'helper-toolkit-ts'\r\n\r\nimport { \r\n    select,\r\n    axisBottom,\r\n    axisLeft,\r\n    scaleTime,\r\n    timeFormat\r\n} from 'd3';\r\n\r\nimport {\r\n    Scales,\r\n    SvgContainerData\r\n} from './SvgContainer';\r\n\r\ninterface Props {\r\n    svgContainerData?: SvgContainerData;\r\n    scales?: Scales;\r\n};\r\n\r\nconst formatTime = timeFormat(\"%b\");\r\n\r\nconst Axis:React.FC<Props> = ({\r\n    svgContainerData,\r\n    scales\r\n})=>{\r\n\r\n    const drawXAxis = ()=>{\r\n\r\n        const { dimension, g } = svgContainerData;\r\n\r\n        const { height, width } = dimension;\r\n\r\n        const mainGroup = select(g);\r\n\r\n        const { x } = scales;\r\n\r\n        const domain = x.domain();\r\n        const startDateParts = domain[0].split('-').map(d=>+d);\r\n        const startDate = new Date(startDateParts[0], startDateParts[1] - 1, startDateParts[2]);\r\n\r\n        const endDateParts = domain[domain.length - 1].split('-').map(d=>+d);\r\n        const endDate = new Date(endDateParts[0], endDateParts[1] - 1, endDateParts[2]);\r\n        \r\n        const xScale = scaleTime()\r\n            .range([0, width])\r\n            .domain([startDate, endDate])\r\n\r\n        const xAxis = axisBottom(xScale)\r\n            // .ticks(timeMonth)\r\n            .tickFormat((date:Date)=>{\r\n                return formatTime(date);\r\n            })\r\n            // .tickValues(d=>{})\r\n            // .tickSizeInner(-(height))\r\n            // .tickPadding(9)\r\n\r\n        const xAxisLabel = mainGroup.selectAll('.x.axis');\r\n\r\n        if (!xAxisLabel.size()) {\r\n            mainGroup\r\n                .append('g')\r\n                .attr('class', 'x axis')\r\n                .attr('transform', 'translate(0,' + height  + ')')\r\n                .call(xAxis);\r\n        } else {\r\n            xAxisLabel\r\n                .attr('transform', 'translate(0,' + height + ')')\r\n                .call(xAxis);\r\n        }\r\n\r\n    };\r\n\r\n    const drawYAxis = ()=>{\r\n\r\n        const { g, dimension } = svgContainerData;\r\n\r\n        const { width } = dimension;\r\n\r\n        const { y } = scales;\r\n\r\n        const mainGroup = select(g);\r\n\r\n        const yAxis = axisLeft(y)\r\n            .ticks(3)\r\n            .tickSizeInner(-(width))\r\n            .tickPadding(5)\r\n            .tickFormat(num=>{\r\n                return numberFns.abbreviateNumber(+num, 0)\r\n            })\r\n\r\n        const yAxisLabel = mainGroup.selectAll('.y.axis');\r\n\r\n        if (!yAxisLabel.size()) {\r\n            mainGroup\r\n                .append('g')\r\n                .attr('class', 'y axis')\r\n                .call(yAxis);\r\n        } else {\r\n            yAxisLabel.call(yAxis);\r\n        }\r\n    };\r\n\r\n    React.useEffect(()=>{\r\n\r\n        if( svgContainerData && scales ){\r\n            drawXAxis();\r\n            drawYAxis();\r\n        }\r\n\r\n    }, [ svgContainerData, scales ]);\r\n\r\n    return null;\r\n};\r\n\r\nexport default Axis;","import React from 'react';\r\nimport { select } from 'd3';\r\nimport { generate } from 'shortid';\r\n\r\nimport {\r\n    Scales,\r\n    SvgContainerData\r\n} from './SvgContainer';\r\n\r\nimport {\r\n    ChartDataItem\r\n} from './ChartPanel';\r\n\r\nconst BarRectGroupClassName = `bar-rect-group-${generate()}`;\r\nconst BarRectClassName = `bar-rect-${generate()}`;\r\n\r\ntype Props = {\r\n    svgContainerData?: SvgContainerData;\r\n    scales?: Scales;\r\n};\r\n\r\ntype BarProps = {\r\n    data: ChartDataItem[],\r\n    fillColor: string;\r\n} & Props;\r\n\r\nconst Bar:React.FC<BarProps> = ({\r\n    data,\r\n    fillColor,\r\n    svgContainerData,\r\n    scales\r\n})=>{\r\n\r\n    const containerG = React.useRef<SVGGElement>();\r\n\r\n    const initContainer = ()=>{\r\n        const { g } = svgContainerData;\r\n\r\n        containerG.current = select(g)\r\n            .append('g')\r\n            .node();\r\n    };\r\n\r\n    const draw = ()=>{\r\n\r\n        const { dimension } = svgContainerData;\r\n\r\n        const { height } = dimension;\r\n\r\n        const { x, y } = scales;\r\n\r\n        remove();\r\n\r\n        select(containerG.current)\r\n            .append('g')\r\n            .attr('class', BarRectGroupClassName)\r\n            // .attr(\"clip-path\", `url(#${clipPathId})`)\r\n            .selectAll(`.${BarRectClassName}`)\r\n                .data(data)\r\n            .enter().append(\"rect\")\r\n                .attr(\"class\", BarRectClassName)\r\n                .style('fill', fillColor)\r\n                .attr(\"x\", d=>x(d.x))\r\n                .attr(\"width\", x.bandwidth() )\r\n                .attr(\"y\", d=>y(d.y))\r\n                .attr(\"height\", (d)=>{\r\n                    return height - y(d.y)\r\n                })\r\n                \r\n    };\r\n\r\n    const remove = ()=>{\r\n\r\n        const existingBars = select(containerG.current)\r\n            .selectAll(`.${BarRectGroupClassName}`);\r\n\r\n        if (existingBars.size()) {\r\n            existingBars.remove()\r\n        }\r\n    };\r\n\r\n    React.useEffect(()=>{\r\n        if( svgContainerData){\r\n            initContainer();\r\n        }\r\n    }, [ svgContainerData ]);\r\n\r\n    React.useEffect(()=>{\r\n        if( svgContainerData && scales && data ){\r\n            draw();\r\n        }\r\n    }, [ scales, data ]);\r\n\r\n    return null;\r\n};\r\n\r\nexport default Bar;","import React from 'react';\r\nimport { generate } from 'shortid';\r\nimport { \r\n    select,\r\n    line,\r\n    curveMonotoneX\r\n} from 'd3';\r\n\r\nimport {\r\n    Scales,\r\n    SvgContainerData,\r\n} from './SvgContainer';\r\n\r\nimport {\r\n    ChartDataItem\r\n} from './ChartPanel';\r\n\r\ntype Props = {\r\n    svgContainerData?: SvgContainerData;\r\n    scales?: Scales;\r\n};\r\n\r\ntype LineProps = {\r\n    data: ChartDataItem[];\r\n    strokeColor: string;\r\n} & Props;\r\n\r\nconst LinePathClassName = `line-${generate()}`;\r\n\r\nconst Line:React.FC<LineProps> = ({\r\n    data,\r\n    strokeColor,\r\n    svgContainerData,\r\n    scales\r\n})=>{\r\n\r\n    const containerG = React.useRef<SVGGElement>();\r\n\r\n    const initContainer = ()=>{\r\n        const { g } = svgContainerData;\r\n\r\n        containerG.current = select(g)\r\n            .append('g')\r\n            .node();\r\n    };\r\n\r\n    const draw = ()=>{\r\n\r\n        const containerGroup = select(containerG.current);\r\n\r\n        const { x, y } = scales;\r\n\r\n        const xOffset = x.bandwidth() / 2;\r\n\r\n        const valueline = line<ChartDataItem>()\r\n            // .curve(curveMonotoneX)\r\n            .x(d=>x(d.x) + xOffset)\r\n            .y(d=>y(d.y));\r\n\r\n        remove();\r\n\r\n        containerGroup.append(\"path\")\r\n            .data([data])\r\n            .attr(\"class\", LinePathClassName)\r\n            .attr(\"d\", valueline)\r\n            .style('fill', 'none')\r\n            .style('stroke', strokeColor)\r\n            .style('stroke-width', 2);\r\n    };\r\n\r\n    const remove = ()=>{\r\n\r\n        const lines = select(containerG.current).selectAll(`.${LinePathClassName}`);\r\n        \r\n        // check the number of existing lines, if greater than 0; remove all existing ones\r\n        if(lines.size()){\r\n            lines.remove().exit();\r\n        }\r\n    };\r\n\r\n    React.useEffect(()=>{\r\n        if( svgContainerData){\r\n            initContainer();\r\n        }\r\n    }, [ svgContainerData ]);\r\n\r\n    React.useEffect(()=>{\r\n        if( svgContainerData && scales && data ){\r\n            draw();\r\n        }\r\n    }, [ scales, data ]);\r\n\r\n    return null;\r\n};\r\n\r\nexport default Line;","import React, {\r\n    useEffect\r\n} from 'react';\r\n\r\nimport { \r\n    select,\r\n    mouse\r\n} from 'd3';\r\n\r\nimport {\r\n    Scales,\r\n    SvgContainerData\r\n} from './SvgContainer';\r\n\r\nimport {\r\n    Covid19CasesByTimeFeature\r\n} from 'covid19-trend-map';\r\n\r\ninterface Props {\r\n    data: Covid19CasesByTimeFeature[]\r\n    svgContainerData?: SvgContainerData;\r\n    scales?: Scales;\r\n\r\n    onHover?: (item:Covid19CasesByTimeFeature)=>void;\r\n};\r\n\r\nconst VerticalRefLineClassName = 'vertical-ref-line'\r\n\r\nconst MouseEventsRect:React.FC<Props> = ({\r\n    data,\r\n    svgContainerData,\r\n    scales,\r\n\r\n    onHover\r\n}) => {\r\n\r\n    const containerG = React.useRef<SVGGElement>();\r\n\r\n    const itemOnHover = React.useRef<Covid19CasesByTimeFeature>();\r\n\r\n    const init = ()=>{\r\n\r\n        const { g, dimension } = svgContainerData;\r\n\r\n        const { height, width } = dimension;\r\n\r\n        containerG.current = select(g)\r\n            .append('g')\r\n            .node();\r\n        \r\n        const container = select(containerG.current);\r\n\r\n        container.append('line')\r\n            .attr('class', VerticalRefLineClassName)\r\n            .attr('x1', 0)\r\n            .attr('y1', 0)\r\n            .attr('x2', 0)\r\n            .attr('y2', height)\r\n            .style(\"opacity\", 0)\r\n            .attr('stroke-width', 0.5)\r\n            .attr(\"stroke\", \"rgba(255,255,255,.75)\")\r\n            .style(\"fill\", \"none\");\r\n\r\n        container.append(\"rect\")\r\n            // .attr(\"class\", ClassNames.BackgroundRect)\r\n            .attr(\"width\", width)\r\n            .attr(\"height\", height)\r\n            .attr('fill', 'rgba(0,0,0,0)')\r\n            .on(\"mouseleave\", ()=>{\r\n                setItemOnHover(null);\r\n            })\r\n            .on(\"mousemove\", function(){\r\n                const mousePosX = mouse(this)[0];\r\n                setItemOnHover(getItemByMousePos(mousePosX));\r\n            });\r\n    };\r\n\r\n    const setItemOnHover = (item?:Covid19CasesByTimeFeature)=>{\r\n        itemOnHover.current = item;\r\n        updateVerticalRefLinePos();\r\n        onHover(item);\r\n    };\r\n\r\n    const updateVerticalRefLinePos = ():void=>{\r\n\r\n        const { x } = scales;\r\n\r\n        const item = itemOnHover.current;\r\n\r\n        const vRefLine = select(containerG.current)\r\n            .select(`.${VerticalRefLineClassName}`);\r\n\r\n        const xPos = item ? \r\n            x(item.attributes.dt) +  x.bandwidth() / 2\r\n            : 0;\r\n\r\n        const opacity = item ? 1 : 0;\r\n\r\n        vRefLine\r\n            .attr('x1', xPos)\r\n            .attr('x2', xPos)\r\n            .style('opacity', opacity);\r\n    };\r\n\r\n    const getItemByMousePos = (mousePosX:number):Covid19CasesByTimeFeature=>{\r\n\r\n        let itemIndex = -1;\r\n        const { x } = scales;\r\n\r\n        for(let i = 0, len = data.length; i < len; i++){\r\n\r\n            const currItem = data[i];\r\n            const currItemPos = x(currItem.attributes.dt);\r\n\r\n            const nextItemIndex = data[i + 1] ? i + 1 : i;\r\n            const nextItem = data[nextItemIndex];\r\n            const nextItemPos = x(nextItem.attributes.dt);\r\n\r\n            if(mousePosX >= currItemPos && mousePosX <= nextItemPos){\r\n\r\n                const distToCurrItem = Math.abs(mousePosX - currItemPos);\r\n                const distToNextItem = Math.abs(mousePosX - nextItemPos);\r\n\r\n                itemIndex = distToCurrItem < distToNextItem ? i : nextItemIndex;\r\n\r\n                break;\r\n            }\r\n        }\r\n\r\n        return data[itemIndex];\r\n    };\r\n\r\n    useEffect(()=>{\r\n\r\n        if( svgContainerData && data.length ){\r\n            init();\r\n        }\r\n\r\n    }, [ svgContainerData, data ]);\r\n\r\n    useEffect(()=>{\r\n\r\n        if( svgContainerData && scales ){\r\n\r\n            const { dimension } = svgContainerData;\r\n            const { width } = dimension;\r\n\r\n            select(containerG.current)\r\n                .select('rect')\r\n                .attr('width', width);\r\n        }\r\n\r\n    }, [ scales ]);\r\n\r\n    return null;\r\n}\r\n\r\nexport default MouseEventsRect\r\n","import React, {\r\n    useEffect\r\n} from 'react';\r\n\r\nimport {\r\n    Scales,\r\n    SvgContainerData\r\n} from './SvgContainer';\r\n\r\nimport {\r\n    Covid19CasesByTimeFeature\r\n} from 'covid19-trend-map';\r\n\r\nimport { numberFns } from 'helper-toolkit-ts';\r\nimport { ThemeStyle } from '../../AppConfig';\r\n\r\ntype TooltipPos = {\r\n    top: number;\r\n    left: number;\r\n};\r\n\r\ntype Props = {\r\n    svgContainerData?: SvgContainerData;\r\n    scales?: Scales;\r\n    data: Covid19CasesByTimeFeature;\r\n};\r\n\r\nconst Tooltip:React.FC<Props> = ({\r\n    svgContainerData,\r\n    scales,\r\n    data\r\n}) => {\r\n\r\n    const tooltipRef = React.useRef<HTMLDivElement>();\r\n\r\n    const [ tooltipPos, setTooltipPos ] = React.useState<TooltipPos>({ top: 0, left: 0});\r\n\r\n    const updateTooltipPosition = ()=>{\r\n\r\n        const tooltipDiv = tooltipRef.current;\r\n\r\n        if(!tooltipDiv){\r\n            return;\r\n        };\r\n\r\n        const { dimension, margin } = svgContainerData;\r\n\r\n        const { width } = dimension;\r\n\r\n        const { x, y } = scales;\r\n\r\n        const tooltipDivWidth = tooltipDiv.offsetWidth;\r\n        const tooltipDivHeight = tooltipDiv.offsetHeight;\r\n\r\n        const top = -((tooltipDivHeight / 2 ) - margin.top);\r\n        const xPosForItemOnHover = x(data.attributes.dt) + margin.left;\r\n\r\n        let left = ( xPosForItemOnHover + (tooltipDivWidth / 2) ) >= (width + margin.left) \r\n            ? (xPosForItemOnHover - tooltipDivWidth) \r\n            : (xPosForItemOnHover - tooltipDivWidth / 2) ;\r\n\r\n        left = left >= margin.left ? left : margin.left;\r\n\r\n        setTooltipPos({\r\n            top,\r\n            left\r\n        });\r\n    };\r\n\r\n    const getTooltip = ():JSX.Element=>{\r\n\r\n        const { top, left } = tooltipPos;\r\n\r\n        const { attributes } = data;\r\n\r\n        const {\r\n            dt,\r\n            Confirmed,\r\n            Deaths,\r\n            NewCases,\r\n            Population\r\n        } = attributes;\r\n\r\n        const newCases = numberFns.numberWithCommas(NewCases);\r\n        const confirmed = numberFns.numberWithCommas(Confirmed);\r\n        const deaths = numberFns.numberWithCommas(Deaths);\r\n\r\n        return (\r\n            <div\r\n                ref={tooltipRef}\r\n                style={{\r\n                    'position': 'absolute',\r\n                    'left': `${left}px`,\r\n                    'top': `${top}px`,\r\n                    'padding': '7px 10px',\r\n                    'background': ThemeStyle[\"theme-color-khaki-bright\"],\r\n                    'color': '#fff',\r\n                    // 'width': '300px',\r\n                    'pointerEvents': 'none',\r\n                    'boxSizing': 'border-box',\r\n                    'boxShadow': `0 0 10px 2px ${ThemeStyle[\"floating-panel-box-shadow\"]}`\r\n                }}\r\n            >\r\n                <div className='font-size--3 avenir-demi'>\r\n                    <span className='text-theme-color-khaki'>{dt}</span>\r\n                </div>\r\n\r\n                <div className='font-size--2 avenir-bold'>\r\n\r\n                    <div>\r\n                        <span className='text-theme-color-khaki'>new cases: <span className='text-theme-color-red'>{newCases}</span></span>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <span className='text-theme-color-khaki'>cumulative cases: <span className='text-theme-color-red'>{confirmed}</span></span>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <span className='text-theme-color-khaki'>cumulative deaths: <span className='text-theme-color-red'>{deaths}</span></span>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n    useEffect(()=>{\r\n        updateTooltipPosition();\r\n    }, [ data ])\r\n\r\n    return data \r\n        ? getTooltip() \r\n        : null;\r\n}\r\n\r\nexport default Tooltip\r\n","import React, {\r\n    useState\r\n} from 'react';\r\n\r\nimport {\r\n    useSelector\r\n} from 'react-redux';\r\n\r\nimport {\r\n    activeTrendSelector\r\n} from '../../store/reducers/UI'\r\n\r\nimport {\r\n    Covid19TrendName,\r\n    Covid19CasesByTimeFeature\r\n} from 'covid19-trend-map';\r\n\r\nimport SvgContainer from './SvgContainer';\r\nimport Axis from './Axis';\r\nimport Bar from './Bars';\r\nimport Line from './Line';\r\nimport MouseEventsRect from './MouseEventsRect';\r\nimport Tooltip from './Tooltip';\r\n\r\nimport {\r\n    max\r\n} from 'd3';\r\n\r\nimport { ThemeStyle } from '../../AppConfig';\r\n\r\ntype Props = {\r\n    // activeTrend: Covid19TrendName;\r\n    data: Covid19CasesByTimeFeature[]\r\n}\r\n\r\nexport type ChartDataItem = {\r\n    x: string;\r\n    y: number;\r\n}\r\n\r\n// field names for Covid19CasesByTime Features\r\nexport const FieldNameByActiveTrend:{ [ key in Covid19TrendName]: string } = {\r\n    'new-cases': 'NewCases',\r\n    'death': 'Deaths',\r\n    'confirmed': 'Confirmed'\r\n}\r\n\r\nconst ChartPanel:React.FC<Props> = ({\r\n    // activeTrend,\r\n    data\r\n}) => {\r\n\r\n    const activeTrend = useSelector(activeTrendSelector);\r\n\r\n    const fieldName = FieldNameByActiveTrend[activeTrend];\r\n\r\n    // if true, convert numbers from Covid19CasesByTimeFeature into number per 100K people\r\n    const [ showNormalizedValues, setShowNormalizedValues ] = useState<boolean>(false);\r\n\r\n    const [ itemOnHover, setItemOnHover ] = useState<Covid19CasesByTimeFeature>();\r\n\r\n    const getXDomain = ()=>{\r\n        const xDomain = data.map(d=>d.attributes.dt);\r\n        return xDomain\r\n    };\r\n\r\n    const getYDomain = ()=>{\r\n        const values = data.map(d=>{\r\n            return showNormalizedValues \r\n                ? Math.round(d.attributes[fieldName] / d.attributes.Population * 100000 )\r\n                : d.attributes[fieldName] \r\n        });\r\n        const yMax = max(values) || 1;\r\n        const yDomain = [ 0, yMax ];\r\n        return yDomain;\r\n    }\r\n\r\n    const getDataForBars = ():ChartDataItem[] =>{\r\n        if(!data || !data.length){\r\n            return [];\r\n        }\r\n\r\n        return data.map(d=>{\r\n\r\n            const y = showNormalizedValues\r\n                ? Math.round(d.attributes[fieldName] / d.attributes.Population * 100000)\r\n                : d.attributes[fieldName] \r\n\r\n            return {\r\n                x: d.attributes.dt, \r\n                y\r\n            }\r\n        });\r\n    };\r\n\r\n    const getDataForLine = ():ChartDataItem[] =>{\r\n        \r\n        if(!data || !data.length || activeTrend !== 'new-cases'){\r\n            return [];\r\n        }\r\n\r\n        const values:ChartDataItem[]  = [];\r\n\r\n        for(let i = data.length - 1; i > 0; i--){\r\n\r\n            const feature = data[i];\r\n            \r\n            const x = feature.attributes.dt;\r\n\r\n            let sum = 0;\r\n            const startIndex = i - 6 >= 0 ? i - 6 : 0;\r\n            const endIndex = i + 1;\r\n\r\n            const featuresInPastWeek = data\r\n                .slice(startIndex, endIndex);\r\n\r\n            featuresInPastWeek.forEach(d=>sum += d.attributes[fieldName]);\r\n\r\n            let y = (sum / featuresInPastWeek.length);\r\n\r\n            if(showNormalizedValues){\r\n                y = ( y / feature.attributes.Population * 100000)\r\n            }\r\n\r\n            y = Math.round(y);\r\n\r\n            y = y < 0 ? 0 : y;\r\n\r\n            values.push({\r\n                x,\r\n                y\r\n            })\r\n        }\r\n\r\n        return values;\r\n    }\r\n\r\n    const getContent = ()=>{\r\n\r\n        if(!data || !data.length){\r\n            return null;\r\n        }\r\n\r\n        return (\r\n            <SvgContainer\r\n                xDomain={getXDomain()}\r\n                yDomain={getYDomain()}\r\n            >\r\n\r\n                <Axis />\r\n\r\n                <Bar \r\n                    fillColor={ThemeStyle[\"theme-color-khaki-dark\"]}\r\n                    data={getDataForBars()}\r\n                />\r\n\r\n                <Line \r\n                    strokeColor={ThemeStyle[\"theme-color-red\"]}\r\n                    data={getDataForLine()}\r\n                />\r\n\r\n                <Tooltip \r\n                    data={itemOnHover}\r\n                />\r\n\r\n                <MouseEventsRect \r\n                    data={data}\r\n                    onHover={setItemOnHover}\r\n                />\r\n\r\n            </SvgContainer>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                'width': '100%',\r\n                'height': '170px',\r\n                'backgroundColor': ThemeStyle[\"theme-color-khaki-bright\"]\r\n            }}\r\n        >\r\n\r\n            { getContent() }\r\n        </div>\r\n    \r\n    )\r\n}\r\n\r\nexport default ChartPanel;","import React from 'react'\r\nimport { ThemeStyle } from '../../AppConfig'\r\n\r\ntype Props = {\r\n    showLoadingIndicator: boolean;\r\n}\r\n\r\nconst BottomPanel:React.FC<Props> = ({\r\n    showLoadingIndicator,\r\n    children\r\n}) => {\r\n\r\n    const getLoadingIndicator = ()=>{\r\n\r\n        return (\r\n            <div\r\n                style={{\r\n                    'position': 'relative',\r\n                    'display': 'flex',\r\n                    'justifyContent': 'center',\r\n                    'alignItems': 'center',\r\n                    'width': '100%',\r\n                    'height': '225px'\r\n                }}\r\n            >\r\n                <div className=\"loader is-active\">\r\n                    <div className=\"loader-bars\"></div>\r\n                    {/* <div className=\"loader-text\">Loading...</div> */}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                'position': 'absolute',\r\n                'left': '15px',\r\n                'right': '15px',\r\n                'bottom': '25px',\r\n                'boxSizing': 'border-box',\r\n                'boxShadow': `0 0 10px 2px ${ThemeStyle[\"floating-panel-box-shadow\"]}`,\r\n                'backgroundColor': ThemeStyle[\"theme-color-khaki-bright\"]\r\n            }}\r\n        >\r\n            { \r\n                showLoadingIndicator \r\n                    ? getLoadingIndicator() \r\n                    : children \r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BottomPanel\r\n","import React from 'react'\r\nimport { Covid19TrendName } from 'covid19-trend-map';\r\nimport {\r\n    ThemeStyle\r\n} from '../../AppConfig';\r\n\r\nimport {\r\n    useSelector,\r\n    useDispatch\r\n} from 'react-redux';\r\n\r\nimport {\r\n    isMobileSeletor,\r\n    activeTrendSelector,\r\n    activeTrendUpdated,\r\n    isAboutModalOpenToggled\r\n} from '../../store/reducers/UI'\r\n\r\nconst SwitchBtnData: {\r\n    label: string;\r\n    value: Covid19TrendName\r\n}[] = [\r\n    {\r\n        label: 'WEEKLY CASES',\r\n        value: 'new-cases'\r\n    },\r\n    {\r\n        label: 'CASES',\r\n        value: 'confirmed'\r\n    },\r\n    {\r\n        label: 'DEATHS',\r\n        value: 'death'\r\n    }\r\n];\r\n\r\nconst ControlPanel = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const activeTrend = useSelector(activeTrendSelector);\r\n    const isMobile = useSelector(isMobileSeletor);\r\n    \r\n    const getSwitchBtns = ()=>{\r\n        return SwitchBtnData.map(d=>{\r\n\r\n            const {\r\n                value, label\r\n            } = d;\r\n\r\n            return (\r\n                <div\r\n                    key={value}\r\n                    style={{\r\n                        'width': isMobile ? 'auto' : '160px',\r\n                        'flexGrow': isMobile ? 1 : 0,\r\n                        'height': '100%',\r\n                        'color': ThemeStyle[\"theme-color-red\"],\r\n                        'backgroundColor': activeTrend === value ? ThemeStyle[\"theme-color-khaki-bright\"] : 'transparent',\r\n                        'display': 'flex',\r\n                        'alignItems': 'center',\r\n                        'justifyContent': 'center',\r\n                        'boxSizing':'border-box',\r\n                        'borderBottom': `solid 4px ${ activeTrend === value ? ThemeStyle[\"theme-color-red\"] : 'transparent' }`,\r\n                        'borderRight': `solid 1px #E0D8C1`,\r\n                        'cursor': 'pointer'\r\n                    }}\r\n                    onClick={()=>{\r\n                        dispatch(activeTrendUpdated(value));\r\n                    }}\r\n                >\r\n                    <span \r\n                        className={`avenir-bold`}\r\n                        style={{\r\n                            'fontSize': '12px'\r\n                        }}\r\n                    >{label}</span>\r\n                </div>\r\n            )\r\n        })\r\n    };\r\n\r\n    const getInfoBtn = ()=>{\r\n\r\n        return (\r\n            <div\r\n                style={{\r\n                    'width': '60px',\r\n                    'height': '100%',\r\n                    'display': 'flex',\r\n                    'alignItems': 'center',\r\n                    'justifyContent': 'center',\r\n                    'cursor': 'pointer'\r\n                }}\r\n                onClick={()=>{\r\n                    dispatch(isAboutModalOpenToggled())\r\n                }}\r\n            >\r\n                <svg \r\n                    viewBox=\"0 0 24 24\" \r\n                    height='24' \r\n                    width='24'\r\n                    fill={ThemeStyle[\"theme-color-khaki-dark\"]}\r\n                >\r\n                    <path d=\"M12.5 7.5a1 1 0 1 1 1-1 1.002 1.002 0 0 1-1 1zM13 18V9h-2v1h1v8h-1v1h3v-1zm9.8-5.5A10.3 10.3 0 1 1 12.5 2.2a10.297 10.297 0 0 1 10.3 10.3zm-1 0a9.3 9.3 0 1 0-9.3 9.3 9.31 9.31 0 0 0 9.3-9.3z\"/>\r\n                    <path fill=\"none\" d=\"M0 0h24v24H0z\"/>\r\n                </svg>\r\n            </div>\r\n        )\r\n    }\r\n    \r\n    return (\r\n        <div\r\n            style={{\r\n                'position': 'absolute',\r\n                'top': '10px',\r\n                'right': '10px',\r\n                'left': isMobile ? '10px' : 'unset',\r\n                // 'maxWidth': '420px',\r\n                'boxShadow': `0 0 10px 2px #B1A483`,\r\n            }}\r\n        >\r\n            <div\r\n                style={{\r\n                    'backgroundColor': ThemeStyle[\"theme-color-red\"],\r\n                    'color': ThemeStyle[\"theme-color-khaki-bright\"],\r\n                    // 'height': isMobile ? 'auto' : '20px',\r\n                    'lineHeight': '20px',\r\n                    'width': '100%',\r\n                    'textAlign': 'center'\r\n                }}\r\n            >\r\n                <span className='avenir-bold' style={{\r\n                    'fontSize': '12px'\r\n                }}>NOVEL CORONAVIRUS TRENDS PER 100,000 PEOPLE, SINCE FEBRUARY, UPDATED DAILY</span>\r\n            </div>\r\n\r\n            <div\r\n                style={{\r\n                    'display': 'flex',\r\n                    'height': '60px',\r\n                    'width': '100%',\r\n                    'boxSizing':'border-box',\r\n                    \r\n                    'backgroundColor': ThemeStyle[\"theme-color-khaki\"]\r\n                }}\r\n            >\r\n                { getSwitchBtns() }\r\n                { getInfoBtn() }\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default ControlPanel\r\n","import React, {\r\n    useEffect,\r\n    useState,\r\n    useRef\r\n} from 'react'\r\n\r\nimport { loadModules } from 'esri-loader';\r\n\r\nimport IMapView from 'esri/views/MapView';\r\nimport IFeatureLayer from 'esri/layers/FeatureLayer';\r\n// import IPoint from 'esri/geometry/Point';\r\nimport IGraphic from 'esri/Graphic';\r\nimport IFeatureLayerView from 'esri/views/layers/FeatureLayerView';\r\nimport { TooltipPosition } from '../Tooltip/Tooltip';\r\n\r\ntype Props = {\r\n    itemId: string;\r\n    outFields?: string[];\r\n    mapView?:IMapView;\r\n    visibleScale?: {\r\n        min: number;\r\n        max: number;\r\n    }\r\n    onStart: ()=>void;\r\n    onSelect: (feature:IGraphic)=>void;\r\n\r\n    pointerOnMove: (position: TooltipPosition)=>void;\r\n    featureOnHover: (feature: IGraphic)=>void;\r\n}\r\n\r\nconst QueryTaskLayer:React.FC<Props> = ({\r\n    itemId,\r\n    outFields,\r\n    mapView,\r\n    visibleScale,\r\n    onStart,\r\n    onSelect,\r\n    pointerOnMove,\r\n    featureOnHover\r\n}) => {\r\n\r\n    const layerRef = useRef<IFeatureLayer>();\r\n    const layerViewRef = useRef<IFeatureLayerView>();\r\n    const mouseMoveDelay = useRef<number>();\r\n\r\n    const isLayerInVisibleRange = ()=>{\r\n        return ( \r\n            mapView.scale < layerRef.current.minScale && \r\n            mapView.scale > layerRef.current.maxScale\r\n        );\r\n    }\r\n\r\n    const init = async()=>{\r\n\r\n        type Modules = [\r\n            typeof IFeatureLayer\r\n        ];\r\n\r\n        try {\r\n            const [ \r\n                FeatureLayer,\r\n            ] = await (loadModules([\r\n                'esri/layers/FeatureLayer',\r\n            ]) as Promise<Modules>);\r\n\r\n            const layer = new FeatureLayer({\r\n                portalItem: {\r\n                    id: itemId\r\n                },\r\n                minScale: visibleScale && visibleScale.min,\r\n                maxScale: visibleScale && visibleScale.max,\r\n                visible: true,\r\n                popupEnabled: false,\r\n                outFields,\r\n                opacity: 0\r\n            });\r\n\r\n            mapView.map.add(layer);\r\n\r\n            mapView.whenLayerView(layer).then(layerView=>{\r\n                // console.log(layerView)\r\n\r\n                layerRef.current = layer;\r\n                layerViewRef.current = layerView;\r\n\r\n                initEventListeners();\r\n            })\r\n\r\n        } catch(err){\r\n            console.error(err);\r\n        }\r\n    };\r\n\r\n    const queryFeatures = async(event:__esri.MapViewClickEvent)=>{\r\n        // console.log(mapView.scale)\r\n\r\n        const isVisible = isLayerInVisibleRange();\r\n\r\n        if(isVisible){\r\n\r\n            onStart();\r\n\r\n            const results = await layerViewRef.current.queryFeatures({\r\n                where: '1=1',\r\n                geometry: mapView.toMap(event),\r\n                returnGeometry: true,\r\n                outFields: outFields || ['*']\r\n            });\r\n\r\n            onSelect(results.features && results.features.length ? results.features[0] : undefined);\r\n        }\r\n    }\r\n\r\n    const initEventListeners = ()=>{\r\n\r\n        mapView.on(\"click\", (event)=>{\r\n            queryFeatures(event);\r\n        });\r\n\r\n        mapView.on(\"pointer-leave\", ()=>{\r\n            pointerOnMove(undefined);\r\n        })\r\n\r\n        mapView.on(\"pointer-move\", (event)=>{\r\n\r\n            clearTimeout(mouseMoveDelay.current);\r\n\r\n            // mapView.toScreen(event.)\r\n            // console.log(event.x, event.y)\r\n\r\n            if(isLayerInVisibleRange()){\r\n\r\n                const { x, y } = event;\r\n\r\n                pointerOnMove({ x, y });\r\n\r\n                mouseMoveDelay.current = window.setTimeout(async()=>{\r\n\r\n                    const results = await layerViewRef.current.queryFeatures({\r\n                        where: '1=1',\r\n                        geometry: mapView.toMap(event),\r\n                        returnGeometry: false,\r\n                        outFields: outFields || ['*']\r\n                    });\r\n                    // console.log(results)\r\n\r\n                    featureOnHover(results.features[0]);\r\n\r\n                }, 50);\r\n            }\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(mapView){\r\n            init();\r\n        }\r\n    }, [mapView]);\r\n\r\n    return null;\r\n}\r\n\r\nexport default QueryTaskLayer\r\n","import React from 'react';\r\n\r\nimport {\r\n    useSelector\r\n} from 'react-redux';\r\n\r\nimport {\r\n    isMobileSeletor\r\n} from '../../store/reducers/UI'\r\n\r\nimport { ThemeStyle } from '../../AppConfig'\r\nimport { Covid19CasesByTimeFeature } from 'covid19-trend-map';\r\nimport { numberFns } from 'helper-toolkit-ts';\r\nimport { parse, getISODay, format } from 'date-fns';\r\n\r\ntype Props = {\r\n    locationName?: string;\r\n    data: Covid19CasesByTimeFeature[];\r\n    closeBtnOnClick: ()=>void;\r\n};\r\n\r\nconst SummaryInfoPanel:React.FC<Props> = ({\r\n    locationName,\r\n    data,\r\n    closeBtnOnClick\r\n}) => {\r\n\r\n    const isMobile = useSelector(isMobileSeletor);\r\n\r\n    const getBiggestWeeklyIncrease = ()=>{\r\n\r\n        let featureWithBiggestWeeklyIncrease = data[0];\r\n        let biggestWeeklyIncrease = Number.NEGATIVE_INFINITY;\r\n\r\n        const dateForFirstFeature = parse(data[0].attributes.dt, 'yyyy-MM-dd', new Date())\r\n\r\n        let dayForFirstFeature = getISODay(dateForFirstFeature);\r\n\r\n        for( let i = 0, len= data.length; i < len; i++){\r\n\r\n            let dayOfWeek = ( i % 7 ) + dayForFirstFeature;\r\n\r\n            dayOfWeek = dayOfWeek > 7 ? dayOfWeek - 7 : dayOfWeek;\r\n\r\n            if(dayOfWeek === 1){\r\n                const { Confirmed } = data[i].attributes;\r\n\r\n                const feature7DaysAgo = i - 6 >= 0 \r\n                    ? data[i-6] \r\n                    : data[0];\r\n                \r\n                const weeklyIncrease = Confirmed - feature7DaysAgo.attributes.Confirmed;\r\n\r\n                if(weeklyIncrease > biggestWeeklyIncrease){\r\n                    biggestWeeklyIncrease = weeklyIncrease;\r\n                    featureWithBiggestWeeklyIncrease = data[i];\r\n                }\r\n            }\r\n        }\r\n\r\n        const dateWithBiggestWeeklyIncrease = parse(featureWithBiggestWeeklyIncrease.attributes.dt, 'yyyy-MM-dd', new Date())\r\n\r\n        return format(dateWithBiggestWeeklyIncrease, 'MMMM dd, yyyy');\r\n    };\r\n\r\n    const getSummaryInfo = ()=>{\r\n\r\n        if(!data || !data.length){\r\n            return null\r\n        }\r\n\r\n        // const feature7DaysAgo = data[data.length - 7]\r\n        const indexOfLatestFeature = data.length - 1;\r\n        const latestFeature = data[indexOfLatestFeature];\r\n\r\n        const { dt, Confirmed, Deaths, Population } = latestFeature.attributes;\r\n\r\n        const [ year, month, day ] = dt.split('-');\r\n        const date = new Date(+year, +month - 1, +day);\r\n    \r\n        const dayOfWeek = date.getDay();\r\n    \r\n        const featureOfLastSunday = dayOfWeek === 0 \r\n            ? data[ indexOfLatestFeature - 6 ]\r\n            : data[ indexOfLatestFeature - dayOfWeek ];\r\n\r\n        const cumulativeCases = numberFns.numberWithCommas(Confirmed);\r\n        const cumulativeDeaths = numberFns.numberWithCommas(Deaths);\r\n\r\n        const newCasesThisWeek = numberFns.numberWithCommas(Confirmed - featureOfLastSunday.attributes.Confirmed);\r\n        const deathsThisWeek = numberFns.numberWithCommas(Deaths - featureOfLastSunday.attributes.Deaths);\r\n\r\n        const population = numberFns.numberWithCommas(Population);\r\n\r\n        const blockStyle:React.CSSProperties ={\r\n            'padding': isMobile ? '0' : '0 .65rem',\r\n            'borderRight': isMobile ? 'none' : `solid 1px rgba(178, 165, 132, .5)`,\r\n            'display': isMobile ? 'block' : 'flex',\r\n            'alignItems': 'center'\r\n        }\r\n\r\n        return (\r\n            <div\r\n                className='font-size--2 avenir-bold text-theme-color-khaki'\r\n                style={{\r\n                    'display': isMobile ? 'block' : 'flex',\r\n                    'alignItems': 'strech',\r\n                    'padding': `0 ${isMobile ? '0' : '1rem' }`\r\n                }}\r\n            >\r\n                <div style={{\r\n                    ...blockStyle,\r\n                    'display': 'block'\r\n                }}>\r\n                    <span>\r\n                        <span className='text-theme-color-red'>Biggest Weekly Jump</span> { isMobile ? null : <br/>} { getBiggestWeeklyIncrease() }\r\n                    </span>\r\n                </div>\r\n\r\n                <div style={blockStyle}>\r\n                    <span><span className='text-theme-color-red'>Population</span> { population }</span>\r\n                </div>\r\n\r\n                <div style={blockStyle}>\r\n                    <span>\r\n                        <span className='text-theme-color-red'>{newCasesThisWeek}</span> new cases and <span className='text-theme-color-red'>{deathsThisWeek}</span> deaths this week\r\n                    </span>\r\n                </div>\r\n\r\n                <div style={{\r\n                    ...blockStyle,\r\n                    'borderRight': 'none'\r\n                }}>\r\n                    <span>\r\n                        <span className='text-theme-color-red'>{cumulativeCases}</span> cumulative cases and <span className='text-theme-color-red'>{cumulativeDeaths}</span> deaths\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        )\r\n\r\n    }\r\n\r\n    const getCloseBtnStyleForMobileDevice = ():React.CSSProperties=>{\r\n\r\n        if(!isMobile){\r\n            return null;\r\n        }\r\n\r\n        return {\r\n            'position': 'absolute',\r\n            'top': '.5rem',\r\n            'right': '.5rem'\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                'position': 'relative',\r\n                'width': '100%',\r\n                'padding': '.4rem 1.35rem',\r\n                'display': isMobile ? 'block' : 'flex',\r\n                'alignItems': 'center',\r\n                'boxSizing': 'border-box',\r\n                'backgroundColor': ThemeStyle[\"theme-color-khaki\"],\r\n            }}\r\n        >\r\n            <div\r\n                style={{\r\n                    'color': ThemeStyle[\"theme-color-red\"],\r\n                    'textTransform': 'uppercase',\r\n                    'maxWidth': isMobile ? '320px' : 'auto'\r\n                }}\r\n            >\r\n                <span className='avenir-bold font-size-2'>{locationName}</span>\r\n            </div>\r\n\r\n            <div\r\n                style={{\r\n                    'flexGrow': 1\r\n                }}\r\n            >\r\n                { getSummaryInfo() }\r\n            </div>\r\n\r\n            <div\r\n                style={{\r\n                    'cursor': 'pointer',\r\n                    ...getCloseBtnStyleForMobileDevice()\r\n                }}\r\n                onClick={closeBtnOnClick}\r\n            >\r\n                <svg \r\n                    viewBox=\"0 0 32 32\" \r\n                    height=\"32\" \r\n                    width=\"32\"\r\n                    fill={ThemeStyle[\"theme-color-khaki-dark\"]}\r\n                >\r\n                    <path d=\"M23.985 8.722L16.707 16l7.278 7.278-.707.707L16 16.707l-7.278 7.278-.707-.707L15.293 16 8.015 8.722l.707-.707L16 15.293l7.278-7.278z\"/>\r\n                    <path fill=\"none\" d=\"M0 0h32v32H0z\"/>\r\n                </svg>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SummaryInfoPanel\r\n","import React, {\r\n    useEffect,\r\n    useState\r\n} from 'react';\r\n\r\nimport {\r\n    useSelector\r\n} from 'react-redux';\r\n\r\nimport {\r\n    showTrendCategoriesSelector,\r\n    activeTrendSelector\r\n} from '../../store/reducers/UI'\r\n\r\n\r\nimport { loadModules } from 'esri-loader';\r\nimport IMapView from 'esri/views/MapView';\r\nimport ICIMSymbol from 'esri/symbols/CIMSymbol';\r\nimport IGraphic from 'esri/Graphic';\r\nimport IPoint from 'esri/geometry/Point';\r\nimport IGraphicsLayer from 'esri/layers/GraphicsLayer';\r\nimport IwatchUtils from 'esri/core/watchUtils';\r\n\r\n// import IFeatureLayer from 'esri/layers/FeatureLayer';\r\n// import IUniqueValueRenderer from 'esri/renderers/UniqueValueRenderer';\r\n// // import IUniqueValueInfo from 'esri/renderers/support/UniqueValueInfo';\r\n\r\n// import ISimpleRenderer from 'esri/renderers/SimpleRenderer';\r\n// import ISimpleMarkerSymbol from 'esri/symbols/SimpleMarkerSymbol';\r\n\r\nimport {\r\n    PathData,\r\n    Covid19TrendName,\r\n    Covid19TrendData\r\n} from 'covid19-trend-map';\r\n\r\nimport {\r\n    TrendColor\r\n} from '../../AppConfig';\r\n\r\ntype Props = {\r\n    // activeTrend: Covid19TrendName;\r\n    size?: number;\r\n    visibleScale?: {\r\n        min: number;\r\n        max: number;\r\n    },\r\n    // indicate if attributes contains 'trend category type' value from https://www.arcgis.com/home/item.html?id=49c25e0ce50340e08fcfe51fe6f26d1e#overview\r\n    hasTrendCategoriesAttribute?: boolean;\r\n    // itemId?: string;\r\n    // field?: string;\r\n    mapView?:IMapView;\r\n\r\n    isLayerInVisibleScaleOnChange?: (visible:boolean)=>void;\r\n}\r\n\r\ntype Covid19TrendLayerProps = {\r\n    features: Covid19TrendData[]\r\n} & Props;\r\n\r\nconst Covid19TrendLayer:React.FC<Covid19TrendLayerProps> = ({\r\n    // activeTrend,\r\n    features,\r\n    visibleScale,\r\n    size = 20,\r\n    hasTrendCategoriesAttribute = false,\r\n    mapView,\r\n\r\n    isLayerInVisibleScaleOnChange\r\n}) => {\r\n\r\n    const activeTrend = useSelector(activeTrendSelector);\r\n    const showTrendCategories = useSelector(showTrendCategoriesSelector);\r\n    \r\n    const [ trendLayer, setTrendLayer ] = useState<IGraphicsLayer>();\r\n\r\n    const [ isLayerInVisibleScale, setIsLayerInVisibleScale ] = useState<boolean>(false);\r\n\r\n    const init = async()=>{\r\n        type Modules = [\r\n            typeof IGraphicsLayer,\r\n            typeof IwatchUtils\r\n        ];\r\n\r\n        try {\r\n            const [ \r\n                GraphicsLayer,\r\n                watchUtils\r\n            ] = await (loadModules([\r\n                'esri/layers/GraphicsLayer',\r\n                'esri/core/watchUtils'\r\n            ]) as Promise<Modules>);\r\n\r\n            const layer = new GraphicsLayer({\r\n                minScale: visibleScale && visibleScale.min,\r\n                maxScale: visibleScale && visibleScale.max\r\n            });\r\n\r\n            mapView.map.add(layer);\r\n\r\n            setTrendLayer(layer);\r\n\r\n            watchUtils.whenTrue(mapView, 'stationary', ()=>{\r\n                const isInVisibleScale = (mapView.scale < visibleScale.min && mapView.scale > visibleScale.max);\r\n                setIsLayerInVisibleScale(isInVisibleScale);\r\n            })\r\n\r\n        } catch(err){\r\n            console.error(err);\r\n        }\r\n    };\r\n\r\n    const draw = async(features:Covid19TrendData[])=>{\r\n\r\n        type Modules = [\r\n            typeof ICIMSymbol,\r\n            typeof IGraphic,\r\n            typeof IPoint\r\n        ];\r\n\r\n        try {\r\n            const [ \r\n                CIMSymbol,\r\n                Graphic,\r\n                Point\r\n            ] = await (loadModules([\r\n                'esri/symbols/CIMSymbol',\r\n                'esri/Graphic',\r\n                'esri/geometry/Point'\r\n            ]) as Promise<Modules>);\r\n\r\n            const graphics = features.map(feature=>{\r\n                const {\r\n                    attributes,\r\n                    geometry,\r\n                    confirmed,\r\n                    deaths,\r\n                    newCases\r\n                } = feature;\r\n\r\n                const pathDataByTrendName: { [key in Covid19TrendName]: PathData } = {\r\n                    'confirmed': confirmed,\r\n                    'death': deaths,\r\n                    'new-cases': newCases\r\n                };\r\n\r\n                const pathData = pathDataByTrendName[activeTrend];\r\n\r\n                const {\r\n                    frame,\r\n                    path\r\n                } = pathData;\r\n\r\n                let color = [161, 13, 34, 255];\r\n\r\n                if( showTrendCategories && hasTrendCategoriesAttribute) {\r\n                    color = ( attributes && attributes.trendType ) \r\n                        ? TrendColor[attributes.trendType] \r\n                        : [200,200,200,255];\r\n                }\r\n\r\n                const strokeWidth = ( showTrendCategories && hasTrendCategoriesAttribute) ? 2 : 1;\r\n\r\n                // console.log(color)\r\n\r\n                // Create the CIM symbol:\r\n                //  - set the size value\r\n                //  - assign the generated path to the marker's geometry\r\n                const symbol = new CIMSymbol({\r\n                    data: {\r\n                        type: 'CIMSymbolReference',\r\n                        symbol: {\r\n                            type: \"CIMPointSymbol\",\r\n                            symbolLayers: [\r\n                                {\r\n                                    type: \"CIMVectorMarker\",\r\n                                    // anchorPoint: {\r\n                                    //     x: -.5,\r\n                                    //     y: -.5\r\n                                    // },\r\n                                    // anchorPointUnits: \"Relative\",\r\n                                    enable: true,\r\n                                    scaleSymbolsProportionally: true,\r\n                                    respectFrame: true,\r\n                                    size,\r\n                                    frame,\r\n                                    markerGraphics: [{\r\n                                        type: \"CIMMarkerGraphic\",\r\n                                        geometry: {\r\n                                            paths: [path]\r\n                                        },\r\n                                        symbol: {\r\n                                            type: \"CIMLineSymbol\",\r\n                                            symbolLayers: [{\r\n                                                type: \"CIMSolidStroke\",\r\n                                                width: strokeWidth,\r\n                                                color\r\n                                            }]\r\n                                        }\r\n                                    }]\r\n                                }\r\n                            ]\r\n                        }\r\n                    }\r\n                });\r\n\r\n                const graphic = new Graphic({\r\n                    geometry: new Point({\r\n                        latitude: geometry.y,\r\n                        longitude: geometry.x\r\n                    }),\r\n                    symbol\r\n                })\r\n\r\n                return graphic;\r\n            });\r\n\r\n            trendLayer.addMany(graphics);\r\n\r\n        } catch(err){   \r\n            console.error(err);\r\n        }\r\n    };\r\n\r\n    useEffect(()=>{\r\n        if(mapView){\r\n            init();\r\n        }\r\n    }, [mapView]);\r\n\r\n    useEffect(()=>{\r\n        if(trendLayer && features){\r\n\r\n            trendLayer.removeAll();\r\n            // draw(features);\r\n\r\n            if(isLayerInVisibleScale){\r\n                draw(features);\r\n            }\r\n        }\r\n    }, [ trendLayer, features, activeTrend, showTrendCategories ]);\r\n\r\n    \r\n    useEffect(()=>{\r\n        if( \r\n            features &&\r\n            isLayerInVisibleScale && \r\n            !trendLayer.graphics.length\r\n        ){\r\n            draw(features);\r\n        }\r\n\r\n        if(isLayerInVisibleScaleOnChange){\r\n            isLayerInVisibleScaleOnChange(isLayerInVisibleScale)\r\n        }\r\n        \r\n    }, [ isLayerInVisibleScale ]);\r\n\r\n\r\n    return null;\r\n}\r\n\r\nexport default Covid19TrendLayer;\r\n","import React, {\r\n    useState,\r\n    useEffect\r\n} from 'react';\r\n\r\nimport { loadModules } from 'esri-loader';\r\nimport IMapView from 'esri/views/MapView';\r\nimport IGraphic from 'esri/Graphic';\r\nimport IGraphicsLayer from 'esri/layers/GraphicsLayer';\r\nimport ISimpleFillSymbol from 'esri/symbols/SimpleFillSymbol';\r\nimport { ThemeStyle } from '../../AppConfig';\r\n\r\ntype Props = {\r\n    queryResult: IGraphic\r\n    mapView?:IMapView;\r\n}\r\n\r\n\r\nconst QueryTaskResultLayer:React.FC<Props> = ({\r\n    queryResult,\r\n    mapView\r\n}) => {\r\n\r\n    const [ graphicLayer, setGraphicLayer ] = useState<IGraphicsLayer>();\r\n\r\n    const init = async()=>{\r\n        type Modules = [\r\n            typeof IGraphicsLayer,\r\n        ];\r\n\r\n        try {\r\n            const [ \r\n                GraphicsLayer\r\n            ] = await (loadModules([\r\n                'esri/layers/GraphicsLayer'\r\n            ]) as Promise<Modules>);\r\n\r\n            const layer = new GraphicsLayer();\r\n\r\n            mapView.map.add(layer);\r\n\r\n            setGraphicLayer(layer);\r\n\r\n        } catch(err){\r\n            console.error(err);\r\n        }\r\n    };\r\n\r\n    const showQueryResult = async()=>{\r\n\r\n        type Modules = [\r\n            typeof ISimpleFillSymbol,\r\n        ];\r\n\r\n        const [ \r\n            SimpleFillSymbol\r\n        ] = await (loadModules([\r\n            'esri/symbols/SimpleFillSymbol'\r\n        ]) as Promise<Modules>);\r\n\r\n        queryResult.symbol = new SimpleFillSymbol({\r\n            color: [0,0,0,0],\r\n            outline: {  // autocasts as new SimpleLineSymbol()\r\n                color: 'rgba(178,165,132,.7)',\r\n                width: 1\r\n            } \r\n        });\r\n\r\n        graphicLayer.add(queryResult)\r\n    }\r\n\r\n    useEffect(()=>{\r\n        if(mapView){\r\n            init();\r\n        }\r\n    }, [mapView]);\r\n\r\n    useEffect(()=>{\r\n        if(graphicLayer){\r\n\r\n            graphicLayer.removeAll();\r\n\r\n            if(queryResult){\r\n                showQueryResult();\r\n            }\r\n            \r\n        }\r\n    }, [queryResult]);\r\n\r\n    return null;\r\n}\r\n\r\nexport default QueryTaskResultLayer\r\n","import React from 'react'\r\nimport { ThemeStyle } from '../../AppConfig'\r\n\r\nimport {\r\n    useSelector,\r\n    useDispatch\r\n} from 'react-redux';\r\n\r\nimport {\r\n    isStateLayerVisilbeSelector\r\n} from '../../store/reducers/Map';\r\n\r\nimport {\r\n    showTrendCategoriesSelector,\r\n    showTrendCategoriesToggled,\r\n    isMobileSeletor\r\n} from '../../store/reducers/UI'\r\n\r\nconst LegendData:{\r\n    value: string;\r\n    label?: string;\r\n    tooltip?: string;\r\n    color: string;\r\n}[]  = [\r\n    {\r\n        value: 'Emergent',\r\n        tooltip: 'Early stages of outbreak',\r\n        color: '#D49EC6'\r\n    }, \r\n    {\r\n        value: 'Spreading',\r\n        tooltip: 'Early stages, and, depending on an administrative area’s capacity, a manageable rate of spread',\r\n        color: '#A5336E'\r\n    }, \r\n    {\r\n        value: 'Epidemic',\r\n        tooltip: 'Uncontrolled spread',\r\n        color: '#800B4C'\r\n    }, \r\n    {\r\n        value: 'Controlled',\r\n        tooltip: 'Very low levels of new cases',\r\n        color: '#93C3C3'\r\n    }, \r\n    {\r\n        value: 'End Stage',\r\n        tooltip: 'No New cases',\r\n        color: '#5BA0A8'\r\n    }, \r\n    {\r\n        value: 'Zero Cases',\r\n        tooltip: '',\r\n        color: '#c8c8c8',\r\n        label: 'No Cases'\r\n    }\r\n];\r\n\r\nconst Height = '22px';\r\n\r\nconst TrendCategoriesToggle= () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const isStateLayerVisilbe = useSelector(isStateLayerVisilbeSelector);\r\n    const showTrendCategories = useSelector(showTrendCategoriesSelector);\r\n    const isMobile = useSelector(isMobileSeletor);\r\n\r\n    const getCheckbox = ()=>{\r\n\r\n        const checkboxIcon = showTrendCategories \r\n            ? (\r\n                <svg \r\n                    viewBox=\"0 0 24 24\" \r\n                    height=\"24\" \r\n                    width=\"24\" \r\n                    style={{\r\n                        'fill': ThemeStyle[\"theme-color-khaki-dark\"]\r\n                    }}\r\n                >\r\n                    <path d=\"M3 4.281v16.437A1.282 1.282 0 0 0 4.281 22h16.437A1.282 1.282 0 0 0 22 20.718V4.281A1.281 1.281 0 0 0 20.719 3H4.28A1.281 1.281 0 0 0 3 4.281zM20.719 4a.281.281 0 0 1 .281.281V20.72a.281.281 0 0 1-.281.281H4.28a.281.281 0 0 1-.28-.282V4.28A.281.281 0 0 1 4.281 4zM10.5 17L7 13.689l.637-.636 2.863 2.674 7.022-6.87.637.637z\"/>\r\n                    <path fill=\"none\" d=\"M0 0h24v24H0z\"/>\r\n                </svg>\r\n\r\n                \r\n            )\r\n            : (\r\n                <svg \r\n                    viewBox=\"0 0 24 24\"\r\n                    height=\"24\" \r\n                    width=\"24\" \r\n                    style={{\r\n                        'fill': ThemeStyle[\"theme-color-khaki-dark\"]\r\n                    }}\r\n                >\r\n                    <path d=\"M3 4.281v16.437A1.282 1.282 0 0 0 4.281 22h16.437A1.282 1.282 0 0 0 22 20.718V4.281A1.281 1.281 0 0 0 20.719 3H4.28A1.281 1.281 0 0 0 3 4.281zM20.719 4a.281.281 0 0 1 .281.281V20.72a.281.281 0 0 1-.281.281H4.28a.281.281 0 0 1-.28-.282V4.28A.281.281 0 0 1 4.281 4z\"/>\r\n                    <path fill=\"none\" d=\"M0 0h24v24H0z\"/>\r\n                </svg>\r\n            );\r\n\r\n        return (\r\n            <div \r\n                style={{\r\n                    'display': 'flex',\r\n                    'alignItems': 'center',\r\n                    'backgroundColor':  ThemeStyle[\"theme-color-khaki-bright\"],\r\n                    // 'padding': '0 .1rem',\r\n                    'cursor': 'pointer'\r\n                }}\r\n                onClick={()=>{\r\n                    dispatch(showTrendCategoriesToggled())\r\n                }}\r\n            >\r\n                { checkboxIcon }\r\n            </div>\r\n        );\r\n    };\r\n\r\n    const getTrendCategoriesLegend = ()=>{\r\n\r\n        if( showTrendCategories && isStateLayerVisilbe ){\r\n            return (\r\n                <div\r\n                    style={{\r\n                        'backgroundColor': ThemeStyle[\"theme-color-khaki-bright\"],\r\n                        'color': ThemeStyle[\"theme-color-khaki-dark\"],\r\n                        'width': isMobile ? 'auto' : '540px',\r\n                        'boxSizing': 'border-box',\r\n                        'border': `1px solid ${ThemeStyle[\"theme-color-khaki\"]}`,\r\n                        'padding': '0 .25rem'\r\n                    }}\r\n                >\r\n                    <span className='avenir-demi'>Trend categories are available at the county level. Please zoom in.</span>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        const legends = LegendData.map(d=>{\r\n\r\n            return (\r\n                <div\r\n                    key={d.value}\r\n                    style={{\r\n                        'display': 'felx',\r\n                        'alignItems': 'center',\r\n                        'backgroundColor': d.color,\r\n                        'width': '90px',\r\n                        'color': '#fff',\r\n                        // 'padding': '.3rem .5rem',\r\n                        'textAlign': 'center',\r\n                        'textTransform': 'uppercase',\r\n                        \r\n                    }}\r\n                    title={d.tooltip}\r\n                >\r\n                    <span className='avenir-demi'>{d.label || d.value}</span>\r\n                </div>\r\n            )\r\n        })\r\n\r\n        return (\r\n            <div\r\n                style={{\r\n                    'display': 'flex',\r\n                    'flexWrap': isMobile ? 'wrap' : 'nowrap',\r\n                }}\r\n            >\r\n                { legends }\r\n            </div>\r\n        )\r\n    };\r\n\r\n    const getMessageForUncheckedBox = ()=>{\r\n        return (\r\n            <div\r\n                style={{\r\n                    'color': '#fff',\r\n                    'backgroundColor': ThemeStyle[\"theme-color-red\"],\r\n                    'padding': '0 .35rem',\r\n                    'display': 'felx',\r\n                    'alignItems': 'center',\r\n                    'height': '100%',\r\n                    // 'lineHeight': Height\r\n                }}\r\n            >\r\n                <span className='avenir-demi'>SHOW TREND CATEGORIES</span>\r\n            </div>\r\n        )\r\n    };\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                'position': 'absolute',\r\n                'top': isMobile ? '120px' : '110px',\r\n                'right': '10px',\r\n                'height': Height,\r\n                'display': 'flex',\r\n                'fontSize': '12px',\r\n                'lineHeight': Height\r\n            }}\r\n        >\r\n            {\r\n                getCheckbox()\r\n            }\r\n\r\n            {\r\n                showTrendCategories\r\n                ? getTrendCategoriesLegend()\r\n                : getMessageForUncheckedBox()\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TrendCategoriesToggle\r\n","import axios from 'axios';\r\n\r\nimport {\r\n    Covid19CasesByTimeFeature\r\n} from 'covid19-trend-map';\r\n\r\ntype FetchCovid19DataOptions = {\r\n    countyFIPS?: string;\r\n    stateName?: string;\r\n}\r\n\r\nconst USCountiesCovid19CasesByTimeFeatureServiceURL = 'https://services9.arcgis.com/6Hv9AANartyT7fJW/ArcGIS/rest/services/USCounties_cases_V1/FeatureServer/1';\r\n\r\nconst cachedQueryResults: {\r\n    [key:string]: Covid19CasesByTimeFeature[]\r\n} = {};\r\n\r\nexport const fetchCovid19Data = async({\r\n    countyFIPS,\r\n    stateName\r\n}:FetchCovid19DataOptions):Promise<Covid19CasesByTimeFeature[]>=>{\r\n\r\n    const key4CachedResults = countyFIPS || stateName;\r\n\r\n    if(cachedQueryResults[key4CachedResults]){\r\n        return cachedQueryResults[key4CachedResults];\r\n    }\r\n\r\n    const requestUrl = `${USCountiesCovid19CasesByTimeFeatureServiceURL}/query`;\r\n\r\n    const params = countyFIPS\r\n        ? {\r\n            f: 'json',\r\n            where: `FIPS='${countyFIPS}'`,\r\n            outFields: 'dt,Confirmed,Deaths,NewCases,Population',\r\n            orderByFields: 'dt'\r\n        }\r\n        : {\r\n            f: 'json',\r\n            where: `ST_Name='${stateName}'`,\r\n            outFields: '*',\r\n            orderByFields: 'dt',\r\n            groupByFieldsForStatistics: 'ST_Name,dt',\r\n            outStatistics: JSON.stringify([\r\n                {\r\n                    \"statisticType\": \"sum\",\r\n                    \"onStatisticField\": \"Confirmed\", \r\n                    \"outStatisticFieldName\": \"Confirmed\"\r\n                },\r\n                {\r\n                    \"statisticType\": \"sum\",\r\n                    \"onStatisticField\": \"Deaths\", \r\n                    \"outStatisticFieldName\": \"Deaths\"\r\n                },\r\n                {\r\n                    \"statisticType\": \"sum\",\r\n                    \"onStatisticField\": \"NewCases\",\r\n                    \"outStatisticFieldName\": \"NewCases\"\r\n                },\r\n                {\r\n                    \"statisticType\": \"sum\",\r\n                    \"onStatisticField\": \"Population\",\r\n                    \"outStatisticFieldName\": \"Population\"\r\n                }  \r\n            ])\r\n        };\r\n\r\n    try {\r\n        const { data } = await axios.get(requestUrl, { \r\n            params: new URLSearchParams(params)\r\n        });\r\n\r\n        if(data && data.features){\r\n            // console.log(data.features)\r\n\r\n            cachedQueryResults[key4CachedResults] = data.features;\r\n\r\n            return data.features\r\n        }\r\n\r\n    } catch(err){\r\n        console.error(err);\r\n    }\r\n\r\n    return null;\r\n};","import React, {\r\n    useEffect,\r\n    useState\r\n} from 'react';\r\n\r\nimport {\r\n    useDispatch\r\n} from 'react-redux';\r\n\r\nimport axios from 'axios';\r\n\r\nimport {\r\n    tooltipDataChanged,\r\n    tooltipPositionChanged,\r\n    isStateLayerVisilbeToggled\r\n} from '../../store/reducers/Map';\r\n\r\nimport {\r\n    activeTrendUpdated,\r\n    isAboutModalOpenToggled,\r\n    showTrendCategoriesToggled\r\n} from '../../store/reducers/UI';\r\n\r\nimport About from '../About/About';\r\nimport MapView from '../MapView/MapView';\r\nimport Tooltip, {\r\n    TooltipData\r\n} from '../Tooltip/Tooltip';\r\nimport ChartPanel from '../ChartPanel/ChartPanel';\r\nimport BottomPanel from '../BottomPanel/BottomPanel';\r\nimport ControlPanel from '../ControlPanel/ControlPanel';\r\nimport QueryTaskLayer from '../QueryTaskLayer/QueryTaskLayer';\r\nimport SummaryInfoPanel from '../SummaryInfoPanel/SummaryInfoPanel';\r\nimport Covid19TrendLayer from '../Covid19TrendLayer/Covid19TrendLayer';\r\nimport QueryTaskResultLayer from '../QueryTaskResultLayer/QueryTaskResultLayer'; \r\nimport TrendCategoriesToggle from '../TrendCategoriesToggle/TrendCategoriesToggle';\r\n\r\nimport {\r\n    // Covid19TrendName,\r\n    Covid19TrendData,\r\n    Covid19LatestNumbers,\r\n    Covid19CasesByTimeFeature,\r\n    QueryLocation4Covid19TrendData\r\n} from 'covid19-trend-map';\r\n\r\nimport IGraphic from 'esri/Graphic';\r\n\r\nimport AppConfig from '../../AppConfig';\r\n\r\nimport {\r\n    fetchCovid19Data\r\n} from '../../utils/queryCovid19Data';\r\n\r\nconst App = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const [ covid19USCountiesData, setCovid19USCountiesData ] = useState<Covid19TrendData[]>();\r\n    const [ covid19USStatesData, setCovid19USStatesData ] = useState<Covid19TrendData[]>();\r\n    const [ covid19LatestNumbers, setCovid19LatestNumbers ] = useState<Covid19LatestNumbers>();\r\n\r\n    const [ covid19CasesByTimeQueryResults, setCovid19CasesByTimeQueryResults ] = useState<Covid19CasesByTimeFeature[]>();\r\n    // user can click map to select US State or County that will be used to query covid19 trend data\r\n    const [ covid19CasesByTimeQueryLocation, setcovid19CasesByTimeQueryLocation ] = useState<QueryLocation4Covid19TrendData>();\r\n    const [ isLoading, setIsLoading ] = useState<boolean>(false);\r\n\r\n    const fetchData = async()=>{\r\n\r\n        try {\r\n\r\n            const HostUrl = AppConfig[\"static-files-host\"];\r\n            const Url4CountiesJSON = HostUrl + AppConfig[\"covid19-data-us-counties-json\"];\r\n            const Url4StatesJSON = HostUrl + AppConfig[\"covid19-data-us-states-json\"];\r\n            const Url4LatestNumbers = HostUrl + AppConfig[\"covid19-latest-numbers-json\"];\r\n\r\n            const queryResUSStates = await axios.get<Covid19TrendData[]>(Url4StatesJSON);\r\n            setCovid19USStatesData(queryResUSStates.data);\r\n            // console.log(queryResUSStates)\r\n\r\n            const queryResUSCounties = await axios.get<Covid19TrendData[]>(Url4CountiesJSON);\r\n            setCovid19USCountiesData(queryResUSCounties.data);\r\n            // console.log(queryResUSCounties)\r\n\r\n            const latestNumbers = await axios.get<Covid19LatestNumbers>(Url4LatestNumbers);\r\n            setCovid19LatestNumbers(latestNumbers.data)\r\n\r\n        } catch(err){\r\n            console.error(err);\r\n        }\r\n\r\n    };\r\n\r\n    const countyOnSelect = async(countyFeature:IGraphic)=>{\r\n\r\n        if(!countyFeature){\r\n            resetQueryResults();\r\n            return false;\r\n        }\r\n\r\n        setcovid19CasesByTimeQueryLocation({\r\n            graphic: countyFeature,\r\n            locationName:  `${countyFeature.attributes['NAME']} CO, ${countyFeature.attributes['STATE_NAME']}`\r\n        });\r\n\r\n        const data = await fetchCovid19Data({\r\n            countyFIPS: countyFeature.attributes['FIPS']\r\n        });\r\n        setCovid19CasesByTimeQueryResults(data);\r\n    };\r\n\r\n    const stateOnSelect = async(stateFeature:IGraphic)=>{\r\n\r\n        if(!stateFeature){\r\n            resetQueryResults();\r\n            return false;\r\n        }\r\n\r\n        const stateName = stateFeature.attributes['STATE_NAME'];\r\n\r\n        setcovid19CasesByTimeQueryLocation({\r\n            graphic: stateFeature,\r\n            locationName: stateFeature.attributes['STATE_NAME']\r\n        });\r\n\r\n        const data = await fetchCovid19Data({\r\n            stateName\r\n        });\r\n        setCovid19CasesByTimeQueryResults(data);\r\n    };\r\n\r\n    const queryOnStartHandler = ()=>{\r\n        setCovid19CasesByTimeQueryResults(undefined);\r\n        setIsLoading(true);\r\n    }\r\n\r\n    const resetQueryResults = ()=>{\r\n        setIsLoading(false);\r\n        setCovid19CasesByTimeQueryResults(undefined);\r\n        setcovid19CasesByTimeQueryLocation(undefined);\r\n    };\r\n\r\n    // when pointer hove US Counties or State Polygons\r\n    const featureOnHoverHandler = (locationName:string, FIPS:string)=>{\r\n\r\n        let tooltipData:TooltipData;\r\n\r\n        if(locationName && FIPS){\r\n\r\n            const latestNumbers4SelectedFeature = covid19LatestNumbers[FIPS];\r\n\r\n            tooltipData = {\r\n                locationName,\r\n                confirmed: latestNumbers4SelectedFeature.Confirmed,\r\n                deaths: latestNumbers4SelectedFeature.Deaths,\r\n                weeklyNewCases: latestNumbers4SelectedFeature.NewCases\r\n            };\r\n        }\r\n\r\n        // setTooltipData(tooltipData);\r\n\r\n        dispatch(tooltipDataChanged(tooltipData))\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchData();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if(covid19CasesByTimeQueryResults){\r\n            setIsLoading(false);\r\n        }\r\n    }, [covid19CasesByTimeQueryResults]);\r\n\r\n    return (\r\n        <>\r\n            <MapView \r\n                webmapId={AppConfig[\"webmap-id\"]}\r\n            >\r\n                <QueryTaskResultLayer \r\n                    queryResult={covid19CasesByTimeQueryLocation ? covid19CasesByTimeQueryLocation.graphic : undefined}\r\n                />\r\n\r\n                <Covid19TrendLayer \r\n                    key='US-Counties'\r\n                    features={covid19USCountiesData}\r\n                    size={20}\r\n                    hasTrendCategoriesAttribute={true}\r\n                    visibleScale={AppConfig[\"us-counties-layer-visible-scale\"]}\r\n                />\r\n\r\n                <Covid19TrendLayer \r\n                    key='US-States'\r\n                    features={covid19USStatesData}\r\n                    size={24}\r\n                    visibleScale={AppConfig[\"us-states-layer-visible-scale\"]}\r\n                    isLayerInVisibleScaleOnChange={(isVisible)=>{\r\n                        // setIsStateLayerVisible(isVisible);\r\n                        dispatch(isStateLayerVisilbeToggled(isVisible))\r\n\r\n                        // hide tooltip to prevent showing the data from different layer which is no longer visible\r\n                        // setTooltipData(undefined);\r\n                        dispatch(tooltipDataChanged(undefined))\r\n                    }}\r\n                />\r\n\r\n                <QueryTaskLayer \r\n                    key='query-4-US-Counties'\r\n                    itemId={AppConfig[\"us-counties-feature-layer-item-id\"]}\r\n                    outFields={['FIPS', 'NAME', 'STATE_NAME']}\r\n                    visibleScale={AppConfig[\"us-counties-layer-visible-scale\"]}\r\n                    onStart={queryOnStartHandler}\r\n                    onSelect={countyOnSelect}\r\n                    pointerOnMove={(position)=>{\r\n                        dispatch(tooltipPositionChanged(position))\r\n                    }}\r\n                    featureOnHover={(feature)=>{\r\n\r\n                        const locationName = feature \r\n                            ? `${feature.attributes['NAME']}, ${feature.attributes['STATE_NAME']}` \r\n                            : undefined;\r\n\r\n                        const FIPS = feature \r\n                            ? feature.attributes['FIPS'] \r\n                            : undefined;\r\n\r\n                        featureOnHoverHandler(locationName, FIPS);\r\n                    }}\r\n                />\r\n\r\n                <QueryTaskLayer \r\n                    key='query-4-US-States'\r\n                    itemId={AppConfig[\"us-states-feature-layer-item-id\"]}\r\n                    outFields={['STATE_NAME', 'STATE_FIPS']}\r\n                    visibleScale={AppConfig[\"us-states-layer-visible-scale\"]}\r\n                    onStart={queryOnStartHandler}\r\n                    onSelect={stateOnSelect}\r\n                    pointerOnMove={(position)=>{\r\n                        dispatch(tooltipPositionChanged(position))\r\n                    }}\r\n                    featureOnHover={(feature)=>{\r\n\r\n                        const locationName = feature \r\n                            ? `${feature.attributes['STATE_NAME']}` \r\n                            : undefined;\r\n\r\n                        const FIPS = feature \r\n                            ? feature.attributes['STATE_FIPS'] \r\n                            : undefined;\r\n\r\n                        featureOnHoverHandler(locationName, FIPS);\r\n                    }}\r\n                />\r\n            </MapView>\r\n\r\n            <ControlPanel />\r\n\r\n            <TrendCategoriesToggle/>\r\n\r\n            {\r\n                covid19CasesByTimeQueryResults || isLoading ? (\r\n                    <BottomPanel\r\n                        showLoadingIndicator={isLoading}\r\n                    >\r\n\r\n                        <SummaryInfoPanel \r\n                            locationName={covid19CasesByTimeQueryLocation ? covid19CasesByTimeQueryLocation.locationName : undefined }\r\n                            data={covid19CasesByTimeQueryResults}\r\n                            closeBtnOnClick={resetQueryResults}\r\n                        />\r\n\r\n                        <ChartPanel \r\n                            data={covid19CasesByTimeQueryResults}\r\n                        />\r\n                    </BottomPanel>\r\n                ) : null\r\n            }\r\n\r\n            <Tooltip/>\r\n\r\n            <About/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import './styles/index.scss';\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { setDefaultOptions } from 'esri-loader';\r\n\r\nimport { Provider as ReduxProvider } from 'react-redux';\r\nimport store from './store/configureStore';\r\nimport App from './components/App/App';\r\n\r\nsetDefaultOptions({ url: 'https://js.arcgis.com/next/'})\r\n\r\nReactDOM.render(\r\n    <ReduxProvider store={store}>\r\n        <App/>\r\n    </ReduxProvider>, \r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}