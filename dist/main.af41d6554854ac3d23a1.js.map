{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/components/MapView/MapView.tsx","webpack:///./src/components/Covid19TrendLayer/Covid19TrendLayer.tsx","webpack:///./src/components/QueryTaskLayer/QueryTaskLayer.tsx","webpack:///./src/AppConfig.ts","webpack:///./src/components/ControlPanel/ControlPanel.tsx","webpack:///./src/components/ChartPanel/SvgContainer.tsx","webpack:///./src/components/ChartPanel/Axis.tsx","webpack:///./src/components/ChartPanel/Bars.tsx","webpack:///./src/components/ChartPanel/Line.tsx","webpack:///./src/components/ChartPanel/ChartPanel.tsx","webpack:///./src/components/BottomPanel/BottomPanel.tsx","webpack:///./src/components/SummaryInfoPanel/SummaryInfoPanel.tsx","webpack:///./src/utils/queryCovid19Data.ts","webpack:///./src/components/App/App.tsx","webpack:///./src/index.tsx"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","0","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","MapView","webmapId","children","mapDivRef","React","useRef","useState","mapView","setMapView","initMapView","a","loadModules","WebMap","view","container","current","map","portalItem","id","when","useEffect","loadCss","style","position","top","left","width","height","ref","Children","child","cloneElement","Covid19TrendLayer","activeTrend","features","visibleScale","size","trendLayer","setTrendLayer","init","GraphicsLayer","layer","minScale","min","maxScale","max","add","draw","CIMSymbol","Graphic","Point","removeAll","feature","geometry","confirmed","deaths","newCases","frame","pathData","path","symbol","type","symbolLayers","enable","scaleSymbolsProportionally","respectFrame","markerGraphics","paths","color","graphic","latitude","y","longitude","x","QueryTaskLayer","itemId","outFields","onSelect","setLayer","FeatureLayer","queryFeatures","event","scale","where","toMap","returnGeometry","results","on","ThemeStyle","SwitchBtnData","label","ControlPanel","activeTrendOnChange","className","onClick","viewBox","fill","margin","right","bottom","SvgContainer","xDomain","yDomain","windowSize","useWindowSize","containerRef","dimensionRef","svgContainerData","setSvgContainerData","scales","setScales","scalesOnUpdateEndHandler","lastUpdateTime","Date","offsetWidth","offsetHeight","select","append","attr","svgSelector","svg","node","g","xScale","scaleBand","paddingInner","range","domain","yScale","scaleLinear","nice","dimension","newWidth","resizeHandler","formatTime","timeFormat","Axis","mainGroup","startDateParts","startDate","endDateParts","endDate","xAxis","xAxisLabel","split","scaleTime","axisBottom","tickFormat","date","selectAll","yAxis","axisLeft","ticks","tickSizeInner","tickPadding","num","numberFns","abbreviateNumber","yAxisLabel","drawYAxis","BarRectGroupClassName","generate","BarRectClassName","Bar","fillColor","containerG","remove","existingBars","enter","bandwidth","LinePathClassName","Line","strokeColor","lines","exit","containerGroup","xOffset","valueline","line","FieldNameByActiveTrend","ChartPanel","values","fieldName","showNormalizedValues","attributes","dt","Math","round","Population","sum","startIndex","endIndex","featuresInPastWeek","forEach","getDataForLine","BottomPanel","SummaryInfoPanel","feature7DaysAgo","latestFeature","cumulativeCases","cumulativeDeaths","newCasesThisWeek","deathsThisWeek","population","locationName","closeBtnOnClick","numberWithCommas","Confirmed","Deaths","cachedQueryResults","fetchCovid19Data","countyFIPS","stateName","key4CachedResults","requestUrl","params","f","orderByFields","groupByFieldsForStatistics","outStatistics","JSON","stringify","axios","URLSearchParams","DefaultTrend","urlFns","parseQuery","trend","App","setActiveTrend","covid19USCountiesData","setCovid19USCountiesData","covid19USStatesData","setCovid19USStatesData","covid19CasesByTimeQueryResults","setCovid19CasesByTimeQueryResults","covid19CasesByTimeQueryLocationName","setcovid19CasesByTimeQueryLocationName","fetchData","AppConfig","queryResUSCounties","queryResUSStates","countyFeature","countyName","stateFeature","setDefaultOptions","url","ReactDOM","render","document","getElementById"],"mappings":"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","file":"main.af41d6554854ac3d23a1.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t0: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([128,1]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import React, {\r\n    useEffect\r\n} from 'react';\r\n\r\nimport { loadModules, loadCss } from 'esri-loader';\r\nimport IMapView from 'esri/views/MapView';\r\nimport IWebMap from \"esri/WebMap\";\r\n\r\ninterface Props {\r\n    webmapId: string;\r\n};\r\n\r\nconst MapView:React.FC<Props> = ({\r\n    webmapId,\r\n    children\r\n})=>{\r\n\r\n    const mapDivRef = React.useRef<HTMLDivElement>();\r\n\r\n    const [ mapView, setMapView] = React.useState<IMapView>(null);\r\n\r\n    const initMapView = async()=>{\r\n        \r\n        type Modules = [typeof IMapView, typeof IWebMap];\r\n\r\n        try {\r\n            const [ \r\n                MapView, \r\n                WebMap \r\n            ] = await (loadModules([\r\n                'esri/views/MapView',\r\n                'esri/WebMap',\r\n            ]) as Promise<Modules>);\r\n\r\n            const view = new MapView({\r\n                container: mapDivRef.current,\r\n                map: new WebMap({\r\n                    portalItem: {\r\n                        id: webmapId\r\n                    }  \r\n                }),\r\n            });\r\n\r\n            view.when(()=>{\r\n                setMapView(view);\r\n            });\r\n\r\n        } catch(err){   \r\n            console.error(err);\r\n        }\r\n    };\r\n\r\n    useEffect(()=>{\r\n        loadCss();\r\n        initMapView();\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <div \r\n                style={{\r\n                    position: 'absolute',\r\n                    top: 0,\r\n                    left: 0,\r\n                    width: '100%',\r\n                    height: '100%',\r\n                }}\r\n                ref={mapDivRef}\r\n            ></div>\r\n            { \r\n                React.Children.map(children, (child)=>{\r\n                    return React.cloneElement(child as React.ReactElement<any>, {\r\n                        mapView,\r\n                    });\r\n                }) \r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MapView;","import React, {\r\n    useEffect,\r\n    useState\r\n} from 'react';\r\n\r\nimport { loadModules } from 'esri-loader';\r\nimport IMapView from 'esri/views/MapView';\r\nimport ICIMSymbol from 'esri/symbols/CIMSymbol';\r\nimport IGraphic from 'esri/Graphic';\r\nimport IPoint from 'esri/geometry/Point';\r\nimport IGraphicsLayer from 'esri/layers/GraphicsLayer';\r\n\r\nimport {\r\n    PathData,\r\n    Covid19TrendName,\r\n    Covid19TrendData\r\n} from 'covid19-trend-map';\r\n\r\ntype Props = {\r\n    activeTrend: Covid19TrendName;\r\n    size?: number;\r\n    visibleScale?: {\r\n        min: number;\r\n        max: number;\r\n    }\r\n    mapView?:IMapView;\r\n}\r\n\r\ntype Covid19TrendLayerProps = {\r\n    features: Covid19TrendData[]\r\n} & Props;\r\n\r\nconst Covid19TrendLayer:React.FC<Covid19TrendLayerProps> = ({\r\n    activeTrend,\r\n    features,\r\n    visibleScale,\r\n    size = 20,\r\n    mapView\r\n}) => {\r\n\r\n    const [ trendLayer, setTrendLayer ] = useState<IGraphicsLayer>();\r\n\r\n    const init = async()=>{\r\n        type Modules = [\r\n            typeof IGraphicsLayer\r\n        ];\r\n\r\n        try {\r\n            const [ \r\n                GraphicsLayer,\r\n            ] = await (loadModules([\r\n                'esri/layers/GraphicsLayer',\r\n            ]) as Promise<Modules>);\r\n\r\n            const layer = new GraphicsLayer({\r\n                minScale: visibleScale && visibleScale.min,\r\n                maxScale: visibleScale && visibleScale.max\r\n            });\r\n\r\n            mapView.map.add(layer);\r\n\r\n            setTrendLayer(layer);\r\n\r\n        } catch(err){\r\n            console.error(err);\r\n        }\r\n    };\r\n\r\n    const draw = async()=>{\r\n\r\n        type Modules = [\r\n            typeof ICIMSymbol,\r\n            typeof IGraphic,\r\n            typeof IPoint\r\n        ];\r\n\r\n        try {\r\n            const [ \r\n                CIMSymbol,\r\n                Graphic,\r\n                Point\r\n            ] = await (loadModules([\r\n                'esri/symbols/CIMSymbol',\r\n                'esri/Graphic',\r\n                'esri/geometry/Point'\r\n            ]) as Promise<Modules>);\r\n\r\n            trendLayer.removeAll();\r\n\r\n            // Iterate over each feature\r\n            for (const feature of features) {\r\n\r\n                const {\r\n                    geometry,\r\n                    confirmed,\r\n                    deaths,\r\n                    newCases\r\n                } = feature;\r\n\r\n                const pathDataByTrendName: { [key in Covid19TrendName]: PathData } = {\r\n                    'confirmed': confirmed,\r\n                    'death': deaths,\r\n                    'new-cases': newCases\r\n                };\r\n\r\n                const pathData = pathDataByTrendName[activeTrend];\r\n\r\n                const {\r\n                    frame,\r\n                    path\r\n                } = pathData;\r\n\r\n                // Create the CIM symbol:\r\n                //  - set the size value\r\n                //  - assign the generated path to the marker's geometry\r\n                const symbol = new CIMSymbol({\r\n                    data: {\r\n                        type: 'CIMSymbolReference',\r\n                        symbol: {\r\n                            type: \"CIMPointSymbol\",\r\n                            symbolLayers: [\r\n                                {\r\n                                    type: \"CIMVectorMarker\",\r\n                                    enable: true,\r\n                                    scaleSymbolsProportionally: false,\r\n                                    respectFrame: false,\r\n                                    size,\r\n                                    frame,\r\n                                    markerGraphics: [{\r\n                                        type: \"CIMMarkerGraphic\",\r\n                                        geometry: {\r\n                                            paths: [path]\r\n                                        },\r\n                                        symbol: {\r\n                                            type: \"CIMLineSymbol\",\r\n                                            symbolLayers: [{\r\n                                                type: \"CIMSolidStroke\",\r\n                                                width: 1,\r\n                                                color: [161, 13, 34, 255]\r\n                                            }]\r\n                                        }\r\n                                    }]\r\n                                }\r\n                            ]\r\n                        }\r\n                    }\r\n                });\r\n\r\n                const graphic = new Graphic({\r\n                    geometry: new Point({\r\n                        latitude: geometry.y,\r\n                        longitude: geometry.x\r\n                    }),\r\n                    symbol\r\n                })\r\n\r\n                // Add the symbol on the county's centroid\r\n                trendLayer.add(graphic);\r\n            }\r\n\r\n        } catch(err){   \r\n            console.error(err);\r\n        }\r\n    };\r\n\r\n    useEffect(()=>{\r\n        if(mapView){\r\n            init();\r\n        }\r\n    }, [mapView]);\r\n\r\n    useEffect(()=>{\r\n        if(trendLayer && features){\r\n            draw();\r\n        }\r\n    }, [trendLayer, features, activeTrend]);\r\n\r\n    return null;\r\n}\r\n\r\nexport default Covid19TrendLayer;\r\n","import React, {\r\n    useEffect,\r\n    useState\r\n} from 'react'\r\n\r\nimport { loadModules } from 'esri-loader';\r\n\r\nimport IMapView from 'esri/views/MapView';\r\nimport IFeatureLayer from 'esri/layers/FeatureLayer';\r\n// import IPoint from 'esri/geometry/Point';\r\nimport IGraphic from 'esri/Graphic';\r\n\r\ntype Props = {\r\n    itemId: string;\r\n    outFields?: string[];\r\n    mapView?:IMapView;\r\n    visibleScale?: {\r\n        min: number;\r\n        max: number;\r\n    }\r\n    onSelect: (feature:IGraphic)=>void;\r\n}\r\n\r\nconst QueryTaskLayer:React.FC<Props> = ({\r\n    itemId,\r\n    outFields,\r\n    mapView,\r\n    visibleScale,\r\n    onSelect\r\n}) => {\r\n\r\n    const [ layer, setLayer ] = useState<IFeatureLayer>();\r\n\r\n    const init = async()=>{\r\n\r\n        type Modules = [\r\n            typeof IFeatureLayer\r\n        ];\r\n\r\n        try {\r\n            const [ \r\n                FeatureLayer,\r\n            ] = await (loadModules([\r\n                'esri/layers/FeatureLayer',\r\n            ]) as Promise<Modules>);\r\n\r\n            const layer = new FeatureLayer({\r\n                portalItem: {\r\n                    id: itemId\r\n                },\r\n                minScale: visibleScale && visibleScale.min,\r\n                maxScale: visibleScale && visibleScale.max\r\n            });\r\n\r\n            setLayer(layer);\r\n\r\n        } catch(err){\r\n            console.error(err);\r\n        }\r\n    };\r\n\r\n    const queryFeatures = async(event:__esri.MapViewClickEvent)=>{\r\n        // console.log(mapView.scale)\r\n\r\n        if( mapView.scale < layer.minScale && \r\n            mapView.scale > layer.maxScale\r\n        ){\r\n            const results = await layer.queryFeatures({\r\n                where: '1=1',\r\n                geometry: mapView.toMap(event),\r\n                returnGeometry: true,\r\n                outFields: outFields || ['*']\r\n            });\r\n    \r\n            if(results.features && results.features.length){\r\n                onSelect(results.features[0]);\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(mapView){\r\n            init();\r\n        }\r\n    }, [mapView]);\r\n\r\n    useEffect(() => {\r\n        if(layer && mapView){\r\n            mapView.on(\"click\", (event)=>{\r\n                queryFeatures(event);\r\n            });\r\n        }\r\n    }, [layer])\r\n\r\n    return null;\r\n}\r\n\r\nexport default QueryTaskLayer\r\n","export default {\r\n    'webmap-id':'1bff921ddf7044c3b5ba34e8494a2073',\r\n    'us-states-feature-layer-item-id': '99fd67933e754a1181cc755146be21ca',\r\n    'us-counties-feature-layer-item-id': '7566e0221e5646f99ea249a197116605',\r\n    'covid19-data-us-states-url': 'https://covid19.vannizhang.com/us-states-paths.json',\r\n    'covid19-data-us-counties-url': 'https://covid19.vannizhang.com/us-counties-paths.json',\r\n    'us-counties-layer-visible-scale': {\r\n        'min': 7500000,\r\n        'max': 0\r\n    },\r\n    'us-states-layer-visible-scale': {\r\n        'min': 73957190,\r\n        'max': 7500001\r\n    }\r\n};\r\n\r\nexport const ThemeStyle = {\r\n    'theme-color-red': '#A10D22',\r\n    'theme-color-khaki': '#E8E2D2',\r\n    'theme-color-khaki-bright': '#EFEADB',\r\n    'floating-panel-box-shadow': '#B1A483',\r\n    'theme-color-khaki-dark': '#B2A584'\r\n};","import React from 'react'\r\nimport { Covid19TrendName } from 'covid19-trend-map';\r\nimport {\r\n    ThemeStyle\r\n} from '../../AppConfig';\r\n\r\ntype Props = {\r\n    activeTrend: Covid19TrendName;\r\n    activeTrendOnChange: (val:Covid19TrendName)=>void;\r\n}\r\n\r\nconst SwitchBtnData: {\r\n    label: string;\r\n    value: Covid19TrendName\r\n}[] = [\r\n    {\r\n        label: 'WEEKLY CASES',\r\n        value: 'new-cases'\r\n    },\r\n    {\r\n        label: 'CASES',\r\n        value: 'confirmed'\r\n    },\r\n    {\r\n        label: 'DEATHS',\r\n        value: 'death'\r\n    }\r\n];\r\n\r\nconst ControlPanel: React.FC<Props> = ({\r\n    activeTrend,\r\n    activeTrendOnChange\r\n}) => {\r\n    \r\n    const getSwitchBtns = ()=>{\r\n        return SwitchBtnData.map(d=>{\r\n\r\n            const {\r\n                value, label\r\n            } = d;\r\n\r\n            return (\r\n                <div\r\n                    key={value}\r\n                    style={{\r\n                        'width': '150px',\r\n                        'height': '100%',\r\n                        'color': ThemeStyle[\"theme-color-red\"],\r\n                        'backgroundColor': activeTrend === value ? ThemeStyle[\"theme-color-khaki-bright\"] : 'transparent',\r\n                        'display': 'flex',\r\n                        'alignItems': 'center',\r\n                        'justifyContent': 'center',\r\n                        'boxSizing':'border-box',\r\n                        'borderBottom': `solid 4px ${ activeTrend === value ? ThemeStyle[\"theme-color-red\"] : 'transparent' }`,\r\n                        'borderRight': `solid 1px #E0D8C1`,\r\n                        'cursor': 'pointer'\r\n                    }}\r\n                    onClick={activeTrendOnChange.bind(this, value)}\r\n                >\r\n                    <span className='avenir-bold'>{label}</span>\r\n                </div>\r\n            )\r\n        })\r\n    };\r\n\r\n    const getInfoBtn = ()=>{\r\n\r\n        return (\r\n            <div\r\n                style={{\r\n                    'width': '60px',\r\n                    'height': '100%',\r\n                    'display': 'flex',\r\n                    'alignItems': 'center',\r\n                    'justifyContent': 'center',\r\n                    'cursor': 'pointer'\r\n                }}\r\n            >\r\n                <svg \r\n                    viewBox=\"0 0 24 24\" \r\n                    height='24' \r\n                    width='24'\r\n                    fill={ThemeStyle[\"theme-color-khaki-dark\"]}\r\n                >\r\n                    <path d=\"M12.5 7.5a1 1 0 1 1 1-1 1.002 1.002 0 0 1-1 1zM13 18V9h-2v1h1v8h-1v1h3v-1zm9.8-5.5A10.3 10.3 0 1 1 12.5 2.2a10.297 10.297 0 0 1 10.3 10.3zm-1 0a9.3 9.3 0 1 0-9.3 9.3 9.31 9.31 0 0 0 9.3-9.3z\"/>\r\n                    <path fill=\"none\" d=\"M0 0h24v24H0z\"/>\r\n                </svg>\r\n            </div>\r\n        )\r\n    }\r\n    \r\n    return (\r\n        <div\r\n            style={{\r\n                'position': 'absolute',\r\n                'top': '10px',\r\n                'right': '10px',\r\n                'boxShadow': `0 0 10px 2px #B1A483`,\r\n            }}\r\n        >\r\n            <div\r\n                style={{\r\n                    'backgroundColor': ThemeStyle[\"theme-color-red\"],\r\n                    'color': ThemeStyle[\"theme-color-khaki-bright\"],\r\n                    'height': '20px',\r\n                    'lineHeight': '20px',\r\n                    'width': '100%',\r\n                    'textAlign': 'center'\r\n                }}\r\n            >\r\n                <span className='avenir-bold' style={{\r\n                    'fontSize': '0.785rem'\r\n                }}>CORONAVIRUS TRENDS PER 100,000 PEOPLE, SINCE FEBRUARY, UPDATED DAILY</span>\r\n            </div>\r\n\r\n            <div\r\n                style={{\r\n                    'display': 'flex',\r\n                    'height': '60px',\r\n                    'width': '100%',\r\n                    'boxSizing':'border-box',\r\n                    \r\n                    'backgroundColor': ThemeStyle[\"theme-color-khaki\"]\r\n                }}\r\n            >\r\n                { getSwitchBtns() }\r\n                { getInfoBtn() }\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default ControlPanel\r\n","import React, {\r\n    useRef,\r\n    useEffect\r\n} from 'react';\r\n\r\nimport { \r\n    select,\r\n    scaleBand,\r\n    scaleLinear\r\n} from 'd3';\r\n\r\nimport useWindowSize from '@rehooks/window-size';\r\n\r\nconst margin = {\r\n    top: 5, \r\n    right: 20, \r\n    bottom: 30, \r\n    left: 40\r\n};\r\n\r\ntype Dimension = {\r\n    height: number;\r\n    width: number;\r\n};\r\n\r\nexport type XScale = d3.ScaleBand<string>;\r\nexport type YScale = d3.ScaleLinear<number, number>;\r\n\r\nexport type Scales = {\r\n    x: XScale;\r\n    y: YScale;\r\n    lastUpdateTime?: Date;\r\n};\r\n\r\nexport type SvgContainerData = {\r\n    svg: SVGElement;\r\n    g: SVGGElement;\r\n    margin: typeof margin;\r\n    dimension?: Dimension\r\n}\r\n\r\ntype Props = {\r\n    // data: Covid19CasesByTimeFeature[];\r\n    xDomain: string[];\r\n    yDomain: number[]\r\n}\r\n\r\nconst SvgContainer:React.FC<Props> = ({\r\n    // data,\r\n    xDomain,\r\n    yDomain,\r\n    children\r\n}) => {\r\n\r\n    const windowSize = useWindowSize();\r\n\r\n    const containerRef = useRef<HTMLDivElement>();\r\n    const dimensionRef = useRef<Dimension>();\r\n\r\n    const [ svgContainerData, setSvgContainerData ] = React.useState<SvgContainerData>();\r\n\r\n    const [ scales, setScales ] =  React.useState<Scales>();\r\n\r\n    const init = ()=>{\r\n\r\n        const container = containerRef.current;\r\n        const width = container.offsetWidth - margin.left - margin.right;\r\n        const height = container.offsetHeight - margin.top - margin.bottom;\r\n\r\n        dimensionRef.current = {\r\n            height,\r\n            width\r\n        };\r\n\r\n        select(container)\r\n            .append(\"svg\")\r\n                .attr(\"width\", '100%')\r\n                .attr(\"height\", height + margin.top + margin.bottom)\r\n            .append(\"g\")\r\n                .attr(\r\n                    \"transform\", \r\n                    `translate(${margin.left}, ${margin.top})`\r\n                );\r\n        \r\n        const svgSelector = select(container)\r\n            .select<SVGElement>('svg');\r\n\r\n        const svg = svgSelector.node();\r\n\r\n        const g = svgSelector\r\n            .select<SVGGElement>('g')\r\n            .node();\r\n\r\n        const xScale = scaleBand<string>()\r\n            .paddingInner(0.2)\r\n            .range([0, width])\r\n            .domain(xDomain)\r\n\r\n        const yScale = scaleLinear()\r\n            .range([height, 0])\r\n            .domain(yDomain).nice();\r\n\r\n        setSvgContainerData({\r\n            svg,\r\n            g,\r\n            margin,\r\n            dimension: dimensionRef.current\r\n        });\r\n\r\n        setScales({\r\n            x: xScale,\r\n            y: yScale\r\n        });\r\n        \r\n    };\r\n\r\n    const scalesOnUpdateEndHandler = ()=>{\r\n        setScales(scales=>{\r\n            return {\r\n                ...scales,\r\n                // change last update time so the children components know scales have changed\r\n                lastUpdateTime: new Date()\r\n            }\r\n        });\r\n    };\r\n\r\n    const resizeHandler = ()=>{\r\n\r\n        const container = containerRef.current;\r\n\r\n        if(!container || !svgContainerData || !scales){\r\n            return;\r\n        }\r\n\r\n        // const { svg } = svgContainerData;\r\n        const { x } = scales;\r\n\r\n        // const newContainerWidth = window.innerWidth - 720;\r\n        const newWidth = container.offsetWidth - margin.left - margin.right;\r\n\r\n        dimensionRef.current.width = newWidth;\r\n\r\n        x.range([0, newWidth ]);\r\n\r\n        scalesOnUpdateEndHandler();\r\n    }\r\n\r\n    useEffect(()=>{\r\n        init();\r\n    }, []);\r\n\r\n    useEffect(()=>{\r\n\r\n        if( scales && yDomain ){\r\n            scales.y.domain(yDomain).nice();\r\n            scalesOnUpdateEndHandler();\r\n        }\r\n\r\n    }, [ yDomain ]);\r\n\r\n    React.useEffect(()=>{\r\n        resizeHandler();\r\n    }, [ windowSize ]);\r\n\r\n    return (\r\n        <>\r\n            <div \r\n                ref={containerRef}\r\n                style={{\r\n                    'position': 'relative',\r\n                    'width': '100%',\r\n                    'height': '100%'\r\n                }}\r\n            ></div>\r\n            {   \r\n                React.Children.map(children, (child)=>{\r\n                    return React.cloneElement(child as React.ReactElement<any>, {\r\n                        svgContainerData,\r\n                        scales\r\n                    });\r\n                })  \r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default SvgContainer\r\n","// import './Axis.scss';\r\nimport React from 'react';\r\nimport { numberFns } from 'helper-toolkit-ts'\r\n\r\nimport { \r\n    select,\r\n    axisBottom,\r\n    axisLeft,\r\n    scaleTime,\r\n    timeFormat\r\n} from 'd3';\r\n\r\nimport {\r\n    Scales,\r\n    SvgContainerData\r\n} from './SvgContainer';\r\n\r\ninterface Props {\r\n    svgContainerData?: SvgContainerData;\r\n    scales?: Scales;\r\n};\r\n\r\nconst formatTime = timeFormat(\"%b\");\r\n\r\nconst Axis:React.FC<Props> = ({\r\n    svgContainerData,\r\n    scales\r\n})=>{\r\n\r\n    const drawXAxis = ()=>{\r\n\r\n        const { dimension, g } = svgContainerData;\r\n\r\n        const { height, width } = dimension;\r\n\r\n        const mainGroup = select(g);\r\n\r\n        const { x } = scales;\r\n\r\n        const domain = x.domain();\r\n        const startDateParts = domain[0].split('-').map(d=>+d);\r\n        const startDate = new Date(startDateParts[0], startDateParts[1] - 1, startDateParts[2]);\r\n\r\n        const endDateParts = domain[domain.length - 1].split('-').map(d=>+d);\r\n        const endDate = new Date(endDateParts[0], endDateParts[1] - 1, endDateParts[2]);\r\n        \r\n        const xScale = scaleTime()\r\n            .range([0, width])\r\n            .domain([startDate, endDate])\r\n\r\n        const xAxis = axisBottom(xScale)\r\n            // .ticks(timeMonth)\r\n            .tickFormat((date:Date)=>{\r\n                return formatTime(date);\r\n            })\r\n            // .tickValues(d=>{})\r\n            // .tickSizeInner(-(height))\r\n            // .tickPadding(9)\r\n\r\n        const xAxisLabel = mainGroup.selectAll('.x.axis');\r\n\r\n        if (!xAxisLabel.size()) {\r\n            mainGroup\r\n                .append('g')\r\n                .attr('class', 'x axis')\r\n                .attr('transform', 'translate(0,' + height  + ')')\r\n                .call(xAxis);\r\n        } else {\r\n            xAxisLabel\r\n                .attr('transform', 'translate(0,' + height + ')')\r\n                .call(xAxis);\r\n        }\r\n\r\n    };\r\n\r\n    const drawYAxis = ()=>{\r\n\r\n        const { g, dimension } = svgContainerData;\r\n\r\n        const { width } = dimension;\r\n\r\n        const { y } = scales;\r\n\r\n        const mainGroup = select(g);\r\n\r\n        const yAxis = axisLeft(y)\r\n            .ticks(5)\r\n            .tickSizeInner(-(width))\r\n            .tickPadding(5)\r\n            .tickFormat(num=>{\r\n                return numberFns.abbreviateNumber(+num, 0)\r\n            })\r\n\r\n        const yAxisLabel = mainGroup.selectAll('.y.axis');\r\n\r\n        if (!yAxisLabel.size()) {\r\n            mainGroup\r\n                .append('g')\r\n                .attr('class', 'y axis')\r\n                .call(yAxis);\r\n        } else {\r\n            yAxisLabel.call(yAxis);\r\n        }\r\n    };\r\n\r\n    React.useEffect(()=>{\r\n\r\n        if( svgContainerData && scales ){\r\n            drawXAxis();\r\n            drawYAxis();\r\n        }\r\n\r\n    }, [ svgContainerData, scales ]);\r\n\r\n    return null;\r\n};\r\n\r\nexport default Axis;","import React from 'react';\r\nimport { select } from 'd3';\r\nimport { generate } from 'shortid';\r\n\r\nimport {\r\n    Scales,\r\n    SvgContainerData\r\n} from './SvgContainer';\r\n\r\nimport {\r\n    ChartDataItem\r\n} from './ChartPanel';\r\n\r\nconst BarRectGroupClassName = `bar-rect-group-${generate()}`;\r\nconst BarRectClassName = `bar-rect-${generate()}`;\r\n\r\ntype Props = {\r\n    svgContainerData?: SvgContainerData;\r\n    scales?: Scales;\r\n};\r\n\r\ntype BarProps = {\r\n    data: ChartDataItem[],\r\n    fillColor: string;\r\n} & Props;\r\n\r\nconst Bar:React.FC<BarProps> = ({\r\n    data,\r\n    fillColor,\r\n    svgContainerData,\r\n    scales\r\n})=>{\r\n\r\n    const containerG = React.useRef<SVGGElement>();\r\n\r\n    const initContainer = ()=>{\r\n        const { g } = svgContainerData;\r\n\r\n        containerG.current = select(g)\r\n            .append('g')\r\n            .node();\r\n    };\r\n\r\n    const draw = ()=>{\r\n\r\n        const { dimension } = svgContainerData;\r\n\r\n        const { height } = dimension;\r\n\r\n        const { x, y } = scales;\r\n\r\n        remove();\r\n\r\n        select(containerG.current)\r\n            .append('g')\r\n            .attr('class', BarRectGroupClassName)\r\n            // .attr(\"clip-path\", `url(#${clipPathId})`)\r\n            .selectAll(`.${BarRectClassName}`)\r\n                .data(data)\r\n            .enter().append(\"rect\")\r\n                .attr(\"class\", BarRectClassName)\r\n                .style('fill', fillColor)\r\n                .attr(\"x\", d=>x(d.x))\r\n                .attr(\"width\", x.bandwidth() )\r\n                .attr(\"y\", d=>y(d.y))\r\n                .attr(\"height\", (d)=>{\r\n                    return height - y(d.y)\r\n                })\r\n                \r\n    };\r\n\r\n    const remove = ()=>{\r\n\r\n        const existingBars = select(containerG.current)\r\n            .selectAll(`.${BarRectGroupClassName}`);\r\n\r\n        if (existingBars.size()) {\r\n            existingBars.remove()\r\n        }\r\n    };\r\n\r\n    React.useEffect(()=>{\r\n        if( svgContainerData){\r\n            initContainer();\r\n        }\r\n    }, [ svgContainerData ]);\r\n\r\n    React.useEffect(()=>{\r\n        if( svgContainerData && scales && data ){\r\n            draw();\r\n        }\r\n    }, [ scales, data ]);\r\n\r\n    return null;\r\n};\r\n\r\nexport default Bar;","import React from 'react';\r\nimport { generate } from 'shortid';\r\nimport { \r\n    select,\r\n    line,\r\n    curveMonotoneX\r\n} from 'd3';\r\n\r\nimport {\r\n    Scales,\r\n    SvgContainerData,\r\n} from './SvgContainer';\r\n\r\nimport {\r\n    ChartDataItem\r\n} from './ChartPanel';\r\n\r\ntype Props = {\r\n    svgContainerData?: SvgContainerData;\r\n    scales?: Scales;\r\n};\r\n\r\ntype LineProps = {\r\n    data: ChartDataItem[];\r\n    strokeColor: string;\r\n} & Props;\r\n\r\nconst LinePathClassName = `line-${generate()}`;\r\n\r\nconst Line:React.FC<LineProps> = ({\r\n    data,\r\n    strokeColor,\r\n    svgContainerData,\r\n    scales\r\n})=>{\r\n\r\n    const containerG = React.useRef<SVGGElement>();\r\n\r\n    const initContainer = ()=>{\r\n        const { g } = svgContainerData;\r\n\r\n        containerG.current = select(g)\r\n            .append('g')\r\n            .node();\r\n    };\r\n\r\n    const draw = ()=>{\r\n\r\n        const containerGroup = select(containerG.current);\r\n\r\n        const { x, y } = scales;\r\n\r\n        const xOffset = x.bandwidth() / 2;\r\n\r\n        const valueline = line<ChartDataItem>()\r\n            // .curve(curveMonotoneX)\r\n            .x(d=>x(d.x) + xOffset)\r\n            .y(d=>y(d.y));\r\n\r\n        remove();\r\n\r\n        containerGroup.append(\"path\")\r\n            .data([data])\r\n            .attr(\"class\", LinePathClassName)\r\n            .attr(\"d\", valueline)\r\n            .style('fill', 'none')\r\n            .style('stroke', strokeColor)\r\n            .style('stroke-width', 2);\r\n    };\r\n\r\n    const remove = ()=>{\r\n\r\n        const lines = select(containerG.current).selectAll(`.${LinePathClassName}`);\r\n        \r\n        // check the number of existing lines, if greater than 0; remove all existing ones\r\n        if(lines.size()){\r\n            lines.remove().exit();\r\n        }\r\n    };\r\n\r\n    React.useEffect(()=>{\r\n        if( svgContainerData){\r\n            initContainer();\r\n        }\r\n    }, [ svgContainerData ]);\r\n\r\n    React.useEffect(()=>{\r\n        if( svgContainerData && scales && data ){\r\n            draw();\r\n        }\r\n    }, [ scales, data ]);\r\n\r\n    return null;\r\n};\r\n\r\nexport default Line;","import React, {\r\n    useState\r\n} from 'react'\r\n\r\nimport {\r\n    Covid19TrendName,\r\n    Covid19CasesByTimeFeature\r\n} from 'covid19-trend-map';\r\n\r\nimport SvgContainer from './SvgContainer';\r\nimport Axis from './Axis';\r\nimport Bar from './Bars';\r\nimport Line from './Line';\r\n\r\nimport {\r\n    max\r\n} from 'd3';\r\n\r\nimport { ThemeStyle } from '../../AppConfig';\r\n\r\ntype Props = {\r\n    activeTrend: Covid19TrendName;\r\n    data: Covid19CasesByTimeFeature[]\r\n}\r\n\r\nexport type ChartDataItem = {\r\n    x: string;\r\n    y: number;\r\n}\r\n\r\n// field names for Covid19CasesByTime Features\r\nexport const FieldNameByActiveTrend:{ [ key in Covid19TrendName]: string } = {\r\n    'new-cases': 'NewCases',\r\n    'death': 'Deaths',\r\n    'confirmed': 'Confirmed'\r\n}\r\n\r\nconst ChartPanel:React.FC<Props> = ({\r\n    activeTrend,\r\n    data\r\n}) => {\r\n\r\n    const fieldName = FieldNameByActiveTrend[activeTrend];\r\n\r\n    // if true, convert numbers from Covid19CasesByTimeFeature into number per 100K people\r\n    const [ showNormalizedValues, setShowNormalizedValues ] = useState<boolean>(true);\r\n\r\n    const getXDomain = ()=>{\r\n        const xDomain = data.map(d=>d.attributes.dt);\r\n        return xDomain\r\n    };\r\n\r\n    const getYDomain = ()=>{\r\n        const values = data.map(d=>{\r\n            return showNormalizedValues \r\n                ? Math.round(d.attributes[fieldName] / d.attributes.Population * 100000 )\r\n                : d.attributes[fieldName] \r\n        });\r\n        const yDomain = [ 0, max(values) ];\r\n        return yDomain;\r\n    }\r\n\r\n    const getDataForBars = ():ChartDataItem[] =>{\r\n        if(!data || !data.length){\r\n            return [];\r\n        }\r\n\r\n        return data.map(d=>{\r\n\r\n            const y = showNormalizedValues\r\n                ? Math.round(d.attributes[fieldName] / d.attributes.Population * 100000)\r\n                : d.attributes[fieldName] \r\n\r\n            return {\r\n                x: d.attributes.dt, \r\n                y\r\n            }\r\n        });\r\n    };\r\n\r\n    const getDataForLine = ():ChartDataItem[] =>{\r\n        \r\n        if(!data || !data.length || activeTrend !== 'new-cases'){\r\n            return [];\r\n        }\r\n\r\n        const values:ChartDataItem[]  = [];\r\n\r\n        for(let i = data.length - 1; i > 0; i--){\r\n\r\n            const feature = data[i];\r\n            \r\n            const x = feature.attributes.dt;\r\n\r\n            let sum = 0;\r\n            const startIndex = i - 6 >= 0 ? i - 6 : 0;\r\n            const endIndex = i + 1;\r\n\r\n            const featuresInPastWeek = data\r\n                .slice(startIndex, endIndex);\r\n\r\n            featuresInPastWeek.forEach(d=>sum += d.attributes[fieldName]);\r\n\r\n            let y = (sum / featuresInPastWeek.length);\r\n\r\n            if(showNormalizedValues){\r\n                y = ( y / feature.attributes.Population * 100000)\r\n            }\r\n\r\n            y = Math.round(y);\r\n\r\n            values.push({\r\n                x,\r\n                y\r\n            })\r\n        }\r\n\r\n        return values;\r\n    }\r\n\r\n    return data && data.length ? (\r\n        <div\r\n            style={{\r\n                'width': '100%',\r\n                'height': '170px',\r\n                'backgroundColor': ThemeStyle[\"theme-color-khaki-bright\"]\r\n            }}\r\n        >\r\n            <SvgContainer\r\n                xDomain={getXDomain()}\r\n                yDomain={getYDomain()}\r\n            >\r\n\r\n                <Axis />\r\n\r\n                <Bar \r\n                    fillColor={ThemeStyle[\"theme-color-khaki-dark\"]}\r\n                    data={getDataForBars()}\r\n                />\r\n\r\n                <Line \r\n                    strokeColor={ThemeStyle[\"theme-color-red\"]}\r\n                    data={getDataForLine()}\r\n                />\r\n\r\n            </SvgContainer>\r\n\r\n        </div>\r\n    \r\n    ) : null\r\n}\r\n\r\nexport default ChartPanel;","import React from 'react'\r\nimport { ThemeStyle } from '../../AppConfig'\r\n\r\nconst BottomPanel:React.FC = ({\r\n    children\r\n}) => {\r\n    return (\r\n        <div\r\n            style={{\r\n                'position': 'absolute',\r\n                'left': '15px',\r\n                'right': '15px',\r\n                'bottom': '25px',\r\n                // 'width': '100%',\r\n                // 'padding': '1rem 1rem 1.5rem',\r\n                'boxSizing': 'border-box',\r\n                'boxShadow': `0 0 10px 2px ${ThemeStyle[\"floating-panel-box-shadow\"]}`,\r\n                'backgroundColor': ThemeStyle[\"theme-color-khaki-bright\"]\r\n            }}\r\n        >\r\n            { children }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BottomPanel\r\n","import React from 'react'\r\nimport { ThemeStyle } from '../../AppConfig'\r\nimport { Covid19CasesByTimeFeature } from 'covid19-trend-map';\r\nimport { numberFns } from 'helper-toolkit-ts';\r\n\r\ntype Props = {\r\n    locationName?: string;\r\n    data: Covid19CasesByTimeFeature[];\r\n    closeBtnOnClick: ()=>void;\r\n}\r\n\r\nconst SummaryInfoPanel:React.FC<Props> = ({\r\n    locationName,\r\n    data,\r\n    closeBtnOnClick\r\n}) => {\r\n\r\n    const getSummaryInfo = ()=>{\r\n        const feature7DaysAgo = data[data.length - 7]\r\n        const latestFeature = data[data.length - 1];\r\n\r\n        const cumulativeCases = numberFns.numberWithCommas(latestFeature.attributes.Confirmed);\r\n        const cumulativeDeaths = numberFns.numberWithCommas(latestFeature.attributes.Deaths);\r\n\r\n        const newCasesThisWeek = numberFns.numberWithCommas(latestFeature.attributes.Confirmed - feature7DaysAgo.attributes.Confirmed);\r\n        const deathsThisWeek = numberFns.numberWithCommas(latestFeature.attributes.Deaths - feature7DaysAgo.attributes.Deaths);\r\n\r\n        const population = numberFns.numberWithCommas(latestFeature.attributes.Population);\r\n\r\n        return (\r\n            <div\r\n                className='font-size--2 avenir-bold text-theme-color-khaki'\r\n                style={{\r\n                    'display': 'flex',\r\n                    'alignItems': 'center',\r\n                    'padding': '0 1rem'\r\n                }}\r\n            >\r\n                <div className='margin-right-1'>\r\n                    <span className='text-theme-color-red'>Population</span> { population }\r\n                </div>\r\n\r\n                <div className='margin-right-1'>\r\n                    <span className='text-theme-color-red'>{newCasesThisWeek}</span> new cases and <span className='text-theme-color-red'>{deathsThisWeek}</span> deaths this week\r\n                </div>\r\n\r\n                <div className='margin-right-1'>\r\n                    <span className='text-theme-color-red'>{cumulativeCases}</span> cumulative cases and <span className='text-theme-color-red'>{cumulativeDeaths}</span> deaths\r\n                </div>\r\n            </div>\r\n        )\r\n\r\n    }\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                'width': '100%',\r\n                'padding': '.5rem 1.35rem',\r\n                'display': 'flex',\r\n                'alignItems': 'center',\r\n                'boxSizing': 'border-box'\r\n            }}\r\n        >\r\n            <div\r\n                style={{\r\n                    'color': ThemeStyle[\"theme-color-red\"],\r\n                    'textTransform': 'uppercase'\r\n                }}\r\n            >\r\n                <span className='avenir-bold font-size-2'>{locationName}</span>\r\n            </div>\r\n\r\n            <div\r\n                style={{\r\n                    'flexGrow': 1\r\n                }}\r\n            >\r\n                { getSummaryInfo() }\r\n            </div>\r\n\r\n            <div\r\n                style={{\r\n                    'cursor': 'pointer'\r\n                }}\r\n                onClick={closeBtnOnClick}\r\n            >\r\n                <svg \r\n                    viewBox=\"0 0 32 32\" \r\n                    height=\"32\" \r\n                    width=\"32\"\r\n                    fill={ThemeStyle[\"theme-color-khaki-dark\"]}\r\n                >\r\n                    <path d=\"M23.985 8.722L16.707 16l7.278 7.278-.707.707L16 16.707l-7.278 7.278-.707-.707L15.293 16 8.015 8.722l.707-.707L16 15.293l7.278-7.278z\"/>\r\n                    <path fill=\"none\" d=\"M0 0h32v32H0z\"/>\r\n                </svg>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SummaryInfoPanel\r\n","import axios from 'axios';\r\n\r\nimport {\r\n    Covid19CasesByTimeFeature\r\n} from 'covid19-trend-map';\r\n\r\ntype FetchCovid19DataOptions = {\r\n    countyFIPS?: string;\r\n    stateName?: string;\r\n}\r\n\r\nconst USCountiesCovid19CasesByTimeFeatureServiceURL = 'https://services9.arcgis.com/6Hv9AANartyT7fJW/ArcGIS/rest/services/USCounties_cases_V1/FeatureServer/1';\r\n\r\nconst cachedQueryResults: {\r\n    [key:string]: Covid19CasesByTimeFeature[]\r\n} = {};\r\n\r\nexport const fetchCovid19Data = async({\r\n    countyFIPS,\r\n    stateName\r\n}:FetchCovid19DataOptions):Promise<Covid19CasesByTimeFeature[]>=>{\r\n\r\n    const key4CachedResults = countyFIPS || stateName;\r\n\r\n    if(cachedQueryResults[key4CachedResults]){\r\n        return cachedQueryResults[key4CachedResults];\r\n    }\r\n\r\n    const requestUrl = `${USCountiesCovid19CasesByTimeFeatureServiceURL}/query`;\r\n\r\n    const params = countyFIPS\r\n        ? {\r\n            f: 'json',\r\n            where: `FIPS='${countyFIPS}'`,\r\n            outFields: 'dt,Confirmed,Deaths,NewCases,Population'\r\n        }\r\n        : {\r\n            f: 'json',\r\n            where: `ST_Name='${stateName}'`,\r\n            outFields: '*',\r\n            orderByFields: 'dt',\r\n            groupByFieldsForStatistics: 'ST_Name,dt',\r\n            outStatistics: JSON.stringify([\r\n                {\r\n                    \"statisticType\": \"sum\",\r\n                    \"onStatisticField\": \"Confirmed\", \r\n                    \"outStatisticFieldName\": \"Confirmed\"\r\n                },\r\n                {\r\n                    \"statisticType\": \"sum\",\r\n                    \"onStatisticField\": \"Deaths\", \r\n                    \"outStatisticFieldName\": \"Deaths\"\r\n                },\r\n                {\r\n                    \"statisticType\": \"sum\",\r\n                    \"onStatisticField\": \"NewCases\",\r\n                    \"outStatisticFieldName\": \"NewCases\"\r\n                },\r\n                {\r\n                    \"statisticType\": \"sum\",\r\n                    \"onStatisticField\": \"Population\",\r\n                    \"outStatisticFieldName\": \"Population\"\r\n                }  \r\n            ])\r\n        };\r\n\r\n    try {\r\n        const { data } = await axios.get(requestUrl, { \r\n            params: new URLSearchParams(params)\r\n        });\r\n\r\n        if(data && data.features){\r\n            // console.log(data.features)\r\n\r\n            cachedQueryResults[key4CachedResults] = data.features;\r\n\r\n            return data.features\r\n        }\r\n\r\n    } catch(err){\r\n        console.error(err);\r\n    }\r\n\r\n    return null;\r\n};","import React, {\r\n    useEffect,\r\n    useState\r\n} from 'react';\r\n\r\nimport axios from 'axios';\r\n\r\nimport MapView from '../MapView/MapView';\r\nimport Covid19TrendLayer from '../Covid19TrendLayer/Covid19TrendLayer';\r\nimport QueryTaskLayer from '../QueryTaskLayer/QueryTaskLayer';\r\nimport ControlPanel from '../ControlPanel/ControlPanel';\r\nimport ChartPanel from '../ChartPanel/ChartPanel';\r\nimport BottomPanel from '../BottomPanel/BottomPanel';\r\nimport SummaryInfoPanel from '../SummaryInfoPanel/SummaryInfoPanel';\r\n\r\nimport {\r\n    Covid19TrendName,\r\n    Covid19TrendData,\r\n    Covid19CasesByTimeFeature\r\n} from 'covid19-trend-map'\r\n\r\nimport AppConfig from '../../AppConfig';\r\n\r\nimport {\r\n    urlFns\r\n} from 'helper-toolkit-ts';\r\n\r\nimport {\r\n    fetchCovid19Data\r\n} from '../../utils/queryCovid19Data';\r\n\r\nconst UrlSearchParams = urlFns.parseQuery();\r\n// console.log(UrlSearchParams.trend)\r\n\r\nconst DefaultTrend:Covid19TrendName = UrlSearchParams.trend;\r\n\r\nconst App = () => {\r\n\r\n    const [ activeTrend, setActiveTrend ] = useState<Covid19TrendName>(DefaultTrend || 'new-cases');\r\n\r\n    const [ covid19USCountiesData, setCovid19USCountiesData ] = useState<Covid19TrendData[]>();\r\n\r\n    const [ covid19USStatesData, setCovid19USStatesData ] = useState<Covid19TrendData[]>();\r\n\r\n    const [ covid19CasesByTimeQueryResults, setCovid19CasesByTimeQueryResults ] = useState<Covid19CasesByTimeFeature[]>();\r\n\r\n    const [ covid19CasesByTimeQueryLocationName, setcovid19CasesByTimeQueryLocationName ] = useState<string>();\r\n\r\n    const fetchData = async()=>{\r\n\r\n        try {\r\n            const queryResUSCounties = await axios.get<Covid19TrendData[]>(AppConfig[\"covid19-data-us-counties-url\"]);\r\n            setCovid19USCountiesData(queryResUSCounties.data);\r\n            // console.log(queryResUSCounties)\r\n\r\n            const queryResUSStates = await axios.get<Covid19TrendData[]>(AppConfig[\"covid19-data-us-states-url\"]);\r\n            setCovid19USStatesData(queryResUSStates.data);\r\n            // console.log(queryResUSStates)\r\n\r\n        } catch(err){\r\n            console.error(err);\r\n        }\r\n\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchData();\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <MapView \r\n                webmapId={AppConfig[\"webmap-id\"]}\r\n            >\r\n                <Covid19TrendLayer \r\n                    key='US-Counties'\r\n                    features={covid19USCountiesData}\r\n                    activeTrend={activeTrend}\r\n                    size={18}\r\n                    visibleScale={AppConfig[\"us-counties-layer-visible-scale\"]}\r\n                />\r\n\r\n                <Covid19TrendLayer \r\n                    key='US-States'\r\n                    features={covid19USStatesData}\r\n                    activeTrend={activeTrend}\r\n                    size={24}\r\n                    visibleScale={AppConfig[\"us-states-layer-visible-scale\"]}\r\n                />\r\n\r\n                <QueryTaskLayer \r\n                    key='query-4-US-Counties'\r\n                    itemId={AppConfig[\"us-counties-feature-layer-item-id\"]}\r\n                    outFields={['FIPS', 'NAME', 'STATE_NAME']}\r\n                    visibleScale={AppConfig[\"us-counties-layer-visible-scale\"]}\r\n                    onSelect={async(countyFeature)=>{\r\n                        const countyName = `${countyFeature.attributes['NAME']} CO, ${countyFeature.attributes['STATE_NAME']}`\r\n                        setcovid19CasesByTimeQueryLocationName(countyName);\r\n\r\n                        const data = await fetchCovid19Data({\r\n                            countyFIPS: countyFeature.attributes['FIPS']\r\n                        });\r\n                        setCovid19CasesByTimeQueryResults(data);\r\n                    }}\r\n                />\r\n\r\n                <QueryTaskLayer \r\n                    key='query-4-US-States'\r\n                    itemId={AppConfig[\"us-states-feature-layer-item-id\"]}\r\n                    outFields={['STATE_NAME']}\r\n                    visibleScale={AppConfig[\"us-states-layer-visible-scale\"]}\r\n                    onSelect={async(stateFeature)=>{\r\n\r\n                        const stateName = stateFeature.attributes['STATE_NAME'];\r\n                        setcovid19CasesByTimeQueryLocationName(stateName);\r\n\r\n                        const data = await fetchCovid19Data({\r\n                            stateName\r\n                        });\r\n                        setCovid19CasesByTimeQueryResults(data);\r\n                    }}\r\n                />\r\n            </MapView>\r\n\r\n            <ControlPanel \r\n                activeTrend={activeTrend}\r\n                activeTrendOnChange={setActiveTrend}\r\n            />\r\n\r\n            {\r\n                covid19CasesByTimeQueryResults ? (\r\n                    <BottomPanel>\r\n\r\n                        <SummaryInfoPanel \r\n                            locationName={covid19CasesByTimeQueryLocationName}\r\n                            data={covid19CasesByTimeQueryResults}\r\n                            closeBtnOnClick={setCovid19CasesByTimeQueryResults.bind(this, null)}\r\n                        />\r\n\r\n                        <ChartPanel \r\n                            activeTrend={activeTrend}\r\n                            data={covid19CasesByTimeQueryResults}\r\n                        />\r\n                    </BottomPanel>\r\n                ) : null\r\n            }\r\n\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import './styles/index.scss';\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { setDefaultOptions } from 'esri-loader';\r\n\r\nimport App from './components/App/App';\r\n\r\nsetDefaultOptions({ url: 'https://js.arcgis.com/next/'})\r\n\r\nReactDOM.render(\r\n    <App/>, \r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}